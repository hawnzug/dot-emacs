# -*- org-babel-use-quick-and-dirty-noweb-expansion: t; -*-
#+PROPERTY: header-args:elisp :tangle config.el :results output silent
* Contents
:PROPERTIES:
:TOC:      :include all
:END:

:CONTENTS:
- [[#contents][Contents]]
- [[#init][init]]
- [[#use-package][use-package]]
- [[#help-functions][help functions]]
- [[#all-the-icons][all-the-icons]]
- [[#doom-themes][doom-themes]]
- [[#generalel][general.el]]
- [[#evil][evil]]
  - [[#evil-surround][evil-surround]]
  - [[#evil-matchit][evil-matchit]]
- [[#hydra][hydra]]
  - [[#hydra-window][hydra-window]]
  - [[#hydra-buffer][hydra-buffer]]
- [[#mode-line][mode line]]
- [[#org][org]]
- [[#dired][dired]]
- [[#packages][packages]]
  - [[#alert][alert]]
  - [[#avy][avy]]
  - [[#company][company]]
  - [[#docker][docker]]
  - [[#ediff][ediff]]
  - [[#eldoc][eldoc]]
  - [[#eglot][eglot]]
  - [[#emacs-libvterm][emacs-libvterm]]
  - [[#exec-path-from-shell][exec-path-from-shell]]
  - [[#fcitx][fcitx]]
  - [[#find-file-in-project][find-file-in-project]]
  - [[#hl-line-mode][hl-line-mode]]
  - [[#hl-todo][hl-todo]]
  - [[#htmlize][htmlize]]
  - [[#ibuffer][ibuffer]]
  - [[#imenu-list][imenu-list]]
  - [[#info][info]]
  - [[#ivy][ivy]]
  - [[#ivy-bibtex][ivy-bibtex]]
  - [[#lsp][lsp]]
  - [[#magit][magit]]
  - [[#markdown][markdown]]
  - [[#olivetti][olivetti]]
  - [[#symbol-overlay][symbol-overlay]]
  - [[#terminal-here][terminal-here]]
  - [[#tramp][tramp]]
  - [[#vc-mode][vc-mode]]
  - [[#wgrep][wgrep]]
  - [[#which-key][which-key]]
  - [[#winner-mode][winner-mode]]
  - [[#xref][xref]]
  - [[#yasnippet][yasnippet]]
- [[#languages][languages]]
  - [[#prog-mode][prog-mode]]
  - [[#coq][Coq]]
  - [[#csv][CSV]]
  - [[#haskell][Haskell]]
  - [[#lua][Lua]]
  - [[#agda][Agda]]
  - [[#ocaml][Ocaml]]
  - [[#sml][SML]]
  - [[#cubicaltt][Cubicaltt]]
  - [[#c][C]]
  - [[#python][Python]]
  - [[#tex][TeX]]
  - [[#yaml][YAML]]
:END:
* init
  Allow large garbage collection threshold when init.
  #+BEGIN_SRC elisp
    (setq gc-cons-threshold 64000000)
    (add-hook 'after-init-hook #'(lambda () (setq gc-cons-threshold 800000)))
  #+END_SRC

  Font setup.
  #+BEGIN_SRC elisp
    (defun my:font-setup ()
      (let ((primary-font
             (concat
              "Iosevka Curly Slab "
              (pcase (cddr (frame-monitor-attribute 'geometry))
                ('(3840 2160) "14") (else "14")))))
      (set-fontset-font t 'unicode "Noto Color Emoji")
      (set-fontset-font t 'unicode "DejaVu Sans" nil 'append)
      (set-fontset-font t 'han "Source Han Sans CN")
      (set-fontset-font t 'han "Source Han Serif CN" nil 'append)
      (set-fontset-font t 'cjk-misc "Source Han Sans CN")
      (set-fontset-font t 'cjk-misc "Source Han Serif CN" nil 'append)
      (set-face-font 'default primary-font)
      (set-face-font 'fixed-pitch primary-font)
      (set-face-font 'fixed-pitch-serif primary-font)
      (set-face-font 'variable-pitch "Merriweather 14")))
    (defun my:font-setup-hook (frame)
      "Setup the font, then remove the hook."
      (select-frame frame)
      (my:font-setup)
      (remove-hook 'after-make-frame-functions 'my:font-setup-hook))
    (setq inhibit-compacting-font-caches t)
    (add-hook 'after-make-frame-functions 'my:font-setup-hook nil)
    (my:font-setup)
  #+END_SRC

  Disable useless UIs.
  #+BEGIN_SRC elisp
    (scroll-bar-mode -1)
    (horizontal-scroll-bar-mode -1)
    (tool-bar-mode -1)
    (tooltip-mode -1)
    (menu-bar-mode -1)
  #+END_SRC

  Quiet startup
  #+BEGIN_SRC elisp
    (setq inhibit-startup-screen t)
    (setq inhibit-startup-message t)
    (setq inhibit-startup-echo-area-message t)
    (setq initial-scratch-message nil)
  #+END_SRC

  Show paren pair.
  #+BEGIN_SRC elisp
    (show-paren-mode 1)
  #+END_SRC

Blink!
#+BEGIN_SRC elisp
  (blink-cursor-mode)
#+END_SRC

  Automatically close parenthesis/brackets/...
  #+BEGIN_SRC elisp
    (electric-pair-mode 1)
  #+END_SRC

  Disable backup.
  #+BEGIN_SRC elisp
    (setq make-backup-files nil)
  #+END_SRC

  Auto save after 1 second idle.
  #+BEGIN_SRC elisp
    (setq auto-save-default nil)
    (setq auto-save-visited-interval 1)
    (auto-save-visited-mode)
  #+END_SRC

  Trash instead of delete.
  #+BEGIN_SRC elisp
    (setq trash-directory "~/Trash")
    (setq delete-by-moving-to-trash t)
    (defun system-move-file-to-trash (filename)
      (shell-command (concat "trash " (shell-quote-argument filename))))
  #+END_SRC

  Tab.
  #+BEGIN_SRC elisp
    (setq-default indent-tabs-mode nil)
    (setq-default tab-width 4)
  #+END_SRC

  No wrap line.
  #+BEGIN_SRC elisp
    (setq-default truncate-lines t)
  #+END_SRC

Better word wrap for CJK
#+BEGIN_SRC elisp
  (setq word-wrap-by-category t)
  (load "kinsoku.el")
#+END_SRC

  80 characters one line.
  #+BEGIN_SRC elisp
    (setq-default fill-column 80)
    (setq sentence-end-double-space nil)
  #+END_SRC

  Use straight single quote in help and messages.
  #+BEGIN_SRC elisp
    (setq text-quoting-style 'straight)
  #+END_SRC

  y or n.
  #+BEGIN_SRC elisp
    (defalias 'yes-or-no-p 'y-or-n-p)
    (setq kill-buffer-query-functions nil)
  #+END_SRC

  Window divider on right.
  #+BEGIN_SRC elisp
    (setq window-divider-default-right-width 1)
    (setq window-divider-default-bottom-width 1)
    (setq window-divider-default-places t)
    (window-divider-mode t)
  #+END_SRC

  Avoid crash when open image in Emacs.
  #+BEGIN_SRC elisp
    (setenv "MAGICK_OCL_DEVICE" "OFF")
  #+END_SRC

  #+BEGIN_SRC elisp
    (setq password-cache-expiry 1200)
  #+END_SRC

  Always select the help window.
  #+BEGIN_SRC elisp
    (setq help-window-select t)
  #+END_SRC

For lsp mode
#+BEGIN_SRC elisp
  (setq read-process-output-max (* 1024 1024))
#+END_SRC

* use-package
  #+BEGIN_SRC elisp
    (require 'package)
    ;; (setq package-archives '(("gnu"   . "https://mirrors.tuna.tsinghua.edu.cn/elpa/gnu/")
    ;;                          ("melpa" . "https://mirrors.tuna.tsinghua.edu.cn/elpa/melpa/")))
    (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
    (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)
    (add-to-list 'package-archives '("ublt" . "https://elpa.ubolonton.org/packages/")) ;; tree-sitter
    (unless (package-installed-p 'use-package)
      (package-refresh-contents)
      (package-install 'use-package))
    (eval-when-compile (require 'use-package))
  #+END_SRC

* help functions
  #+BEGIN_SRC elisp
    (defun my:show-trailing-space ()
      (setq show-trailing-whitespace t))
  #+END_SRC

  #+BEGIN_SRC elisp
    (defun my:other-window-or-buffer ()
      "Switch to other window or buffer"
      (interactive)
      (if (one-window-p) (switch-to-buffer (other-buffer)) (select-window (next-window))))

    (defun my:syntax-color-hex ()
      (interactive)
      (font-lock-add-keywords
       nil
       '(("#[[:xdigit:]]\\{6\\}"
          (0 (put-text-property
              (match-beginning 0)
              (match-end 0)
              'face (list :background (match-string-no-properties 0)))))))
      (font-lock-flush))

    (defun my:toggle-line-number ()
      "Toggle line number between relative and nil."
      (interactive)
      (setq display-line-numbers
        (pcase display-line-numbers
          ('relative nil)
          (_ 'relative))))
  #+END_SRC

  #+BEGIN_SRC elisp
    (defun my:toggle-transparency ()
      (interactive)
      (let ((transparency 90)
            (opacity 100)
            (old-alpha (frame-parameter nil 'alpha)))
        (if (and (numberp old-alpha) (< old-alpha opacity))
            (set-frame-parameter nil 'alpha opacity)
          (set-frame-parameter nil 'alpha transparency))))
  #+END_SRC

* all-the-icons
  #+BEGIN_SRC elisp
    (use-package all-the-icons
      :ensure t
      :config
      (add-to-list 'all-the-icons-mode-icon-alist
                   '(latex-mode all-the-icons-fileicon "tex" :face all-the-icons-lred))
      (add-to-list 'all-the-icons-icon-alist
                   '("\\.v" all-the-icons-fileicon "coq" :face all-the-icons-red))
      (add-to-list 'all-the-icons-mode-icon-alist
                   '(coq-mode all-the-icons-fileicon "coq" :face all-the-icons-red)))
  #+END_SRC

* doom-themes
#+BEGIN_SRC elisp
  (use-package doom-themes
    :ensure t
    :config
    (setq doom-themes-enable-bold t)
    (setq doom-themes-enable-italic t)
    (load-theme 'doom-acario-light t)
    (doom-themes-org-config)
    (doom-themes-set-faces nil
      '(org-level-1 :inherit 'default)
      '(org-level-2 :inherit 'default)
      '(org-level-3 :inherit 'default)
      '(org-level-4 :inherit 'default)
      '(org-level-5 :inherit 'default)
      '(org-level-6 :inherit 'default)
      '(org-level-7 :inherit 'default)
      '(org-level-8 :inherit 'default))
    )
#+END_SRC

#+BEGIN_SRC elisp :tangle no
  (use-package modus-operandi-theme
    :init
    ;; NOTE: Everything is disabled by default.
    (setq modus-operandi-theme-slanted-constructs t
          modus-operandi-theme-bold-constructs t
          modus-operandi-theme-fringes nil ; {nil,'subtle,'intense}
          modus-operandi-theme-3d-modeline nil
          modus-operandi-theme-faint-syntax nil
          modus-operandi-theme-intense-hl-line nil
          modus-operandi-theme-intense-paren-match t
          modus-operandi-theme-prompts 'subtle ; {nil,'subtle,'intense}
          modus-operandi-theme-completions 'moderate ; {nil,'moderate,'opinionated}
          modus-operandi-theme-diffs nil ; {nil,'desaturated,'fg-only}
          modus-operandi-theme-org-blocks 'greyscale ; {nil,'greyscale,'rainbow}
          modus-operandi-theme-variable-pitch-headings t
          modus-operandi-theme-rainbow-headings nil
          modus-operandi-theme-section-headings nil
          modus-operandi-theme-scale-headings nil
          modus-operandi-theme-scale-1 1.05
          modus-operandi-theme-scale-2 1.1
          modus-operandi-theme-scale-3 1.15
          modus-operandi-theme-scale-4 1.2
          modus-operandi-theme-scale-5 1.3)
    :config
    (load-theme 'modus-operandi t))
#+END_SRC

* general.el
  #+BEGIN_SRC elisp :noweb no-export
    (use-package general
      :ensure t
      :config
      (general-evil-setup)
      (general-def 'override
        "C-=" 'text-scale-increase
        "M-p" 'my:other-window-or-buffer
        "M-m" 'ivy-switch-buffer
        "M-x" 'counsel-M-x
        "C--" 'text-scale-decrease)
      (general-def 'normal help-mode-map
        "q" 'quit-window))
  #+END_SRC

Use comma as the global leader key.
#+BEGIN_SRC elisp
  (general-def
    '(motion normal insert emacs)
    :prefix ","
    :global-prefix "M-,"
    "f" 'counsel-find-file
    "s" 'swiper
    "d" 'dired
    "r" 'counsel-rg
    "k" 'kill-buffer
    "i" 'ibuffer
    "b" 'ivy-bibtex
    "g" 'magit-status
    "a" 'org-agenda
    "[" 'window-toggle-side-windows
    "e" 'eshell
    "v" 'vterm
    "t" 'terminal-here-launch
    "l" 'org-store-link
    "c" 'org-capture
    "n" '(nil :wk "narrow")
    "n s" 'org-narrow-to-subtree
    "n n" 'narrow-to-region
    "n w" 'widen
    "q" 'save-buffers-kill-terminal
    "Q" 'save-buffers-kill-emacs
    "w" 'hydra-window/body
    "B" 'hydra-buffer/body)
#+END_SRC

Use semicolon as the major mode leader key.
#+BEGIN_SRC elisp
  (general-create-definer major-def
    :states '(motion normal insert emacs)
    :prefix ";"
    :global-prefix "M-;")
#+END_SRC

Use Esc to quit minibuffer, which is previously C-g.
#+BEGIN_SRC elisp
  (general-def '(minibuffer-local-map
                 minibuffer-local-ns-map
                 minibuffer-local-completion-map
                 minibuffer-local-must-match-map
                 minibuffer-local-isearch-map
                 ivy-minibuffer-map)
    [escape] 'minibuffer-keyboard-quit)
#+END_SRC

  #+BEGIN_SRC elisp
    (general-def 'override
      "C-/" 'comment-dwim
      "M-;" nil)
  #+END_SRC

  Find references using xref.
  #+BEGIN_SRC elisp
    (general-nmap
      "g d" 'xref-find-definitions
      "g r" 'xref-find-references
      "g i" 'counsel-imenu)
  #+END_SRC

  Use space as the leader key for those keybindings which are useful only in normal mode.
  #+BEGIN_SRC elisp
    (general-mmap
      :prefix "SPC"
      "" nil
      "a" 'align
      "t l" 'my:toggle-line-number
      "t t" 'my:toggle-transparency
      "t m" 'hide-mode-line-mode
      "s" 'symbol-overlay-put
      "o" 'olivetti-mode
      "f" 'avy-goto-char-2
      "w" 'avy-goto-word-1
      "l" 'avy-goto-line)
  #+END_SRC

* evil
#+BEGIN_SRC elisp
  (use-package evil
    :ensure t
    :init
    (setq evil-want-abbrev-expand-on-insert-exit nil)
    (setq evil-disable-insert-state-bindings t)
    (setq evil-respect-visual-line-mode t)
    :config
    (evil-mode 1)
    (evil-set-initial-state 'ivy-occur-mode 'normal)
    (evil-set-initial-state 'ivy-occur-grep-mode 'normal)
    (evil-set-initial-state 'org-capture-mode 'insert)
    (evil-set-initial-state 'vterm-mode 'insert)
    (evil-set-initial-state 'wdired-mode 'normal))
#+END_SRC

#+BEGIN_SRC elisp
  (general-def 'motion ";" nil "," nil)
  (general-def 'normal
    "x" nil
    "X" nil
    "s" nil
    "S" nil
    "u" 'undo-only
    "U" 'undo
    "C-r" 'undo-redo)
  (general-def 'motion
    :prefix "x"
    "l" 'evil-avy-goto-line
    "f" 'evil-avy-goto-char-in-line
    "c" 'evil-avy-goto-char-2
    "w" 'evil-avy-goto-word-1)
#+END_SRC

** evil-surround
#+BEGIN_SRC elisp
  (use-package evil-surround
    :ensure t
    :after evil
    :defer 2
    :config
    (global-evil-surround-mode 1))
#+END_SRC

** evil-matchit
#+BEGIN_SRC elisp
  (use-package evil-matchit
    :ensure t
    :after evil
    :defer 2
    :config
    (global-evil-matchit-mode 1))
#+END_SRC

* hydra
  #+BEGIN_SRC elisp :noweb no-export
    (use-package hydra
      :ensure t
      :config
      ;; (setq hydra-hint-display-type 'posframe)
      (setq hydra-posframe-show-params
            '(:internal-border-width 10
              :background-color "#f0e9d7"
              :poshandler posframe-poshandler-frame-top-center)))
  #+END_SRC

** hydra-window
   #+BEGIN_SRC elisp
     (defhydra hydra-window
       (:color pink :hint nil)
       (concat
        "            "
        (all-the-icons-material "apps" :height 2 :v-adjust -0.3)
        " Window Management"
        "

     ^Move^         ^Swap^         ^Size^         ^Action^
     ─────────────────────────
     _j_: down      _H_: left      _+_: + h       _s_: split
     _k_: up        _L_: right     _-_: - h       _v_: vsplit
     _h_: left      _J_: bottom    _>_: + w       _d_: delete
     _l_: right     _K_: top       _<_: - w       _o_: only
     _n_: next

     ")
       ("j" evil-window-down)
       ("k" evil-window-up)
       ("h" evil-window-left)
       ("l" evil-window-right)
       ("n" evil-window-next :color blue)
       ("H" evil-window-move-far-left)
       ("L" evil-window-move-far-right)
       ("J" evil-window-move-very-bottom)
       ("K" evil-window-move-very-top)
       ("+" evil-window-increase-height)
       ("-" evil-window-decrease-height)
       (">" evil-window-increase-width)
       ("<" evil-window-decrease-width)
       ("s" evil-window-split)
       ("v" evil-window-vsplit)
       ("d" evil-window-delete :color blue)
       ("o" delete-other-windows :color blue)
       ("q" nil :color blue)
       ("<escape>" nil :color blue))
   #+END_SRC

** hydra-buffer
   #+BEGIN_SRC elisp
     (defhydra hydra-buffer
       (:color teal :hint nil)
       (concat
        (all-the-icons-faicon "clone" :height 2 :v-adjust -0.2)
        " Buffer"
        "

     ^Action^
     ─────
     _j_: next
     _k_: previous
     _d_: delete
     _b_: switch

     ")
       ("j" evil-next-buffer :color red)
       ("k" evil-prev-buffer :color red)
       ("d" evil-delete-buffer)
       ("b" ivy-switch-buffer)
       ("q" nil)
       ("<escape>" nil))
   #+END_SRC

* mode line
  #+BEGIN_SRC elisp
    (use-package doom-modeline
      :ensure t
      :disabled t
      :hook (after-init . doom-modeline-mode)
      :config
      (setq doom-modeline-icon t))
    (setq-default mode-line-format nil)
  #+END_SRC

* org
#+BEGIN_SRC elisp :noweb no-export
  (use-package org
    :ensure org-plus-contrib
    :defer 4
    :hook
    (org-mode . my:show-trailing-space)
    (org-babel-after-execute . org-redisplay-inline-images)
    :config
    (use-package org-mouse)
    (use-package ob-shell)
    <<org-kill-temp-fontify-buffer>>
    (setcdr (assoc "\\.pdf\\'" org-file-apps) "zathura %s")
    (setq org-adapt-indentation nil)
    (setq org-startup-indented t)
    (setq org-startup-truncated t)
    (setq org-hide-emphasis-markers t)
    (setq org-format-latex-options (plist-put org-format-latex-options :scale 1.4))
    (setq org-latex-pdf-process '("latexmk -f -pdf -outdir=%o %f"))
    (setq org-footnote-section nil))
#+END_SRC

Kill temporary buffers created by ~org-src-font-lock-fontify-block~.
#+NAME: org-kill-temp-fontify-buffer
#+BEGIN_SRC elisp :tangle no
  (defun kill-org-src-buffers (&rest args)
    "Kill temporary buffers created by org-src-font-lock-fontify-block."
    (dolist (b (buffer-list))
      (let ((bufname (buffer-name b)))
        (if (string-match-p (regexp-quote "org-src-fontification") bufname)
            (kill-buffer b)))))
  (advice-add 'org-src-font-lock-fontify-block :after #'kill-org-src-buffers)
#+END_SRC

org-id
#+BEGIN_SRC elisp
  (use-package org-id
    :config
    (setq org-id-link-to-org-use-id 'create-if-interactive))
#+END_SRC

org-checklist
#+BEGIN_SRC elisp
  (use-package org-checklist
    :after org)
#+END_SRC

org-maketoc
#+BEGIN_SRC elisp
  (use-package org-make-toc
    :ensure t
    :after org
    :commands (org-make-toc))
#+END_SRC

keybindings
#+BEGIN_SRC elisp
  (general-nmap org-mode-map
    "gh" 'outline-up-heading
    "gj" 'org-forward-heading-same-level
    "gk" 'org-backward-heading-same-level
    "gl" 'outline-next-visible-heading
    "gt" 'counsel-org-goto
    "<" 'org-metaleft
    ">" 'org-metaright
    "t" 'org-todo)
  (general-def org-mode-map
    "M-h" 'org-metaleft
    "M-j" 'org-metadown
    "M-k" 'org-metaup
    "M-l" 'org-metaright
    "M-H" 'org-shiftmetaleft
    "M-J" 'org-shiftmetadown
    "M-K" 'org-shiftmetaup
    "M-L" 'org-shiftmetaright)
#+END_SRC

#+BEGIN_SRC elisp
  (major-def org-mode-map
    "t" 'org-time-stamp
    "l" 'org-insert-link
    "i" 'org-toggle-inline-images
    "x" 'org-toggle-latex-fragment
    "o" 'org-open-at-point
    ";" 'org-ctrl-c-ctrl-c)
#+END_SRC
* dired
#+BEGIN_SRC elisp :noweb no-export
  (use-package dired
    :commands dired
    :hook ((dired-mode . dired-omit-mode)
           (dired-mode . dired-hide-details-mode))
    :config
    (setq dired-dwim-target t)
    (setq dired-recursive-copies 'always)
    (setq dired-recursive-deletes 'always)
    (setq dired-listing-switches "-alhvG --group-directories-first")
    (setq dired-isearch-filenames 'dwim)
    <<dired-kbd>>
    (use-package dired-open
      :ensure t
      :config
      (setq dired-open-extensions
            '(("pdf" . "zathura")
              ("html" . "firefox")
              ("mp4" . "mpv")
              ("png" . "feh")
              ("jpg" . "feh")))))
#+END_SRC

#+BEGIN_SRC elisp :tangle no
  (use-package all-the-icons-dired
    :after dired
    :hook (dired-mode . all-the-icons-dired-mode))
#+END_SRC

Keybindings
#+NAME: dired-kbd
#+BEGIN_SRC elisp :tangle no
  (general-def dired-mode-map
    "g" nil)
  (general-def 'normal dired-mode-map
    "/" 'dired-goto-file
    "+" 'dired-create-directory
    "c" 'dired-do-rename
    "d" 'dired-flag-file-deletion
    "e" 'ediff
    "f" 'dired-mark
    "h" 'dired-up-directory
    "i" 'dired-toggle-read-only
    "j" 'dired-next-line
    "k" 'dired-previous-line
    "l" 'dired-open-file
    "m" nil
    "m ." 'dired-mark-extension
    "m d" 'dired-mark-directories
    "m r" 'dired-mark-files-containing-regexp
    "m t" 'dired-toggle-marks
    "m k" 'dired-do-kill-lines
    "n" 'dired-narrow-regexp
    "p" 'dired-do-copy
    "q" 'quit-window
    "r" 'revert-buffer
    "s" 'dired-sort-toggle-or-edit
    "t" 'terminal-here-launch
    "u" 'dired-unmark
    "U" 'dired-unmark-all-marks
    "v o" 'dired-omit-mode
    "v d" 'dired-hide-details-mode
    "v i" 'all-the-icons-dired-mode
    "x" 'dired-do-flagged-delete
    "z" 'dired-do-compress)
#+END_SRC

* packages
** alert
   #+BEGIN_SRC elisp
     (use-package alert
       :commands alert
       :ensure t
       :config
       (setq alert-default-style 'libnotify))
   #+END_SRC

** avy
#+BEGIN_SRC elisp
  (use-package avy
    :ensure t)
#+END_SRC

** company
   #+BEGIN_SRC elisp
     (use-package company
       :ensure t
       :hook (prog-mode . company-mode)
       :config
       (setq company-minimum-prefix-length 2)
       (setq company-idle-delay 0)
       (use-package company-posframe
         :ensure t
         :disabled t
         :config
         (company-posframe-mode 1)))
   #+END_SRC

** docker
   #+BEGIN_SRC elisp
     (use-package dockerfile-mode
       :ensure t
       :mode "Dockerfile\\'")

     (use-package docker-tramp
       :ensure t)
   #+END_SRC

** ediff
   #+BEGIN_SRC elisp
     (use-package ediff
       :defer
       :config
       (setq ediff-split-window-function 'split-window-horizontally)
       (setq ediff-window-setup-function 'ediff-setup-windows-plain))
   #+END_SRC

** eldoc
#+BEGIN_SRC elisp
  (use-package eldoc
    :config
    (setq eldoc-idle-delay 0))
#+END_SRC

** eglot
#+BEGIN_SRC elisp
  (use-package eglot
    :ensure t
    :defer t
    :config
    (add-to-list
     'eglot-server-programs
     '(js-mode . ("typescript-language-server" "--stdio")))
    (major-def eglot-mode-map
      "e" '(nil :wk "eglot")
      "e a" 'eglot-code-actions
      "e c" 'eglot-reconnect
      "e f" 'eglot-format
      "e q" 'eglot-shutdown
      "e r" 'eglot-rename)
    (general-nmap eglot-mode-map
      "K" 'eglot-help-at-point))
#+END_SRC

** emacs-libvterm
#+BEGIN_SRC elisp
  (defun evil-collection-vterm-escape-stay ()
    "Go back to normal state but don't move cursor backwards.
  Moving cursor backwards is the default vim behavior but
  it is not appropriate in some cases like terminals."
    (setq-local evil-move-cursor-back nil))
  (use-package vterm
    :ensure t
    :hook (vterm-mode . evil-collection-vterm-escape-stay))
#+END_SRC

** exec-path-from-shell
   #+BEGIN_SRC elisp
     (use-package exec-path-from-shell
       :ensure t
       :defer 1
       :config
       (setq exec-path-from-shell-check-startup-files nil)
       (exec-path-from-shell-copy-env "SSH_AGENT_PID")
       (exec-path-from-shell-copy-env "SSH_AUTH_SOCK"))
   #+END_SRC

** fcitx
#+BEGIN_SRC elisp
  (use-package fcitx
    :if (executable-find "fcitx5-remote")
    :ensure t
    :defer 2
    :config
    (setq fcitx-remote-command "fcitx5-remote")
    (fcitx-aggressive-setup))
#+END_SRC

** find-file-in-project
   #+BEGIN_SRC elisp
     (use-package find-file-in-project
       :ensure t
       :config
       (setq ffip-use-rust-fd t))
   #+END_SRC

** hl-line-mode
   #+BEGIN_SRC elisp
     (use-package hl-line-mode
       :hook (prog-mode dired-mode LaTeX-mode))
   #+END_SRC

** hl-todo
#+BEGIN_SRC elisp
  (use-package hl-todo
    :ensure t
    :hook (prog-mode . hl-todo-mode))
#+END_SRC

** htmlize
   #+BEGIN_SRC elisp
     (use-package htmlize
       :ensure t
       :commands (htmlize htmlize-file htmlize-region htmlize-buffer))
   #+END_SRC

** ibuffer
#+BEGIN_SRC elisp
  (use-package ibuffer
    :hook (ibuffer-mode . ibuffer-vc-set-filter-groups-by-vc-root)
    :config
    (setq
     ibuffer-formats
     '(("    " (name 24 24) " " (mode 24 24) " " filename-and-process)))
    (use-package ibuffer-vc :ensure t))
#+END_SRC

#+BEGIN_SRC elisp
  (general-def 'emacs ibuffer-mode-map
    "M-j" 'ibuffer-forward-filter-group
    "M-k" 'ibuffer-backward-filter-group
    "j" 'ibuffer-forward-line
    "k" 'ibuffer-backward-line)
#+END_SRC

** imenu-list
   #+BEGIN_SRC elisp
     (use-package imenu-list
       :ensure t
       :commands imenu-list)
   #+END_SRC

** info
   #+BEGIN_SRC elisp
     (general-mmap Info-mode-map
       "q" 'quit-window
       "u" 'Info-up
       "b" 'Info-history-back
       "n" 'Info-next
       "p" 'Info-prev
       "<tab>" 'Info-next-reference
       "S-<tab>" 'Info-prev-reference)
   #+END_SRC

** ivy
   #+BEGIN_SRC elisp
     (use-package ivy
       :ensure t
       :config
       (ivy-mode 1)
       (use-package ivy-hydra :ensure t)
       (setq ivy-height 25)
       (setq ivy-use-virtual-buffers t)
       (setq ivy-count-format "(%d/%d) ")
       (setq ivy-re-builders-alist '((t . ivy--regex-plus))))
     (use-package swiper
       :commands swiper
       :ensure t
       :after ivy)
     (use-package counsel
       :ensure t
       :after swiper)
     (use-package all-the-icons-ivy
       :ensure t
       :after (all-the-icons ivy)
       :config
       (all-the-icons-ivy-setup))
     (use-package ivy-posframe
       :ensure t
       :after ivy
       :config
       (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-center)))
       (ivy-posframe-mode))
   #+END_SRC

** ivy-bibtex
#+BEGIN_SRC elisp
  (use-package ivy-bibtex
    :ensure t
    :after ivy
    :config
    (setq bibtex-completion-bibliography '("~/org/refs.bib"))
    (setq bibtex-completion-notes-path "~/notes/literature")
    (setq bibtex-completion-notes-extension ".md")
    (setq bibtex-completion-library-path '("~/org/pdfs"))
    (setq bibtex-completion-display-formats
          '((t . "${author:36} ${title:100} ${year:4} ${=has-pdf=:1}${=has-note=:1} ${=type=:18}")))
    (defun my:ivy-bibtex-open-pdf (file)
      (async-start-process "bibtex-pdf" "xdg-open" nil file))
    (setq bibtex-completion-pdf-open-function 'my:ivy-bibtex-open-pdf)
    (add-to-list 'ivy-re-builders-alist
                 '(ivy-bibtex . ivy--regex-ignore-order)))
#+END_SRC

** lsp
   #+BEGIN_SRC elisp :tangle no
     (use-package lsp-mode
       :ensure t
       :commands lsp
       :config
       (setq lsp-diagnostic-package :flycheck))
     (use-package lsp-ui
       :ensure t
       :commands lsp-ui-mode
       :config
       (setq lsp-ui-sideline-show-diagnostics nil))
     (use-package company-lsp :ensure t :commands company-lsp)
   #+END_SRC

   #+BEGIN_SRC elisp :tangle no
     (general-nmap lsp-ui-imenu-mode-map
       "h" 'lsp-ui-imenu--prev-kind
       "l" 'lsp-ui-imenu--next-kind
       "q" 'quit-window
       "o" 'lsp-ui-imenu--view
       "<return>" 'lsp-ui-imenu--visit)
   #+END_SRC

** magit
   #+BEGIN_SRC elisp
     (use-package magit
       :ensure t
       :hook (git-commit-mode . evil-insert-state)
       :defer 6)
   #+END_SRC

#+BEGIN_SRC elisp
  (use-package magit-delta
    :ensure t
    :after magit
    :config
    (magit-delta-mode))
#+END_SRC

   #+BEGIN_SRC elisp
     (general-define-key
      :definer 'minor-mode
      :states '(motion normal insert emacs)
      :keymaps 'git-commit-mode
      :prefix ";"
      :global-prefix "M-;"
      ";" 'with-editor-finish
      "k" 'with-editor-cancel)
   #+END_SRC

** markdown
#+BEGIN_SRC elisp
  (use-package markdown-mode
    :ensure t
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode)))
#+END_SRC

** olivetti
#+BEGIN_SRC elisp :tangle no
  (use-package olivetti
    :ensure t
    :hook
    ((org-mode . olivetti-mode)
     (dired-mode . olivetti-mode))
    :init
    (setq olivetti-body-width 90))
#+END_SRC

** symbol-overlay
   #+BEGIN_SRC elisp
     (use-package symbol-overlay
       :ensure t
       :commands symbol-overlay-put)
   #+END_SRC

** terminal-here
   #+BEGIN_SRC elisp
     (use-package terminal-here
       :ensure t
       :config
       (setq terminal-here-terminal-command
             '("alacritty")))
   #+END_SRC

** tramp
   #+BEGIN_SRC elisp
     (use-package tramp)
   #+END_SRC

** vc-mode
   #+BEGIN_SRC elisp
     (use-package vc
       :config
       (with-eval-after-load 'tramp
         (setq vc-ignore-dir-regexp
               (format "\\(%s\\)\\|\\(%s\\)"
                       vc-ignore-dir-regexp
                       tramp-file-name-regexp))))
   #+END_SRC

** wgrep
#+BEGIN_SRC elisp
  (use-package wgrep :ensure t)
#+END_SRC

** which-key
   #+BEGIN_SRC elisp
     (use-package which-key
       :ensure t
       :config
       (setq which-key-max-display-columns 3)
       (setq which-key-add-column-padding 2)
       (setq which-key-idle-delay 0)
       (which-key-mode 1))
   #+END_SRC

#+BEGIN_SRC elisp
  (use-package which-key-posframe
    :ensure t
    :disabled t
    :config
    (setq which-key-posframe-border-width 10)
    (set-face-attribute 'which-key-posframe-border nil :background "#f0e9d7")
    (set-face-attribute 'which-key-posframe nil :background "#f0e9d7")
    (which-key-posframe-mode))
#+END_SRC

** winner-mode
   #+BEGIN_SRC elisp
     (use-package winner
       :hook
       (after-init . winner-mode)
       (ediff-quit . winner-undo))
   #+END_SRC

** xref
   #+BEGIN_SRC elisp
     (general-nmap xref--xref-buffer-mode-map
       "j" 'xref-next-line
       "k" 'xref-prev-line
       "q" 'quit-window
       "o" 'xref-show-location-at-point
       "<return>" 'xref-goto-xref)
   #+END_SRC

** yasnippet
#+BEGIN_SRC elisp
  (use-package yasnippet
    :ensure t
    :config
    (setq yas-snippet-dirs '("~/.config/emacs/snippets"))
    (yas-global-mode 1))
#+END_SRC

* languages
** prog-mode
   #+BEGIN_SRC elisp
     (use-package prog-mode
       :hook (prog-mode . my:show-trailing-space))
   #+END_SRC

** tree-sitter
#+BEGIN_SRC elisp
  (use-package tree-sitter
    :ensure t)
#+END_SRC

#+BEGIN_SRC elisp
  (use-package tree-sitter-langs
    :ensure t)
#+END_SRC

** Coq
   #+BEGIN_SRC elisp
     (use-package proof-general
       :ensure t
       :config
       (setq proof-splash-enable nil))
     (use-package company-coq
       :ensure t
       :after proof-site
       :hook (coq-mode . company-coq-mode)
       :config
       (setq company-coq-disabled-features '(smart-subscripts))
       (company-coq--init-refman-ltac-abbrevs-cache)
       (company-coq--init-refman-scope-abbrevs-cache)
       (company-coq--init-refman-tactic-abbrevs-cache)
       (company-coq--init-refman-vernac-abbrevs-cache)
       (defun my:company-coq-doc-search ()
         "Search identifier in coq refman"
         (interactive)
         (ivy-read
          "doc: "
          (append company-coq--refman-tactic-abbrevs-cache
                  company-coq--refman-vernac-abbrevs-cache
                  company-coq--refman-scope-abbrevs-cache
                  company-coq--refman-ltac-abbrevs-cache)
          :preselect (ivy-thing-at-point)
          :action 'company-coq-doc-buffer-refman)))
   #+END_SRC

   Keybindings
   #+BEGIN_SRC elisp
     (general-def 'normal coq-mode-map
       "K" 'my:company-coq-doc-search)
     (major-def coq-mode-map
       "g" '(company-coq-proof-goto-point :wk "goto")
       "d" '(company-coq-doc :wk "doc")
       "q" '(proof-shell-exit :wk "exit")
       "c" '(proof-interrupt-process :wk "abort")
       "p" '(proof-prf :wk "goal")
       "u" 'proof-undo-last-successful-command
       "s" 'proof-find-theorems
       "l" 'proof-layout-windows)
   #+END_SRC

** CSV
   #+BEGIN_SRC elisp
     (use-package csv-mode
       :ensure t
       :mode ("\\.[Cc][Ss][Vv]\\'" . csv-mode))
   #+END_SRC

** Haskell
#+BEGIN_SRC elisp
  (use-package haskell-mode
    :ensure t)
#+END_SRC

#+BEGIN_SRC elisp :tangle no
  (use-package dante
    :ensure t
    :after haskell-mode
    :commands 'dante-mode
    :hook (haskell-mode . dante-mode)
    :init
    (setq dante-tap-type-time 0))
  (major-def dante-mode-map
    "r" 'dante-restart
    "i" 'dante-info
    "t" 'dante-type-at
    ";" 'dante-eval-block)
#+END_SRC

** Lua
#+BEGIN_SRC elisp
  (use-package lua-mode
    :ensure t)
#+END_SRC

** Agda
   #+BEGIN_SRC elisp
     (eval-and-compile
       (defun agda-mode-load-path ()
         (file-name-directory (shell-command-to-string "agda-mode locate"))))
     (use-package agda2
       :load-path (lambda () (agda-mode-load-path))
       :mode ("\\.agda\\'" . agda2-mode))
   #+END_SRC

#+BEGIN_SRC elisp
  (major-def agda2-mode-map
    "d" 'agda2-goto-definition-keyboard
    "l" 'agda2-load
    "a" 'agda2-autoOne
    "h" 'agda2-helper-function-type
    "," 'agda2-goal-and-context
    "." 'agda2-goal-and-context-and-inferred
    "r" 'agda2-refine
    "n" 'agda2-compute-normalised
    "c" 'agda2-make-case
    "q" 'agda2-quit)
#+END_SRC

** Ocaml
   #+BEGIN_SRC elisp
     (eval-and-compile
       (defun merlin-mode-load-path ()
         (expand-file-name
          "share/emacs/site-lisp"
          (file-name-directory
           (shell-command-to-string "opam config var share")))))
     (use-package merlin
       :load-path (lambda () (merlin-mode-load-path))
       :hook
       (tuareg-mode . merlin-mode))
   #+END_SRC

   #+BEGIN_SRC elisp
     (use-package tuareg
       :ensure t
       :defer t)
   #+END_SRC

** SML
   #+BEGIN_SRC elisp
     (use-package sml-mode
       :ensure t
       :defer t)
   #+END_SRC

** Cubicaltt
   #+BEGIN_SRC elisp
     (use-package cubicaltt
       :load-path "~/cubicaltt"
       :mode ("\\.ctt$" . cubicaltt-mode))
   #+END_SRC

** TeX
#+BEGIN_SRC elisp
  (use-package tex
    :ensure auctex
    :defer t
    :hook
    ((LaTeX-mode . my:show-trailing-space)
     (LaTeX-mode . TeX-source-correlate-mode)
     (LaTeX-mode . TeX-PDF-mode))
    :config
    (setq font-latex-fontify-script nil)
    (setq TeX-view-program-selection '((output-pdf "Zathura"))))
#+END_SRC

** YAML
   #+BEGIN_SRC elisp
     (use-package yaml-mode
       :ensure t)
   #+END_SRC

