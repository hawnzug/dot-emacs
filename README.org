#+PROPERTY: header-args:elisp :tangle config.el :results output silent
# -*- org-babel-use-quick-and-dirty-noweb-expansion: t; -*-
* Contents
:PROPERTIES:
:TOC:      :include all
:END:

:CONTENTS:
- [[#contents][Contents]]
- [[#early-init][early init]]
- [[#init][init]]
- [[#use-package][use-package]]
- [[#native-compilation][native compilation]]
- [[#help-functions][help functions]]
- [[#theme][theme]]
- [[#mode-line][mode line]]
  - [[#moody][moody]]
- [[#generalel][general.el]]
- [[#evil][evil]]
  - [[#evil-surround][evil-surround]]
  - [[#evil-matchit][evil-matchit]]
- [[#completion][completion]]
  - [[#vertico][vertico]]
  - [[#orderless][orderless]]
  - [[#marginalia][marginalia]]
  - [[#consult][consult]]
  - [[#embark][embark]]
- [[#org][org]]
- [[#dired][dired]]
- [[#packages][packages]]
  - [[#alert][alert]]
  - [[#async][async]]
  - [[#avy][avy]]
  - [[#bibtex][bibtex]]
  - [[#bookmark][bookmark]]
  - [[#burly][burly]]
  - [[#comint][comint]]
  - [[#company][company]]
  - [[#docker][docker]]
  - [[#ediff][ediff]]
  - [[#eldoc][eldoc]]
  - [[#eglot][eglot]]
  - [[#vterm][vterm]]
  - [[#exec-path-from-shell][exec-path-from-shell]]
  - [[#fcitx][fcitx]]
  - [[#find-file-in-project][find-file-in-project]]
  - [[#flymake][flymake]]
  - [[#projectel][project.el]]
  - [[#help-mode][help-mode]]
  - [[#hl-todo][hl-todo]]
  - [[#htmlize][htmlize]]
  - [[#ibuffer][ibuffer]]
  - [[#imenu-list][imenu-list]]
  - [[#info][info]]
  - [[#magit][magit]]
  - [[#markdown][markdown]]
  - [[#newcomment][newcomment]]
  - [[#recentf][recentf]]
  - [[#snippets][snippets]]
  - [[#strokes][strokes]]
  - [[#symbol-overlay][symbol-overlay]]
  - [[#terminal-here][terminal-here]]
  - [[#tramp][tramp]]
  - [[#vc-mode][vc-mode]]
  - [[#wgrep][wgrep]]
  - [[#which-key][which-key]]
  - [[#winner-mode][winner-mode]]
  - [[#xref][xref]]
- [[#languages][languages]]
  - [[#cc-mode][cc-mode]]
  - [[#tree-sitter][tree-sitter]]
  - [[#coq][Coq]]
  - [[#csv][CSV]]
  - [[#haskell][Haskell]]
  - [[#html][HTML]]
  - [[#lua][Lua]]
  - [[#agda][Agda]]
  - [[#ocaml][Ocaml]]
  - [[#sml][SML]]
  - [[#prolog][Prolog]]
  - [[#python][Python]]
  - [[#cubicaltt][Cubicaltt]]
  - [[#shell][Shell]]
  - [[#tex][TeX]]
  - [[#yaml][YAML]]
:END:
* early init
Allow large garbage collection threshold when init.
#+BEGIN_SRC elisp :tangle early-init.el
  (setq gc-cons-threshold 64000000)
  (add-hook 'after-init-hook #'(lambda () (setq gc-cons-threshold 800000)))
  (setq package-enable-at-startup nil)
#+END_SRC

Disable useless UIs.
#+BEGIN_SRC elisp :tangle early-init.el
  (scroll-bar-mode -1)
  (horizontal-scroll-bar-mode -1)
  (tool-bar-mode -1)
  (tooltip-mode -1)
  (menu-bar-mode -1)
#+END_SRC

* init
Font setup.
#+BEGIN_SRC elisp
  (defun my:font-setup ()
    (let ( ;; (primary-font "Iosevka Curly Slab 16")
          (primary-font "Rec Mono Duotone 14"))
      (set-fontset-font t 'unicode "Iosevka Curly Slab")
      (set-fontset-font t 'unicode "Noto Color Emoji" nil 'append)
      (set-fontset-font t 'unicode "DejaVu Sans" nil 'append)

      (set-fontset-font t 'han "Iosevka Curly Slab")
      (set-fontset-font t 'han "HYZiKuTangSongKeBenLiKai" nil 'append)
      (set-fontset-font t 'han "FZNewShuSong-Z10S" nil 'append)
      (set-fontset-font t 'han "Source Han Sans CN 14" nil 'append)
      (set-fontset-font t 'cjk-misc "Iosevka Curly Slab")
      (set-fontset-font t 'cjk-misc "HYZiKuTangSongKeBenLiKai" nil 'append)
      (set-fontset-font t 'cjk-misc "FZNewShuSong-Z10S" nil 'append)
      (set-fontset-font t 'cjk-misc "Source Han Sans CN 14" nil 'append)
      (set-fontset-font t 'chinese-gbk "Iosevka Curly Slab")
      (set-fontset-font t 'chinese-gbk "HYZiKuTangSongKeBenLiKai" nil 'append)
      (set-fontset-font t 'chinese-gbk "FZNewShuSong-Z10S" nil 'append)
      (set-fontset-font t 'chinese-gbk "Source Han Sans CN 14" nil 'append)
      (set-face-font 'default primary-font)
      (set-face-font 'fixed-pitch primary-font)
      (set-face-font 'fixed-pitch-serif primary-font)
      (set-face-font 'variable-pitch "Recursive Sans Casual Static 14")))
  (defun my:font-setup-hook (frame)
    "Setup the font, then remove the hook."
    (select-frame frame)
    (my:font-setup)
    (remove-hook 'after-make-frame-functions 'my:font-setup-hook))
  (setq use-default-font-for-symbols nil)
  (setq inhibit-compacting-font-caches t)
  (add-hook 'after-make-frame-functions 'my:font-setup-hook nil)
  (my:font-setup)
#+END_SRC

Ligature
#+BEGIN_SRC elisp
  (let ((ligatures `((?-  . ,(regexp-opt '("->" "->>" "-->")))
                     (?*  . ,(regexp-opt '("*>")))
                     (?<  . ,(regexp-opt '("<-" "<<-" "<=>" "<|" "<||" "<|||::=" "<|>" "<:" "<>" "<-<"
                                           "<<<" "<==" "<<=" "<=<" "<==>" "<-|" "<<" "<~>" "<=|" "<~~" "<~"
                                           "<$>" "<$" "<+>" "<+" "</>" "</" "<*" "<*>" "<->" "<!--")))
                     (?:  . ,(regexp-opt '(":>" ":<" ":::" "::" ":?" ":?>" ":=")))
                     (?=  . ,(regexp-opt '("==>" "=>" "===" "=:=" "==")))
                     (?!  . ,(regexp-opt '("!==" "!!" "!=")))
                     (?|  . ,(regexp-opt '("|||>" "||>" "|>" "|=>")))
                     (?+  . ,(regexp-opt '("+++" "++")))
                     (?~  . ,(regexp-opt '("~~>" "~>"))))))
    (dolist (char-regexp ligatures)
      (set-char-table-range composition-function-table (car char-regexp)
                            `([,(cdr char-regexp) 0 font-shape-gstring]))))
#+END_SRC

Quiet startup
#+BEGIN_SRC elisp
  (setq inhibit-startup-screen t)
  (setq inhibit-startup-message t)
  (setq inhibit-startup-echo-area-message t)
  (setq initial-scratch-message nil)
  (setq initial-major-mode 'fundamental-mode)
#+END_SRC

Show paren pair.
#+BEGIN_SRC elisp
  (show-paren-mode 1)
#+END_SRC

Blink!
#+BEGIN_SRC elisp
  (blink-cursor-mode)
#+END_SRC

Automatically close parenthesis/brackets/...
#+BEGIN_SRC elisp
  (electric-pair-mode 1)
#+END_SRC

Disable backup.
#+BEGIN_SRC elisp
  (setq make-backup-files nil)
#+END_SRC

Auto save after 1 second idle.
#+BEGIN_SRC elisp
  (setq auto-save-default nil)
  (setq auto-save-visited-interval 1)
  (auto-save-visited-mode)
#+END_SRC

Trash instead of delete.
#+BEGIN_SRC elisp
  (setq trash-directory "~/Trash")
  (setq delete-by-moving-to-trash t)
  (defun system-move-file-to-trash (filename)
    (shell-command (concat "trash " (shell-quote-argument filename))))
#+END_SRC

Tab.
#+BEGIN_SRC elisp
  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 4)
#+END_SRC

No wrap line.
#+BEGIN_SRC elisp
  (setq-default truncate-lines t)
#+END_SRC

Better word wrap for CJK
#+BEGIN_SRC elisp
  (setq word-wrap-by-category t)
  (load "kinsoku.el")
#+END_SRC

Split window threshold (Split window vertically by default)
#+BEGIN_SRC elisp
  (setq split-width-threshold 100)
#+END_SRC

80 characters one line.
#+BEGIN_SRC elisp
  (setq-default fill-column 80)
  (setq sentence-end-double-space nil)
#+END_SRC

Use straight single quote in help and messages.
#+BEGIN_SRC elisp
  (setq text-quoting-style 'straight)
#+END_SRC

y or n.
#+BEGIN_SRC elisp
  (defalias 'yes-or-no-p 'y-or-n-p)
  (setq kill-buffer-query-functions nil)
#+END_SRC

Window divider on right.
#+BEGIN_SRC elisp
  (setq window-divider-default-right-width 1)
  (setq window-divider-default-bottom-width 1)
  (setq window-divider-default-places t)
  (window-divider-mode t)
#+END_SRC

Avoid crash when open image in Emacs.
#+BEGIN_SRC elisp
  (setenv "MAGICK_OCL_DEVICE" "OFF")
#+END_SRC

#+BEGIN_SRC elisp
  (setq password-cache-expiry 1200)
#+END_SRC

Always select the help window.
#+BEGIN_SRC elisp
  (setq help-window-select t)
#+END_SRC

For lsp mode
#+BEGIN_SRC elisp
  (setq read-process-output-max (* 1024 1024))
#+END_SRC

* use-package
#+BEGIN_SRC elisp
  (setq package-user-dir "~/.config/emacs/elpa")
  (let ((default-directory package-user-dir))
    (normal-top-level-add-subdirs-to-load-path))
  (require 'use-package)
#+END_SRC

#+BEGIN_SRC elisp
  (with-eval-after-load 'info
    (info-initialize)
    (dolist (dir (directory-files package-user-dir))
      (let ((fdir (concat (file-name-as-directory package-user-dir) dir)))
        (unless (or (member dir '("." ".." "archives" "gnupg"))
                    (not (file-directory-p fdir))
                    (not (file-exists-p (concat (file-name-as-directory fdir) "dir"))))
          (add-to-list 'Info-directory-list fdir)))))
#+END_SRC

#+BEGIN_SRC elisp
  (with-eval-after-load 'package
    (add-to-list 'package-archives '("ublt" . "https://elpa.ubolonton.org/packages/")) ;; tree-sitter
    (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t))
#+END_SRC

* native compilation
#+BEGIN_SRC elisp
  (use-package comp
    :config
    (setq native-comp-async-report-warnings-errors 'silent)
    (setq comp-deferred-compilation-deny-list '("bibtex-actions.el")))
#+END_SRC

* help functions
#+BEGIN_SRC elisp
  (defun my:show-trailing-space ()
    (setq show-trailing-whitespace t))
  (add-hook 'prog-mode-hook #'my:show-trailing-space)
#+END_SRC

#+BEGIN_SRC elisp
  (defun my:other-window-or-buffer ()
    "Switch to other window or buffer"
    (interactive)
    (if (one-window-p) (switch-to-buffer (other-buffer)) (select-window (next-window))))

  (defun my:syntax-color-hex ()
    (interactive)
    (font-lock-add-keywords
     nil
     '(("#[[:xdigit:]]\\{6\\}"
        (0 (put-text-property
            (match-beginning 0)
            (match-end 0)
            'face (list :background (match-string-no-properties 0)))))))
    (font-lock-flush))

  (defun my:toggle-line-number ()
    "Toggle line number between relative and nil."
    (interactive)
    (setq display-line-numbers
          (pcase display-line-numbers
            ('relative nil)
            (_ 'relative))))
#+END_SRC

#+BEGIN_SRC elisp
  (defun my:toggle-transparency ()
    (interactive)
    (let ((transparency 90)
          (opacity 100)
          (old-alpha (frame-parameter nil 'alpha-background)))
      (if (and (numberp old-alpha) (< old-alpha opacity))
          (set-frame-parameter nil 'alpha-background opacity)
        (set-frame-parameter nil 'alpha-background transparency))))
#+END_SRC

* theme
#+BEGIN_SRC elisp
  (load-theme 'fourma t)
#+END_SRC

#+BEGIN_SRC elisp :tangle no
  (use-package modus-themes
    :ensure t
    :init
    (setq modus-themes-italic-constructs t)
    (setq modus-themes-syntax '(yellow-comments green-strings))
    (setq modus-themes-region '(bg-only no-extend))
    (setq modus-themes-org-blocks 'gray-background)
    (setq modus-themes-headings
          '((t . (monochrome overline background))))
    (setq modus-themes-mode-line '(accented))
    :config
    (modus-themes-load-operandi))
#+END_SRC

#+BEGIN_SRC elisp :tangle no
  (use-package lab-themes
    :ensure t
    :config
    (lab-themes-load-style 'light))
#+END_SRC

#+BEGIN_SRC elisp :tangle no
  (use-package flucui-themes
    :ensure t
    :config
    (flucui-themes-load-style 'light))
#+END_SRC

* mode line
#+BEGIN_SRC elisp
  (use-package hide-mode-line
    :ensure t
    :config
    (setq hide-mode-line-excluded-modes nil)
    (global-hide-mode-line-mode))
#+END_SRC

** moody
#+BEGIN_SRC elisp :tangle no
  (use-package moody
    :ensure t
    :config
    (setq x-underline-at-descent-line t)
    (moody-replace-mode-line-buffer-identification)
    (moody-replace-vc-mode))
#+END_SRC

* general.el
#+BEGIN_SRC elisp
  (use-package general :ensure t)
#+END_SRC

Use comma as the global leader key.
#+BEGIN_SRC elisp
  (general-create-definer my:global-def
    :states '(motion normal)
    :prefix "x")
  (my:global-def "" nil)
#+END_SRC

#+BEGIN_SRC elisp
  (my:global-def
    "f" 'find-file
    "o" 'other-window)
#+END_SRC

Use semicolon as the major mode leader key.
#+BEGIN_SRC elisp
  (general-create-definer my:major-def
    :states '(motion normal insert emacs)
    :prefix "m"
    :global-prefix "M-m")
#+END_SRC

#+BEGIN_SRC elisp
  (general-def 'override
    "C-=" 'text-scale-adjust
    "C--" 'text-scale-adjust)
#+END_SRC

* evil
#+BEGIN_SRC elisp
  (use-package evil
    :ensure t
    :init
    (setq evil-want-keybinding nil)
    (setq evil-want-abbrev-expand-on-insert-exit nil)
    (setq evil-disable-insert-state-bindings t)
    (setq evil-respect-visual-line-mode t)
    :config
    (evil-mode 1)
    (evil-set-initial-state 'org-capture-mode 'insert)
    (evil-set-initial-state 'vterm-mode 'insert)
    (evil-set-initial-state 'wdired-mode 'normal))
#+END_SRC

#+BEGIN_SRC elisp
  (general-def 'normal
    "C-." nil
    "m" nil
    "X" nil
    "r" nil
    "s" nil
    "S" nil
    "u" 'undo-only
    "U" 'undo
    "C-r" 'undo-redo)
#+END_SRC

** evil-surround
#+BEGIN_SRC elisp
  (use-package evil-surround
    :ensure t
    :after evil
    :config
    (setq-default
     evil-surround-pairs-alist
     (push '(?c . ("{" . "}")) evil-surround-pairs-alist))
    (general-def 'normal evil-surround-mode-map
      "s" 'evil-surround-region
      "S" 'evil-Surround-region)
    (general-def 'visual evil-surround-mode-map
      "s" 'evil-surround-region
      "S" 'evil-Surround-region)
    (global-evil-surround-mode 1))
#+END_SRC

** evil-matchit
#+BEGIN_SRC elisp
  (use-package evil-matchit
    :ensure t
    :after evil
    :config
    (global-evil-matchit-mode 1))
#+END_SRC

** evil-motion-trainer
#+BEGIN_SRC elisp
  (use-package evil-motion-trainer
    :load-path "~/.config/emacs/packages/evil-motion-trainer"
    :after evil
    :config
    (global-evil-motion-trainer-mode 1))
#+END_SRC

** evil inherit input method in minibuffer
#+BEGIN_SRC elisp :tangle no
  (defun my:inherit-input-method ()
    "Inherit input method from evil"
    (let (input-method-activate-hook
          input-method-deactivate-hook)
      (when-let ((im (with-minibuffer-selected-window evil-input-method)))
        (activate-input-method im))))

  (add-hook 'minibuffer-setup-hook #'my:inherit-input-method)
#+END_SRC

* completion
** vertico
#+BEGIN_SRC elisp
  (use-package vertico
    :ensure t
    :config
    (vertico-mode))
#+END_SRC

** orderless
#+BEGIN_SRC elisp
  (use-package orderless
    :ensure t
    :init
    ;; (defun my:orderless-in-minibuffer ()
    ;;   (setq-local completion-styles '(orderless)))
    ;; (add-hook 'minibuffer-setup-hook
    ;;           'my:orderless-in-minibuffer)
    (setq completion-styles '(orderless basic))
    (setq completion-category-defaults nil)
    (setq completion-category-overrides
          '((file (styles . (partial-completion))))))
#+END_SRC

** corfu
#+BEGIN_SRC elisp
  (use-package corfu
    :ensure t
    :config
    (setq corfu-auto t)
    (global-corfu-mode))
#+END_SRC

#+BEGIN_SRC elisp
  (use-package emacs
    :init
    (setq completion-cycle-threshold 3)
    (setq read-extended-command-predicate
          #'command-completion-default-include-p)
    (setq tab-always-indent 'complete))
#+END_SRC

** cape

#+BEGIN_SRC elisp
  (use-package cape
    :ensure t
    :init
    (add-to-list 'completion-at-point-functions #'cape-dabbrev))
#+END_SRC

** marginalia
#+BEGIN_SRC elisp
  (use-package marginalia
    :ensure t
    :config
    (marginalia-mode))
#+END_SRC

** consult
#+BEGIN_SRC elisp
  (use-package consult
    :ensure t
    :general
    (my:global-def
      "b" 'consult-buffer
      "s" 'consult-line
      "r" 'consult-ripgrep
      "h" 'consult-outline))
  (use-package consult-xref
    :after (xref consult)
    :config
    (setq xref-show-xrefs-function #'consult-xref))
  (use-package consult-org
    :after org
    :general
    (my:global-def org-mode-map
      "h" 'consult-org-heading))
  (use-package consult-imenu
    :general
    (my:global-def
      "i" 'consult-imenu))
  (use-package consult-flymake
    :after flymake
    :commands (consult-flymake))
  (use-package consult-register
    :commands (consult-register
               consult-register-load
               consult-register-store))
#+END_SRC

** embark
#+BEGIN_SRC elisp
  (use-package embark
    :ensure t
    :general
    (:keymaps 'override
     "M-o" 'embark-act))
#+END_SRC

#+BEGIN_SRC elisp
  (use-package embark-consult
    :ensure t
    :after embark)
#+END_SRC

* org
#+BEGIN_SRC elisp
  (use-package org
    :defer 4
    :mode ("\\.org\\'" . org-mode)
    :hook
    (org-mode . variable-pitch-mode)
    (org-mode . my:show-trailing-space)
    (org-babel-after-execute . org-redisplay-inline-images)
    :general
    (my:global-def "a" 'org-agenda)
    :config
    (use-package org-mouse)
    (use-package ob-shell)
    (add-to-list 'org-file-apps '(t . "xdg-open %s") t)
    (setq org-refile-targets
          '(("~/org/readings.org" . (:maxlevel . 2))))
    (setq org-refile-use-outline-path nil)
    (setq org-reverse-note-order t)
    (setq org-adapt-indentation nil)
    (setq org-startup-indented t)
    (setq org-startup-truncated t)
    (setq org-hide-emphasis-markers t)
    (setq org-format-latex-options (plist-put org-format-latex-options :scale 1.4))
    (setq org-latex-pdf-process '("latexmk -f -pdf -outdir=%o %f"))
    (setq org-footnote-section nil))
#+END_SRC

#+BEGIN_SRC elisp
  (defun my:org-export-all ()
    "https://emacs.stackexchange.com/a/2260/21752
  Export all subtrees that are *not* tagged with :noexport: to
  separate files.

  Note that subtrees must have the :EXPORT_FILE_NAME: property set
  to a unique value for this to work properly."
    (interactive)
    (let ((org-html-doctype "html5")
          (org-html-html5-fancy t)
          (org-html-postamble nil)
          (org-html-head-include-default-style nil)
          ;; (org-html-mathjax-template "")
          (org-preview-latex-image-directory "~/org/build/images/"))
      (save-excursion
        (org-map-entries
         (lambda ()
           (org-set-property
            "EXPORT_FILE_NAME"
            (concat "build/" (org-id-get-create)))
           (org-html-export-to-html nil t))
         "-noexport"
         'file))))

  (defun my:org-export-html-hook (backend)
    "Resolve all id links to html files"
    (goto-char (point-min))
    (while (eq t (org-next-link))
      (let ((link (org-element-context (org-element-at-point))))
        (when (string= (org-element-property :type link) "id")
          (let ((id (org-element-property :path link))
                (beg (org-element-property :begin link))
                (end (org-element-property :contents-begin link)))
            (delete-region (1+ beg) (1- end))
            (goto-char (1+ beg))
            (insert "[file:" id ".html]"))))))

  (add-hook 'org-export-before-parsing-hook #'my:org-export-html-hook)
#+END_SRC

org-id
#+BEGIN_SRC elisp
  (use-package org-id
    :after org
    :config
    (setq org-id-link-to-org-use-id 'create-if-interactive))
#+END_SRC

org-checklist
#+BEGIN_SRC elisp
  (use-package org-checklist
    :after org)
#+END_SRC

org-maketoc
#+BEGIN_SRC elisp
  (use-package org-make-toc
    :ensure t
    :commands (org-make-toc))
#+END_SRC

#+BEGIN_SRC elisp
  (use-package org-superstar
    :ensure t
    :hook (org-mode . org-superstar-mode)
    :config
    (setq org-superstar-headline-bullets-list '("•")))
#+END_SRC

keybindings
#+BEGIN_SRC elisp
  (general-def 'normal org-mode-map
    "gh" 'outline-up-heading
    "gj" 'org-forward-heading-same-level
    "gk" 'org-backward-heading-same-level
    "gl" 'outline-next-visible-heading
    "<tab>" 'org-cycle
    "<" 'org-metaleft
    ">" 'org-metaright
    "t" 'org-todo)
  (general-def org-mode-map
    "M-h" 'org-metaleft
    "M-j" 'org-metadown
    "M-k" 'org-metaup
    "M-l" 'org-metaright
    "M-H" 'org-shiftmetaleft
    "M-J" 'org-shiftmetadown
    "M-K" 'org-shiftmetaup
    "M-L" 'org-shiftmetaright)
#+END_SRC

#+BEGIN_SRC elisp
  (my:major-def org-mode-map
    "e" 'org-edit-special
    "v t" 'org-babel-tangle
    "v j" 'org-babel-next-src-block
    "v k" 'org-babel-previous-src-block
    "t i" 'org-toggle-inline-images
    "t l" 'org-toggle-latex-fragment
    "l s" 'org-store-link
    "l i" 'org-insert-last-stored-link
    "o" 'org-open-at-point
    "m" 'org-ctrl-c-ctrl-c)
#+END_SRC

#+BEGIN_SRC elisp
  (general-define-key
   :definer 'minor-mode
   :states '(motion normal insert emacs)
   :keymaps 'org-src-mode
   :prefix "m"
   :global-prefix "M-m"
   "m" 'org-edit-src-exit
   "k" 'org-edit-src-abort)
#+END_SRC

* dired
#+BEGIN_SRC elisp
  (use-package dired
    :commands dired
    :hook ((dired-mode . dired-omit-mode)
           (dired-mode . dired-hide-details-mode))
    :config
    (setq dired-dwim-target t)
    (setq dired-recursive-copies 'always)
    (setq dired-recursive-deletes 'always)
    (setq dired-listing-switches "-alhvG --group-directories-first")
    (setq dired-isearch-filenames 'dwim)
    :general
    ('normal dired-mode-map
      "/" 'dired-goto-file
      "+" 'dired-create-directory
      "c" 'dired-do-copy
      "d" 'dired-flag-file-deletion
      "D" 'dired-do-flagged-delete
      "e" 'ediff
      "f" 'dired-mark
      "g" 'revert-buffer
      "h" 'dired-up-directory
      "i" 'dired-toggle-read-only
      "j" 'dired-next-line
      "k" 'dired-previous-line
      "l" 'dired-find-file
      "n" 'dired-narrow-regexp
      "q" 'quit-window
      "r" 'dired-do-rename
      "s" 'dired-sort-toggle-or-edit
      "u" 'dired-unmark
      "U" 'dired-unmark-all-marks
      "z" 'dired-do-compress
      "m" nil
      "m ." 'dired-mark-extension
      "m d" 'dired-mark-directories
      "m r" 'dired-mark-files-containing-regexp
      "m t" 'dired-toggle-marks
      "m k" 'dired-do-kill-lines
      "v" nil
      "v o" 'dired-omit-mode
      "v d" 'dired-hide-details-mode
      "v i" 'all-the-icons-dired-mode))
#+END_SRC

** dirvish
#+BEGIN_SRC elisp
  (use-package dirvish
    :ensure t)
#+END_SRC

* packages
** alert
#+BEGIN_SRC elisp
  (use-package alert
    :commands alert
    :ensure t
    :config
    (setq alert-default-style 'libnotify))
#+END_SRC

** async
#+BEGIN_SRC elisp
  (use-package async
    :ensure t
    :defer t)
#+END_SRC

** avy
#+BEGIN_SRC elisp
  (use-package avy
    :ensure t
    :general
    ('motion
     "r" 'avy-goto-char-timer)
    :config
    (setq avy-timeout-seconds 0.3))
#+END_SRC

** bibtex
#+BEGIN_SRC elisp
  (use-package bibtex-completion
    :ensure t
    :defer t
    :config
    (defun my:bibtex-open-pdf (file)
      (require 'async)
      (async-start-process "bibtex-pdf" "zathura" nil file))
    (setq bibtex-completion-bibliography
          '("~/org/refs.bib"
            "~/org/incomplete.bib"))
    (setq bibtex-completion-notes-path "~/org/readings.org")
    (setq bibtex-completion-pdf-field "file")
    (setq bibtex-completion-notes-template-one-file "\n* ${title}\n:PROPERTIES:\n:Custom_ID: ${=key=}\n:END:\n")
    (setq bibtex-completion-pdf-open-function #'my:bibtex-open-pdf)
    (setq bibtex-completion-library-path '("~/Documents/")))
#+END_SRC

#+BEGIN_SRC elisp
  (use-package consult-bibtex
    :load-path "~/.config/emacs/packages/consult-bibtex"
    :general
    (my:global-def
      "c" 'consult-bibtex)
    :config
    (with-eval-after-load 'embark
      (add-to-list 'embark-keymap-alist
                   '(bibtex-completion . consult-bibtex-embark-map))))
#+END_SRC

#+BEGIN_SRC elisp :tangle no
  (use-package citar
    :ensure t
    :general
    (my:global-def
      "c" 'citar-open)
    :config
    (setq citar-file-open-function #'my:bibtex-open-pdf))
#+END_SRC

** bookmark
#+BEGIN_SRC elisp
  (use-package bookmark
    :general
    (my:global-def
      "m" '(:ignore t :which-key "bookmark")
      "m s" 'bookmark-set
      "m j" 'bookmark-jump)
    :config
    (setq bookmark-fontify nil))
#+END_SRC

** burly
#+BEGIN_SRC elisp :tangle no
  (use-package burly
    :ensure t
    :commands
    (burly-bookmark-windows
     burly-bookmark-handler
     burly-open-bookmark))
#+END_SRC

** comint
#+BEGIN_SRC elisp
  (use-package comint
    :defer t
    :config
    (general-def comint-mode-map
      "M-n" nil
      "M-p" nil
      "M-k" 'comint-previous-input
      "M-j" 'comint-next-input))
#+END_SRC

** company
#+BEGIN_SRC elisp :tangle no
  (use-package company
    :ensure t
    :hook
    ((LaTeX-mode prog-mode) . company-mode)
    :config
    (setq company-minimum-prefix-length 2)
    (setq company-idle-delay 0)
    (use-package company-posframe
      :ensure t
      :config
      (setq company-posframe-font "Iosevka Curly Slab 16")
      (company-posframe-mode 1)))
#+END_SRC

** demo-it
#+BEGIN_SRC elisp
  (use-package demo-it
    :ensure t
    :defer t)
#+END_SRC

** docker
#+BEGIN_SRC elisp
  (use-package dockerfile-mode
    :ensure t
    :mode "Dockerfile\\'")

  (use-package docker-tramp
    :ensure t
    :after tramp)
#+END_SRC

** ediff
#+BEGIN_SRC elisp
  (use-package ediff
    :commands ediff
    :config
    (setq ediff-split-window-function 'split-window-horizontally)
    (setq ediff-window-setup-function 'ediff-setup-windows-plain))
#+END_SRC

** elcord
#+BEGIN_SRC elisp
  (use-package elcord
    :ensure t
    :if (executable-find "discord")
    :commands elcord-mode)
#+END_SRC

** eldoc
#+BEGIN_SRC elisp
  (use-package eldoc
    :defer t
    :config
    (setq eldoc-idle-delay 0.5)
    (setq eldoc-echo-area-use-multiline-p t)
    (setq eldoc-echo-area-display-truncation-message nil)
    (setq eldoc-echo-area-prefer-doc-buffer t))
#+END_SRC

#+BEGIN_SRC elisp
  (use-package eldoc-box
    :ensure t
    :hook
    (eldoc-mode . eldoc-box-hover-at-point-mode)
    :config
    (setq eldoc-box-max-pixel-width 3000)
    (setq eldoc-box-max-pixel-height 2000))
#+END_SRC

** eglot
#+BEGIN_SRC elisp
  (use-package eglot
    :ensure t
    :commands eglot
    :init
    (add-hook 'eglot-managed-mode-hook #'evil-normalize-keymaps)
    :config
    (general-def 'normal eglot-mode-map
      "K" 'eglot-help-at-point)
    (my:global-def eglot-mode-map
      "e r" 'eglot-rename
      "e f" 'eglot-format
      "e a" 'eglot-code-actions))
#+END_SRC

#+BEGIN_SRC elisp
  (use-package consult-eglot
    :ensure t
    :after (consult eglot)
    :general
    (my:global-def eglot-mode-map
      "e s" 'consult-eglot-symbols))
#+END_SRC

** vterm
#+BEGIN_SRC elisp
  (use-package vterm
    :ensure t
    ;; :general
    ;; (my:global-def "v" 'vterm)
    :config
    (defun evil-collection-vterm-escape-stay ()
      "Go back to normal state but don't move cursor backwards.
  Moving cursor backwards is the default vim behavior but
  it is not appropriate in some cases like terminals."
      (setq-local evil-move-cursor-back nil))
    (add-hook 'vterm-mode-hook 'evil-collection-vterm-escape-stay))
#+END_SRC

#+BEGIN_SRC elisp
  (use-package vterm-toggle
    :ensure t
    :general
    (my:global-def "v" 'vterm-toggle)
    :config
    (setq vterm-toggle-scope 'project))
#+END_SRC

** exec-path-from-shell
#+BEGIN_SRC elisp
  (use-package exec-path-from-shell
    :ensure t
    :defer 1
    :config
    (setq exec-path-from-shell-check-startup-files nil)
    (exec-path-from-shell-copy-env "SSH_AGENT_PID")
    (exec-path-from-shell-copy-env "SSH_AUTH_SOCK"))
#+END_SRC

** fcitx
#+BEGIN_SRC elisp
  (use-package fcitx
    :if (executable-find "fcitx5-remote")
    :ensure t
    :defer 2
    :config
    (setq fcitx-remote-command "fcitx5-remote")
    (fcitx-aggressive-setup))
#+END_SRC

** find-file-in-project
#+BEGIN_SRC elisp
  (use-package find-file-in-project
    :ensure t
    :commands (find-file-in-project)
    :config
    (setq ffip-use-rust-fd t))
#+END_SRC

** flymake
#+BEGIN_SRC elisp
  (use-package flymake
    :defer t
    :general
    ('normal flymake-diagnostics-buffer-mode-map
      "q" 'quit-window
      "<tab>" 'forward-button
      "<S-tab>" 'backward-button
      "<return>" 'flymake-goto-diagnostic
      "<space>" 'flymake-show-diagnostic)
    ('normal flymake-mode-map
      "M-j" 'flymake-goto-next-error
      "M-k" 'flymake-goto-next-error))
#+END_SRC

** project.el
#+BEGIN_SRC elisp
  (use-package project
    :defer t
    :general
    (my:global-def
      "p" nil
      "p p" 'project-switch-project
      "p f" 'project-find-file
      "p b" 'project-switch-to-buffer
      "p d" 'project-dired)
    :config
    (defun my:find-project-root (dir)
      "Try to locate a project root."
      (when (locate-dominating-file
             dir
             (lambda (d)
               (seq-some (lambda (name) (file-exists-p (expand-file-name name d)))
                         '(".python-version"))))
        (cons 'transient dir)))
    (add-hook 'project-find-functions 'my:find-project-root nil nil))
#+END_SRC

** help-mode
#+BEGIN_SRC elisp
  (use-package help-mode
    :defer t
    :general
    ('normal help-mode-map
     "q" 'quit-window))
#+END_SRC

** hl-todo
#+BEGIN_SRC elisp
  (use-package hl-todo
    :ensure t
    :hook (prog-mode . hl-todo-mode))
#+END_SRC

** htmlize
#+BEGIN_SRC elisp
  (use-package htmlize
    :ensure t
    :commands (htmlize htmlize-file htmlize-region htmlize-buffer))
#+END_SRC

** ibuffer
#+BEGIN_SRC elisp
  (use-package ibuffer
    :hook (ibuffer-mode . ibuffer-vc-set-filter-groups-by-vc-root)
    :general
    ('emacs ibuffer-mode-map
      "M-j" 'ibuffer-forward-filter-group
      "M-k" 'ibuffer-backward-filter-group
      "j" 'ibuffer-forward-line
      "k" 'ibuffer-backward-line)
    :config
    (setq
     ibuffer-formats
     '(("    " (name 24 24) " " (mode 24 24) " " filename-and-process)))
    (use-package ibuffer-vc :ensure t))
#+END_SRC

** imenu-list
#+BEGIN_SRC elisp
  (use-package imenu-list
    :ensure t
    :commands imenu-list)
#+END_SRC

** info
#+BEGIN_SRC elisp
  (general-def 'motion Info-mode-map
    "q" 'quit-window
    "u" 'Info-up
    "b" 'Info-history-back
    "n" 'Info-next
    "p" 'Info-prev
    "<return>" 'Info-follow-nearest-node
    "<tab>" 'Info-next-reference
    "S-<tab>" 'Info-prev-reference)
#+END_SRC

** magit
#+BEGIN_SRC elisp
  (use-package magit
    :ensure t
    :defer 5
    :general
    (my:global-def "g" 'magit-status)
    :hook (git-commit-mode . evil-insert-state))
#+END_SRC

#+BEGIN_SRC elisp
  (use-package magit-delta
    :ensure t
    :after magit
    :hook (magit-mode . magit-delta-mode)
    :config
    (add-to-list 'magit-delta-delta-args "--max-line-length=2048"))
#+END_SRC

#+BEGIN_SRC elisp
  (general-define-key
   :definer 'minor-mode
   :states '(motion normal insert emacs)
   :keymaps 'git-commit-mode
   :prefix "m"
   :global-prefix "M-m"
   "m" 'with-editor-finish
   "k" 'with-editor-cancel)
#+END_SRC

** markdown
#+BEGIN_SRC elisp
  (use-package markdown-mode
    :ensure t
    :commands (gfm-view-mode markdown-view-mode)
    :general
    ('normal markdown-mode-map
      "<tab>" 'markdown-cycle)
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.mkd\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode)))
#+END_SRC

** newcomment
#+BEGIN_SRC elisp
  (use-package newcomment
    :general
    ('override
     "M-;" nil
     "C-/" 'comment-dwim))
#+END_SRC

** outline
#+BEGIN_SRC elisp
  (use-package outline
    :hook ((LaTeX-mode agda2-mode) . outline-minor-mode))
  (add-hook 'outline-minor-mode-hook #'evil-normalize-keymaps)
  (general-def 'motion outline-minor-mode-map
    "<tab>" 'outline-cycle
    "S-<iso-lefttab>" 'outline-cycle-buffer)
#+END_SRC

** flypy-re
Steal from [[https://github.com/cute-jumper/pinyinlib.el][pinyinlib.el]].

#+BEGIN_SRC elisp
  (use-package flypy-re
    :load-path "~/.config/emacs/packages/flypy-re"
    :config
    ;; orderless
    (with-eval-after-load 'orderless
      (defun completion--regex-pinyin (str)
        (orderless-regexp (flypy-re-build-regexp str)))
      (add-to-list 'orderless-matching-styles 'completion--regex-pinyin))
    ;; avy: overload avy-goto-char-timer
    (with-eval-after-load 'avy
      (defun avy-goto-char-timer (&optional arg)
        "Read one or many consecutive chars and jump to the first one.
  The window scope is determined by `avy-all-windows' (ARG negates it)."
        (interactive "P")
        (let ((avy-all-windows (if arg
                                   (not avy-all-windows)
                                 avy-all-windows)))
          (avy-with avy-goto-char-timer
                    (setq avy--old-cands (avy--read-candidates #'flypy-re-build-regexp))
                    (avy-process avy--old-cands))))))
#+END_SRC

** recentf
#+BEGIN_SRC elisp
  (use-package recentf
    :config
    (recentf-mode))
#+END_SRC

** snippets
#+BEGIN_SRC elisp
  (use-package yasnippet
    :ensure t
    :hook (LaTeX-mode . yas-minor-mode))
#+END_SRC

#+BEGIN_SRC elisp
  (use-package aas
    :ensure t
    :hook (org-mode . aas-activate-for-major-mode)
    :hook (agda2-mode . aas-activate-for-major-mode)
    :config
    (aas-set-snippets 'org-mode
      "bsrc" (lambda () (interactive)
                 (insert "#+BEGIN_SRC elisp\n#+END_SRC")
                 (org-edit-special)))

    (defun my:agda-auto-script-condition ()
      "Condition used for auto-sub/superscript snippets."
      (not (or (bobp) (= (1- (point)) (point-min)) (eq ?\s (char-before)))))
    (aas-set-snippets 'agda2-mode
      :cond #'my:agda-auto-script-condition
      "'" "′"
      "0" "₀"
      "1" "₁"
      "2" "₂"
      "3" "₃"
      "4" "₄"
      "5" "₅"
      "6" "₆"
      "7" "₇"
      "8" "₈"
      "9" "₉"))
#+END_SRC

#+BEGIN_SRC elisp
  (use-package laas
    :ensure t
    :hook (LaTeX-mode . laas-mode)
    :config
    (require 'yasnippet)
    (aas-set-snippets 'laas-mode
      :cond #'texmathp
      "Sum" (lambda () (interactive)
              (yas-expand-snippet "\\sum_{$1}^{$2} $0"))
      "fc/" (lambda () (interactive)
             (yas-expand-snippet "\\frac{$1}{$2}$0"))))
#+END_SRC

#+BEGIN_SRC elisp
#+END_SRC

** strokes
#+BEGIN_SRC elisp
  (use-package strokes
    :commands (strokes-do-stroke))
  (general-def strokes-mode-map
    "<down-mouse-3>" 'strokes-do-stroke)
#+END_SRC

** symbol-overlay
#+BEGIN_SRC elisp
  (use-package symbol-overlay
    :ensure t
    :commands symbol-overlay-put)
#+END_SRC

** terminal-here
#+BEGIN_SRC elisp
  (use-package terminal-here
    :ensure t
    :general
    (my:global-def "t" 'terminal-here-launch)
    :config
    (setq terminal-here-terminal-command
          '("alacritty")))
#+END_SRC

** tramp
#+BEGIN_SRC elisp
  (use-package tramp
    :defer t)
#+END_SRC

** vc-mode
#+BEGIN_SRC elisp
  (use-package vc
    :defer t
    :config
    (with-eval-after-load 'tramp
      (setq vc-ignore-dir-regexp
            (format "\\(%s\\)\\|\\(%s\\)"
                    vc-ignore-dir-regexp
                    tramp-file-name-regexp))))
#+END_SRC

** wgrep
#+BEGIN_SRC elisp
  (use-package wgrep
    :ensure t
    :defer t)
#+END_SRC

** which-key
#+BEGIN_SRC elisp
  (use-package which-key
    :ensure t
    :config
    (setq which-key-add-column-padding 2)
    (setq which-key-idle-delay 0)
    (which-key-mode 1))
#+END_SRC

** winner-mode
#+BEGIN_SRC elisp
  (use-package winner
    :hook
    (after-init . winner-mode)
    (ediff-quit . winner-undo))
#+END_SRC

** xref
#+BEGIN_SRC elisp
  (use-package xref
    :general
    ('normal
     "g d" 'xref-find-definitions
     "g r" 'xref-find-references)
    :config
    (general-def 'normal xref--xref-buffer-mode-map
      "j" 'xref-next-line
      "k" 'xref-prev-line
      "q" 'quit-window
      "o" 'xref-show-location-at-point
      "<return>" 'xref-goto-xref))
#+END_SRC

* languages
** cc-mode
#+BEGIN_SRC elisp
  (use-package cc-mode
    :mode
    (("\\.c\\'" . c-mode)
     ("\\.h\\'" . c-or-c++-mode))
    :config
    (setq c-basic-offset 4))
#+END_SRC

** tree-sitter
#+BEGIN_SRC elisp
  (use-package tree-sitter
    :ensure t
    :hook ((html-mode) . tree-sitter-hl-mode)
    :commands (tree-sitter-hl-mode))
#+END_SRC

#+BEGIN_SRC elisp
  (use-package tree-sitter-langs
    :ensure t
    :after tree-sitter)
#+END_SRC

** Coq
#+BEGIN_SRC elisp
  (use-package proof-general
    :ensure t
    :mode ("\\.v\\'" . coq-mode)
    :config
    (setq proof-splash-enable nil))
  (use-package company-coq
    :ensure t
    :after proof-site
    :hook (coq-mode . company-coq-mode)
    :config
    (setq company-coq-disabled-features '(smart-subscripts))
    (company-coq--init-refman-ltac-abbrevs-cache)
    (company-coq--init-refman-scope-abbrevs-cache)
    (company-coq--init-refman-tactic-abbrevs-cache)
    (company-coq--init-refman-vernac-abbrevs-cache)
    (defun my:company-coq-doc-search ()
      "Search identifier in coq refman"
      (interactive)
      (ivy-read
       "doc: "
       (append company-coq--refman-tactic-abbrevs-cache
               company-coq--refman-vernac-abbrevs-cache
               company-coq--refman-scope-abbrevs-cache
               company-coq--refman-ltac-abbrevs-cache)
       :preselect (ivy-thing-at-point)
       :action 'company-coq-doc-buffer-refman)))
#+END_SRC

Keybindings
#+BEGIN_SRC elisp
  (general-def 'normal coq-mode-map
    "K" 'my:company-coq-doc-search)
  (my:major-def coq-mode-map
    "g" '(company-coq-proof-goto-point :wk "goto")
    "d" '(company-coq-doc :wk "doc")
    "q" '(proof-shell-exit :wk "exit")
    "c" '(proof-interrupt-process :wk "abort")
    "p" '(proof-prf :wk "goal")
    "u" 'proof-undo-last-successful-command
    "s" 'proof-find-theorems
    "l" 'proof-layout-windows)
#+END_SRC

** CSV
#+BEGIN_SRC elisp
  (use-package csv-mode
    :ensure t
    :mode ("\\.[Cc][Ss][Vv]\\'" . csv-mode))
#+END_SRC

** Haskell
#+BEGIN_SRC elisp
  (use-package haskell-mode
    :ensure t
    :mode "\\.hs\\'"
    :config
    (require 'haskell)
    (require 'haskell-doc))
#+END_SRC

** HTML
#+BEGIN_SRC elisp
  (use-package sgml-mode
    :mode ("\\.html\\'" . html-mode)
    :config
    (defun my:html-mode-face-remap ()
      (face-remap-set-base
       'tree-sitter-hl-face:attribute
       :foreground "#AAAAAA")
      (face-remap-set-base
       'tree-sitter-hl-face:punctuation.bracket
       :foreground "#DDDDDD")
      (face-remap-add-relative
       'tree-sitter-hl-face:tag
       :foreground "#AAAAAA"))
    (add-hook 'html-mode-hook 'my:html-mode-face-remap))
#+END_SRC

#+BEGIN_SRC elisp
  (use-package emmet-mode
    :ensure t
    :hook (sgml-mode css-mode))
#+END_SRC

** Typescript

#+BEGIN_SRC elisp
  (use-package typescript-mode
    :ensure t
    :mode ("\\.ts\\'" . typescript-mode))
#+END_SRC

** JSON
#+BEGIN_SRC elisp
  (use-package json-mode
    :ensure t
    :mode "\\.json\\'")
#+END_SRC

** Lua
#+BEGIN_SRC elisp
  (use-package lua-mode
    :ensure t
    :mode "\\.lua\\'")
#+END_SRC

** Agda
#+BEGIN_SRC elisp
  (eval-and-compile
    (defun agda-mode-load-path ()
      (file-name-directory (shell-command-to-string "agda-mode locate"))))
  (use-package agda2
    :load-path (lambda () (agda-mode-load-path))
    :mode ("\\.agda\\'" . agda2-mode)
    :config
    (setq outline-regexp "-- #+"))
#+END_SRC

#+BEGIN_SRC elisp
  (my:major-def agda2-mode-map
    "a" 'agda2-auto-maybe-all
    "c" 'agda2-make-case
    "d" 'agda2-goto-definition-keyboard
    "h" 'agda2-helper-function-type
    "j" 'agda2-next-goal
    "k" 'agda2-previous-goal
    "l" 'agda2-load
    "r" 'agda2-refine
    "n" 'agda2-compute-normalised-maybe-toplevel
    "s" 'agda2-solve-maybe-all
    "w" 'agda2-why-in-scope-maybe-toplevel
    "z" 'agda2-search-about-toplevel
    "," 'agda2-goal-and-context
    "." 'agda2-goal-and-context-and-inferred
    ";" 'agda2-goal-and-context-and-checked
    "x h" 'agda2-display-implicit-arguments
    "x r" 'agda2-restart
    "x q" 'agda2-quit)
#+END_SRC

** Ocaml
#+BEGIN_SRC elisp
  (use-package tuareg
    :ensure t
    :mode ("\\.ml[ip]?\\'" . tuareg-mode)
    :defer t)
#+END_SRC

#+BEGIN_SRC elisp
  (eval-and-compile
    (defun opam-emacs-load-path ()
      (expand-file-name
       "share/emacs/site-lisp"
       (file-name-directory
        (shell-command-to-string "opam var share")))))
#+END_SRC

#+BEGIN_SRC elisp
  (use-package merlin
    :load-path (lambda () (opam-emacs-load-path))
    :hook
    (tuareg-mode . merlin-mode))
#+END_SRC

#+BEGIN_SRC elisp
  (use-package utop
    :load-path (lambda () (opam-emacs-load-path))
    :hook
    (tuareg-mode . utop-minor-mode))
#+END_SRC

** SML
#+BEGIN_SRC elisp
  (use-package sml-mode
    :ensure t
    :mode "\\.sml\\'"
    :config
    (setq sml-indent-level 4)
    (setq sml-indent-args 2))
#+END_SRC

** Prolog
#+BEGIN_SRC elisp
  (use-package prolog
    :mode ("\\.pl\\'" . prolog-mode)
    :init
    (setq prolog-system 'swi))
#+END_SRC

** Python
#+BEGIN_SRC elisp
  (use-package python
    :mode ("\\.py\\'" . python-mode)
    :config
    (setq python-flymake-command '("flake8" "-")))
#+END_SRC

** Cubicaltt
#+BEGIN_SRC elisp
  (use-package cubicaltt
    :load-path "~/cubicaltt"
    :mode ("\\.ctt$" . cubicaltt-mode))
#+END_SRC

** Shell
#+BEGIN_SRC elisp
  (use-package flymake-shellcheck
    :ensure t
    :hook (sh-mode . flymake-shellcheck-load))
#+END_SRC

** LaTeX
#+BEGIN_SRC elisp
  (use-package tex-site
    :ensure auctex
    :mode ("\\.tex\\'" . TeX-latex-mode)
    :config
    (add-hook 'LaTeX-mode-hook 'my:show-trailing-space)
    (add-hook 'LaTeX-mode-hook 'TeX-source-correlate-mode)
    (add-hook 'LaTeX-mode-hook 'TeX-PDF-mode)
    (setq font-latex-fontify-sectioning 'color)
    (setq font-latex-fontify-script nil)
    (setq TeX-view-program-selection '((output-pdf "Zathura"))))
#+END_SRC

#+BEGIN_SRC elisp :tangle no
  (use-package auctex-latexmk
    :ensure t
    :after tex-site
    :config
    (auctex-latexmk-setup))
#+END_SRC

#+BEGIN_SRC elisp
  (use-package cdlatex
    :ensure t
    :hook (LaTeX-mode . cdlatex-mode)
    :init
    (setq cdlatex-takeover-parenthesis nil))
#+END_SRC

** YAML
#+BEGIN_SRC elisp
  (use-package yaml-mode
    :ensure t
    :mode "\\.yaml\\'")
#+END_SRC

