# -*- org-babel-use-quick-and-dirty-noweb-expansion: t; -*-
#+PROPERTY: header-args:elisp :tangle config.el :results output silent
* Contents
  :PROPERTIES:
  :TOC:      this
  :END:
-  [[#init][init]]
-  [[#use-package][use-package]]
-  [[#help-functions][help functions]]
-  [[#all-the-icons][all-the-icons]]
-  [[#doom-themes][doom-themes]]
-  [[#generalel][general.el]]
-  [[#hydra][hydra]]
  -  [[#hydra-window][hydra-window]]
  -  [[#hydra-buffer][hydra-buffer]]
  -  [[#hydra-eyebrowse][hydra-eyebrowse]]
-  [[#mode-line][mode line]]
-  [[#org][org]]
  -  [[#org-agenda][org-agenda]]
  -  [[#org-capture][org-capture]]
  -  [[#org-babel][org-babel]]
  -  [[#org-id][org-id]]
  -  [[#org-checklist][org-checklist]]
  -  [[#org-alert][org-alert]]
  -  [[#org-maketoc][org-maketoc]]
  -  [[#org-bullets][org-bullets]]
  -  [[#org-tree-slide][org-tree-slide]]
  -  [[#helper-functions][helper functions]]
    -  [[#archive-to-datetree][Archive to datetree]]
    -  [[#jump-to-source-block-by-name][Jump to source block by name]]
    -  [[#kill-temporary-fontify-buffers][Kill temporary fontify buffers]]
    -  [[#show-time-grid-in-org-agenda][Show time grid in org agenda]]
    -  [[#create-a-capture-frame][Create a capture frame]]
  -  [[#keybindings][keybindings]]
-  [[#eshell][eshell]]
-  [[#dired][dired]]
-  [[#packages][packages]]
  -  [[#academic-phrases][academic-phrases]]
  -  [[#alert][alert]]
  -  [[#avy][avy]]
  -  [[#battery][battery]]
  -  [[#company][company]]
  -  [[#docker][docker]]
  -  [[#ediff][ediff]]
  -  [[#emacs-libvterm][emacs-libvterm]]
  -  [[#emmet][emmet]]
  -  [[#evil][evil]]
    -  [[#evil-surround][evil-surround]]
    -  [[#evil-matchit][evil-matchit]]
  -  [[#exec-path-from-shell][exec-path-from-shell]]
  -  [[#eyebrowse][eyebrowse]]
  -  [[#fcitx][fcitx]]
  -  [[#find-file-in-project][find-file-in-project]]
  -  [[#flycheck][flycheck]]
    -  [[#flycheck-posframe][flycheck-posframe]]
  -  [[#geiser][geiser]]
  -  [[#hl-line-mode][hl-line-mode]]
  -  [[#htmlize][htmlize]]
  -  [[#ibuffer][ibuffer]]
  -  [[#imenu-list][imenu-list]]
  -  [[#info][info]]
  -  [[#ivy][ivy]]
  -  [[#ivy-bibtex][ivy-bibtex]]
  -  [[#keyfreq][keyfreq]]
  -  [[#lsp][lsp]]
  -  [[#magit][magit]]
  -  [[#olivetti][olivetti]]
  -  [[#rainbow-delimiters][rainbow-delimiters]]
  -  [[#symbol-overlay][symbol-overlay]]
  -  [[#terminal-here][terminal-here]]
  -  [[#tramp][tramp]]
  -  [[#vc-mode][vc-mode]]
  -  [[#web-mode][web-mode]]
  -  [[#wgrep][wgrep]]
  -  [[#which-key][which-key]]
  -  [[#winner-mode][winner-mode]]
  -  [[#xref][xref]]
  -  [[#xterm-color][xterm-color]]
  -  [[#yasnippet][yasnippet]]
-  [[#languages][languages]]
  -  [[#prog-mode][prog-mode]]
  -  [[#coq][Coq]]
  -  [[#csv][CSV]]
  -  [[#haskell][Haskell]]
  -  [[#agda][Agda]]
  -  [[#ocaml][Ocaml]]
  -  [[#sml][SML]]
  -  [[#cubicaltt][Cubicaltt]]
  -  [[#c][C]]
  -  [[#common-lisp][Common Lisp]]
  -  [[#lua][Lua]]
  -  [[#python][Python]]
  -  [[#rust][Rust]]
  -  [[#tex][TeX]]
  -  [[#yaml][YAML]]

* init
  Allow large garbage collection threshold when init.
  #+BEGIN_SRC elisp
    (setq gc-cons-threshold 64000000)
    (add-hook 'after-init-hook #'(lambda () (setq gc-cons-threshold 800000)))
  #+END_SRC

  Font setup.
  #+BEGIN_SRC elisp
    (setq default-frame-alist '((font . "Iosevka Type Slab 12")))
    (defun my:font-setup ()
      (set-fontset-font t 'unicode "Noto Color Emoji" nil 'prepend)
      (set-face-font 'fixed-pitch "Iosevka Type Slab 12")
      (set-face-font 'fixed-pitch-serif "Iosevka Type Slab 12")
      (set-face-font 'variable-pitch "EB Garamond 12"))
    (defun my:font-setup-hook (frame)
      "Setup the font, then remove the hook."
      (select-frame frame)
      (my:font-setup)
      (remove-hook 'after-make-frame-functions 'my:font-setup-hook))
    (add-hook 'after-make-frame-functions 'my:font-setup-hook nil)
    (my:font-setup)
  #+END_SRC

  Disable useless UIs.
  #+BEGIN_SRC elisp
    (scroll-bar-mode -1)
    (horizontal-scroll-bar-mode -1)
    (tool-bar-mode -1)
    (tooltip-mode -1)
    (menu-bar-mode -1)
  #+END_SRC

  Quiet startup
  #+BEGIN_SRC elisp
    (setq inhibit-startup-screen t)
    (setq inhibit-startup-message t)
    (setq inhibit-startup-echo-area-message t)
    (setq initial-scratch-message nil)
  #+END_SRC

  Show paren pair.
  #+BEGIN_SRC elisp
    (show-paren-mode 1)
  #+END_SRC

  Automatically close parenthesis/brackets/...
  #+BEGIN_SRC elisp
    (electric-pair-mode 1)
  #+END_SRC

  Disable backup.
  #+BEGIN_SRC elisp
    (setq make-backup-files nil)
  #+END_SRC

  Auto save after 1 second idle.
  #+BEGIN_SRC elisp
    (setq auto-save-default nil)
    (setq auto-save-visited-interval 1)
    (auto-save-visited-mode)
  #+END_SRC

  Trash instead of delete.
  #+BEGIN_SRC elisp
    (setq trash-directory "~/Trash")
    (setq delete-by-moving-to-trash t)
  #+END_SRC

  Tab.
  #+BEGIN_SRC elisp
    (setq-default indent-tabs-mode nil)
    (setq-default tab-width 4)
  #+END_SRC

  No wrap line.
  #+BEGIN_SRC elisp
    (setq-default truncate-lines t)
  #+END_SRC

  90 characters one line.
  #+BEGIN_SRC elisp
    (setq-default fill-column 70)
  #+END_SRC

  Use straight single quote in help and messages.
  #+BEGIN_SRC elisp
    (setq text-quoting-style 'straight)
  #+END_SRC

  y or n.
  #+BEGIN_SRC elisp
    (defalias 'yes-or-no-p 'y-or-n-p)
    (setq kill-buffer-query-functions nil)
  #+END_SRC

  Window divider on right.
  #+BEGIN_SRC elisp
    (setq window-divider-default-right-width 1)
    (setq window-divider-default-bottom-width 1)
    ; (setq window-divider-default-places t)
    (window-divider-mode t)
  #+END_SRC

  Avoid crash when open image in Emacs.
  #+BEGIN_SRC elisp
    (setenv "MAGICK_OCL_DEVICE" "OFF")
  #+END_SRC

  #+BEGIN_SRC elisp
    (setq password-cache-expiry 1200)
  #+END_SRC

  Always select the help window.
  #+BEGIN_SRC elisp
    (setq help-window-select t)
  #+END_SRC

* use-package
  #+BEGIN_SRC elisp
    (require 'package)
    ;; (setq package-archives '(("gnu"   . "https://mirrors.tuna.tsinghua.edu.cn/elpa/gnu/")
    ;;                          ("melpa" . "https://mirrors.tuna.tsinghua.edu.cn/elpa/melpa/")))
    (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
    (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)
    (unless (package-installed-p 'use-package)
      (package-refresh-contents)
      (package-install 'use-package))
    (eval-when-compile (require 'use-package))
  #+END_SRC

* help functions
  #+BEGIN_SRC elisp
    (defun my:show-trailing-space ()
      (setq show-trailing-whitespace t))
  #+END_SRC

  #+BEGIN_SRC elisp
    (defun my:other-window-or-buffer ()
      "Switch to other window or buffer"
      (interactive)
      (if (one-window-p) (switch-to-buffer (other-buffer)) (select-window (next-window))))

    (defun my:syntax-color-hex ()
      (interactive)
      (font-lock-add-keywords
       nil
       '(("#[[:xdigit:]]\\{6\\}"
          (0 (put-text-property
              (match-beginning 0)
              (match-end 0)
              'face (list :background (match-string-no-properties 0)))))))
      (font-lock-flush))

    (defun my:toggle-line-number ()
      "Toggle line number between relative and nil."
      (interactive)
      (setq display-line-numbers
        (pcase display-line-numbers
          ('relative nil)
          (_ 'relative))))
  #+END_SRC

  #+BEGIN_SRC elisp
    (defun my:toggle-transparency ()
      (interactive)
      (let ((transparency 95)
            (opacity 100)
            (old-alpha (frame-parameter nil 'alpha)))
        (if (and (numberp old-alpha) (< old-alpha opacity))
            (set-frame-parameter nil 'alpha opacity)
          (set-frame-parameter nil 'alpha transparency))))
  #+END_SRC

* all-the-icons
  #+BEGIN_SRC elisp
    (use-package all-the-icons
      :ensure t
      :config
      (add-to-list 'all-the-icons-mode-icon-alist
                   '(latex-mode all-the-icons-fileicon "tex" :face all-the-icons-lred))
      (add-to-list 'all-the-icons-icon-alist
                   '("\\.v" all-the-icons-fileicon "coq" :face all-the-icons-red))
      (add-to-list 'all-the-icons-mode-icon-alist
                   '(coq-mode all-the-icons-fileicon "coq" :face all-the-icons-red)))
  #+END_SRC

* doom-themes
  #+BEGIN_SRC elisp
    (use-package doom-themes
      :ensure t
      :config
      (setq doom-themes-enable-bold t)
      (setq doom-themes-enable-italic t)
      (load-theme 'doom-solarized-light t)
      (doom-themes-org-config)
      )
  #+END_SRC

* general.el
  #+BEGIN_SRC elisp :noweb no-export
    (use-package general
      :ensure t
      :config
      (general-evil-setup)
      (general-def 'override
        "C-=" 'text-scale-increase
        "M-p" 'my:other-window-or-buffer
        "M-o" 'delete-other-windows
        "M-m" 'ivy-switch-buffer
        "M-x" 'counsel-M-x
        "C--" 'text-scale-decrease)
      (general-def 'normal help-mode-map
        "q" 'quit-window))
  #+END_SRC

Use comma as the global leader key.
#+BEGIN_SRC elisp
  (general-def
    '(motion normal insert emacs)
    :prefix ","
    :global-prefix "M-,"
    "f" 'counsel-find-file
    "s" 'swiper
    "d" 'dired
    "r" 'counsel-rg
    "k" 'kill-buffer
    "i" 'ibuffer
    "b" 'ivy-bibtex
    "g" 'magit-status
    "a" 'org-agenda
    "[" 'window-toggle-side-windows
    "e" 'eshell
    "v" 'vterm
    "t" 'terminal-here-launch
    "l" 'org-store-link
    "c" 'org-capture
    "q" 'save-buffers-kill-terminal
    "Q" 'save-buffers-kill-emacs
    "E" 'hydra-eyebrowse/body
    "w" 'hydra-window/body
    "B" 'hydra-buffer/body)
#+END_SRC

Use semicolon as the major mode leader key.
#+BEGIN_SRC elisp
  (general-create-definer major-def
    :states '(motion normal insert emacs)
    :prefix ";"
    :global-prefix "M-;")
#+END_SRC

  Use Esc to quit minibuffer, which is previously C-g.
  #+BEGIN_SRC elisp
    (general-def '(minibuffer-local-map
                   minibuffer-local-ns-map
                   minibuffer-local-completion-map
                   minibuffer-local-must-match-map
                   minibuffer-local-isearch-map
                   dired-narrow-map
                   ivy-minibuffer-map)
      [escape] 'minibuffer-keyboard-quit)
  #+END_SRC

  #+BEGIN_SRC elisp
    (general-def 'override
      "C-/" 'comment-dwim
      "M-;" nil)
  #+END_SRC

  Find references using xref.
  #+BEGIN_SRC elisp
    (general-nmap
      "g d" 'xref-find-definitions
      "g r" 'xref-find-references
      "g i" 'counsel-imenu)
  #+END_SRC

  Use space as the leader key for those keybindings which are useful only in normal mode.
  #+BEGIN_SRC elisp
    (general-mmap
      :prefix "SPC"
      "" nil
      "a" 'align
      "t l" 'my:toggle-line-number
      "t t" 'my:toggle-transparency
      "t m" 'my:load-theme
      "s" 'symbol-overlay-put
      "o" 'olivetti-mode
      "f" 'avy-goto-char-2
      "w" 'avy-goto-word-1
      "l" 'avy-goto-line)
  #+END_SRC

* hydra
  #+BEGIN_SRC elisp :noweb no-export
    (use-package hydra
      :ensure t
      :config
      (setq hydra-hint-display-type 'posframe)
      (setq hydra-posframe-show-params
            '(:internal-border-width 10
              :background-color "#f0e9d7"
              :poshandler posframe-poshandler-frame-center)))
  #+END_SRC

** hydra-window
   #+BEGIN_SRC elisp
     (defhydra hydra-window
       (:color pink :hint nil)
       (concat
        "            "
        (all-the-icons-material "apps" :height 2 :v-adjust -0.3)
        " Window Management"
        "

     ^Move^         ^Swap^         ^Size^         ^Action^
     ─────────────────────────
     _j_: down      _H_: left      _+_: + h       _s_: split
     _k_: up        _L_: right     _-_: - h       _v_: vsplit
     _h_: left      _J_: bottom    _>_: + w       _d_: delete
     _l_: right     _K_: top       _<_: - w       _o_: only
     _n_: next      ^ ^            _=_: equal

     ")
       ("j" evil-window-down)
       ("k" evil-window-up)
       ("h" evil-window-left)
       ("l" evil-window-right)
       ("n" evil-window-next :color blue)
       ("H" evil-window-move-far-left)
       ("L" evil-window-move-far-right)
       ("J" evil-window-move-very-bottom)
       ("K" evil-window-move-very-top)
       ("+" evil-window-increase-height)
       ("-" evil-window-decrease-height)
       (">" evil-window-increase-width)
       ("<" evil-window-decrease-width)
       ("=" evil-balance-window)
       ("s" evil-window-split)
       ("v" evil-window-vsplit)
       ("d" evil-window-delete :color blue)
       ("o" delete-other-windows :color blue)
       ("q" nil :color blue)
       ("<escape>" nil :color blue))
   #+END_SRC

** hydra-buffer
   #+BEGIN_SRC elisp
     (defhydra hydra-buffer
       (:color teal :hint nil)
       (concat
        (all-the-icons-faicon "clone" :height 2 :v-adjust -0.2)
        " Buffer"
        "

     ^Action^
     ─────
     _j_: next
     _k_: previous
     _d_: delete
     _b_: switch

     ")
       ("j" evil-next-buffer :color red)
       ("k" evil-prev-buffer :color red)
       ("d" evil-delete-buffer)
       ("b" ivy-switch-buffer)
       ("q" nil)
       ("<escape>" nil))
   #+END_SRC

** hydra-eyebrowse
   #+BEGIN_SRC elisp
     (defhydra hydra-eyebrowse
       (:color teal :hint nil)
       "eyebrowse"
       ("l" eyebrowse-last-window-config "last" :column "Switch")
       ("j" eyebrowse-next-window-config "next" :color red)
       ("k" eyebrowse-prev-window-config "prev" :color red)
       ("s" eyebrowse-switch-to-window-config "switch")
       ("d" eyebrowse-close-window-config "delete" :column "Modify")
       ("c" eyebrowse-create-window-config "last")
       ("r" eyebrowse-rename-window-config "rename"))
   #+END_SRC

* mode line
  #+BEGIN_SRC elisp
    (use-package doom-modeline
      :ensure t
      :hook (after-init . doom-modeline-mode)
      :config
      (setq doom-modeline-icon t))
  #+END_SRC

* org
  #+BEGIN_SRC elisp :noweb no-export
    (use-package org
      :ensure org-plus-contrib
      :defer 4
      :hook
      (org-mode . my:show-trailing-space)
      ;; ((org-babel-after-execute . org-redisplay-inline-images))
      ;; (org-agenda-finalize . my:org-agenda-time-grid-spacing))
      :config
      (use-package org-mouse)
      <<org-kill-temp-fontify-buffer>>
      <<org-capture-templates>>
      (setcdr (assoc "\\.pdf\\'" org-file-apps) "zathura %s")
      (setq org-tags-column 0)
      (setq org-adapt-indentation nil)
      (setq org-startup-indented t)
      (setq org-startup-truncated t)
      (setq org-refile-targets '(("~/notes/memory.org" . (:level . 1))))
      (setq org-archive-location "~/notes/trash.org::")
      (setq org-ellipsis "")
      (setq org-confirm-babel-evaluate nil)
      (setq org-format-latex-options (plist-put org-format-latex-options :scale 1.4))
      (setq org-latex-pdf-process '("latexmk -f -pdf -outdir=%o %f"))
      (setq org-fontify-done-headline t)
      (setq org-log-into-drawer t)
      (setq org-log-done 'time)
      (setq org-enforce-todo-dependencies t)
      (setq org-enforce-todo-checkbox-dependencies t)
      (setq org-footnote-section nil))
  #+END_SRC

** org-agenda
  Org agenda config.
  #+BEGIN_SRC elisp :noweb no-export
    (use-package org-agenda
      :after org
      :commands (org-agenda)
      :config
      (setq org-agenda-files '("~/notes/memory.org"))
      (setq org-agenda-start-with-follow-mode nil)
      (setq org-agenda-follow-indirect t)
      (setq org-agenda-dim-blocked-tasks nil)
      (setq org-agenda-span 'day)
      (setq org-agenda-log-mode-items '(clock))
      (setq org-agenda-use-time-grid nil)
      (setq org-agenda-skip-deadline-if-done t)
      (setq org-agenda-remove-tags t)
      (setq org-agenda-todo-ignore-with-date nil)
      (setq org-agenda-skip-deadline-prewarning-if-scheduled 'pre-scheduled)
      (setq org-agenda-overriding-columns-format
            "%25ITEM %10Effort{:} %10CLOCKSUM{:}")
      (setq org-agenda-block-separator ?―)
      <<org-agenda-kbd>>
      )
  #+END_SRC

  Keybindings
  #+NAME: org-agenda-kbd
  #+BEGIN_SRC elisp :tangle no
    (general-def org-agenda-mode-map
      "S" 'org-agenda-schedule
      "D" 'org-agenda-deadline
      "c" 'org-agenda-columns
      "z" 'org-agenda-log-mode
      "h" 'backward-char
      "l" 'forward-char
      "j" 'org-agenda-next-line
      "k" 'org-agenda-previous-line)
  #+END_SRC

** org-capture
  Org capture templates.
  #+NAME: org-capture-templates
  #+BEGIN_SRC elisp :tangle no
    (add-hook 'org-capture-mode-hook 'evil-insert-state)
    (setq org-capture-templates
          '(("t" "Todo" entry (file "~/notes/cache.org")
             "* %?"
             :prepend t)))
  #+END_SRC

  Keybindings
  #+BEGIN_SRC elisp
    (general-define-key
     :definer 'minor-mode
     :states '(motion normal insert emacs)
     :keymaps 'org-capture-mode
     :prefix ";"
     :global-prefix "M-;"
     ";" 'org-capture-finalize
     "w" 'org-capture-refile
     "k" 'org-capture-kill)
  #+END_SRC

** org-babel
  Org babel.
  #+BEGIN_SRC elisp
    (use-package ob-scheme :after org)
    (use-package ob-python :after org)
    (use-package ob-shell :after org)
    (use-package ob-latex :after org)
    (use-package ob-ipython
      :ensure t
      :after org
      :config
      (setq ob-ipython-resources-dir "~/obipy-resources/")
      (remove-hook 'org-mode-hook 'ob-ipython-auto-configure-kernels)
      (advice-add 'ob-babel-execute:ipython :around 'ob-ipython-auto-configure-kernels))
    (use-package ob-metapost
      :commands org-babel-execute:metapost
      :load-path "~/.emacs.d/packages/ob-metapost")
  #+END_SRC

  Keybindings
  #+BEGIN_SRC elisp
    (general-define-key
     :definer 'minor-mode
     :states '(motion normal insert emacs)
     :keymaps 'org-src-mode
     :prefix ";"
     :global-prefix "M-;"
     ";" 'org-edit-src-exit
     "k" 'org-edit-src-abort)
  #+END_SRC

  Hydra
  #+BEGIN_SRC elisp
    (defhydra hydra-org-babel
      (:color teal :hint nil :idle 1.0)
      (concat
       "  "
       (all-the-icons-fileicon "org" :height 2 :v-adjust -0.2 :face 'all-the-icons-purple)
       " Org babel"
       "

    ^Move^      ^Action^
    ──────────
    _j_: next   _e_: edit
    _k_: prev   _t_: tangle
    _h_: head   _r_: result
    _g_: goto

    ")
      ("j" org-babel-next-src-block :color red)
      ("k" org-babel-previous-src-block :color red)
      ("h" org-babel-goto-src-block-head)
      ("g" org-babel-goto-named-src-block)

      ("e" org-edit-src-code)
      ("t" org-babel-tangle)
      ("r" org-babel-open-src-block-result)

      ("q" nil)
      ("<escape>" nil))
  #+END_SRC
** org-id
   #+BEGIN_SRC elisp
     (use-package org-id
       :config
       (setq org-id-link-to-org-use-id 'create-if-interactive))
   #+END_SRC

** org-checklist
   #+BEGIN_SRC elisp
     (use-package org-checklist
       :after org)
   #+END_SRC

** org-alert
   #+BEGIN_SRC elisp
     (use-package org-alert
       :disabled t
       :after (org alert)
       :load-path "~/.emacs.d/packages/org-alert"
       :config
       (org-alert-enable))
   #+END_SRC

** org-maketoc
   #+BEGIN_SRC elisp
     (use-package org-make-toc
       :ensure t
       :after org
       :commands (org-make-toc))
   #+END_SRC

** org-bullets
   #+BEGIN_SRC elisp
     (use-package org-bullets
       :ensure t
       :after org
       :hook (org-mode . org-bullets-mode)
       :init
       (setq org-bullets-bullet-list '("⚬")))
   #+END_SRC

** org-tree-slide
   #+BEGIN_SRC elisp
     (use-package org-tree-slide
       :ensure t
       :after org
       :commands (org-tree-slide-mode))
   #+END_SRC

** helper functions
*** Archive to datetree
    #+BEGIN_SRC elisp
      (defun my:org-refile-to-diary ()
        "Refile a subtree to a datetree corresponding to its CLOSED time."
        (interactive)
        (let* ((diary-file "~/org/diary.org")
               (datetree-date (org-entry-get nil "CLOSED" t))
               (date (org-date-to-gregorian datetree-date)))
          (save-window-excursion
            (org-cut-subtree)
            (find-file diary-file)
            (org-datetree-find-date-create date)
            (org-end-of-subtree t)
            (newline)
            (org-paste-subtree 4))))
    #+END_SRC

*** Jump to source block by name
    #+BEGIN_SRC elisp
      (defun my:org-search-src-block-name ()
        "Search source block name in current file"
        (interactive)
        (ivy-read
         "Code block: "
         (let (names)
           (org-babel-map-src-blocks nil
             (let ((name (nth 4 (org-babel-get-src-block-info))))
               (push name names)))
           (seq-filter #'identity names))
         :require-match t
         :action #'insert))
    #+END_SRC

*** Kill temporary fontify buffers
    Kill temporary buffers created by ~org-src-font-lock-fontify-block~.
    #+NAME: org-kill-temp-fontify-buffer
    #+BEGIN_SRC elisp :tangle no
      (defun kill-org-src-buffers (&rest args)
        "Kill temporary buffers created by org-src-font-lock-fontify-block."
        (dolist (b (buffer-list))
          (let ((bufname (buffer-name b)))
            (if (string-match-p (regexp-quote "org-src-fontification") bufname)
                (kill-buffer b)))))
      (advice-add 'org-src-font-lock-fontify-block :after #'kill-org-src-buffers)
    #+END_SRC

*** Show time grid in org agenda
    #+BEGIN_SRC elisp :tangle no
      (defun my:org-agenda-time-grid-spacing ()
        "Set different line spacing w.r.t. time duration."
        (save-excursion
          (let ((colors (list "#FFF9C4" "#FFF176" "#FFF59D" "#FFEE58"))
                (pos (point-min))
                (block-minutes 30)
                duration)
            (nconc colors colors)
            (while (setq pos (next-single-property-change pos 'org-hd-marker))
              (goto-char pos)
              (when (and (not (equal pos (point-at-eol)))
                         (setq duration
                               (or (org-get-at-bol 'duration)
                                   (when (equal (org-get-at-bol 'org-hd-marker) org-clock-hd-marker)
                                     (/ (- (float-time) (float-time org-clock-start-time)) 60)))))
                (let ((line-height (if (< duration block-minutes) 1.0
                                     (+ 0.5 (/ duration (* 2.0 block-minutes)))))
                      (ov (make-overlay (point-at-bol) (1+ (point-at-eol)))))
                  (overlay-put ov 'face `(:background ,(car colors)))
                  (setq colors (cdr colors))
                  (overlay-put ov 'line-height line-height)
                  (overlay-put ov 'line-spacing (1- line-height))))))))
    #+END_SRC

*** Create a capture frame
    #+BEGIN_SRC elisp
      (defun make-org-capture-frame ()
        "Create a new frame and run org-capture."
        (interactive)
        (defun my:delete-other-windows (&rest args)
          (setq-local mode-line-format nil)
          (delete-other-windows))
        (advice-add 'org-switch-to-buffer-other-window :after
                    #'my:delete-other-windows)
        (defun my:capture-after ()
          (advice-remove 'org-switch-to-buffer-other-window
                         #'my:delete-other-windows)
          (delete-frame)
          (remove-hook 'org-capture-after-finalize-hook #'my:capture-after)
          (fmakunbound 'my:delete-other-windows)
          (fmakunbound 'my:capture-after))
        (add-hook 'org-capture-after-finalize-hook #'my:capture-after)
        (condition-case nil
            (org-capture nil "t")
          ((user-error error) (my:capture-after))))
    #+END_SRC

** keybindings
   #+BEGIN_SRC elisp
     (general-nmap org-mode-map
       "gh" 'outline-up-heading
       "gj" 'org-forward-heading-same-level
       "gk" 'org-backward-heading-same-level
       "gl" 'outline-next-visible-heading
       "gt" 'counsel-org-goto
       "<" 'org-metaleft
       ">" 'org-metaright
       "t" 'org-todo)
     (general-def org-mode-map
       "M-h" 'org-metaleft
       "M-j" 'org-metadown
       "M-k" 'org-metaup
       "M-l" 'org-metaright
       "M-H" 'org-shiftmetaleft
       "M-J" 'org-shiftmetadown
       "M-K" 'org-shiftmetaup
       "M-L" 'org-shiftmetaright)
   #+END_SRC

#+BEGIN_SRC elisp
  (major-def org-mode-map
    "s" 'org-schedule
    "d" 'org-deadline
    "t" 'org-time-stamp
    "l" 'org-insert-link
    "L" 'org-insert-last-stored-link
    "p" 'org-set-property
    "c" 'org-columns
    "i" 'org-toggle-inline-images
    "x" 'org-toggle-latex-fragment
    "a" 'org-archive-subtree
    "o" 'org-open-at-point
    "r" 'org-refile
    "b" 'hydra-org-babel/body
    ";" 'org-ctrl-c-ctrl-c)
#+END_SRC

* eshell
  #+BEGIN_SRC elisp
    (defun my:eshell-complete ()
      (interactive)
      (pcomplete-std-complete))

    (defun my:eshell-hook ()
      (setenv "TERM" "xterm-256color")
      (add-to-list
       'eshell-preoutput-filter-functions
       'xterm-color-filter)
      (setq eshell-output-filter-functions
            (remove 'eshell-handle-ansi-color
                    eshell-output-filter-functions))
      (general-def eshell-mode-map
        "<tab>" 'completion-at-point)
      (general-def 'normal eshell-mode-map
        "0" 'eshell-bol
        "^" 'eshell-bol
        "gk" 'eshell-previous-prompt
        "gj" 'eshell-next-prompt))

    (defun my:shortened-path (path max-len)
      "Return a modified version of `path', replacing some components
          with single characters starting from the left to try and get
          the path down to `max-len'"
      (let* ((components (split-string (abbreviate-file-name path) "/"))
             (len (+ (1- (length components))
                     (reduce '+ components :key 'length)))
             (str ""))
        (while (and (> len max-len)
                    (cdr components))
          (setq str (concat str (if (= 0 (length (car components)))
                                    "/"
                                  (string (elt (car components) 0) ?/)))
                len (- len (1- (length (car components))))
                components (cdr components)))
        (concat str (reduce (lambda (a b) (concat a "/" b)) components))))

    (use-package eshell
      :after xterm-color
      :hook
      ((eshell-mode . my:eshell-hook)
       (eshell-before-prompt
        . (lambda () (setq xterm-color-preserve-properties t))))
      :config
      (setq eshell-destroy-buffer-when-process-dies t)
      (setq eshell-hist-ignoredups t)
      (setq eshell-history-size 100000)
      (setq
       eshell-visual-commands
       '("htop" "top" "less" "more" "ncdu" "ssh"))
      (setq
       eshell-visual-subcommands
       '(("git" "log" "diff" "show")))
      (setq
       eshell-prompt-function
       (lambda ()
         (concat
          (propertize (my:shortened-path (eshell/pwd) 20)
                      'face '(:foreground "#0D47A1"))
          " "
          (propertize "❯" 'face `(:foreground "#B71C1C" :weight bold))
          (propertize "❯" 'face `(:foreground "#F57F17" :weight bold))
          (propertize "❯" 'face `(:foreground "#1B5E20" :weight bold))
          " ")))
      (setq eshell-prompt-regexp "^.* ❯❯❯ ")
      (setq eshell-highlight-prompt nil))

    (use-package esh-autosuggest
      :ensure t
      :after eshell
      :hook (eshell-mode . esh-autosuggest-mode))

    (use-package eshell-z
      :ensure t
      :after eshell)

    (use-package em-tramp
      :after (eshell esh-module)
      :config
      (add-to-list 'eshell-modules-list 'eshell-tramp))

  #+END_SRC

* dired
  #+BEGIN_SRC elisp
    (use-package dired
      :commands dired
      :config
      (setq dired-recursive-copies t)
      (setq dired-recursive-deletes t)
      (setq dired-dwim-target t)
      (setq dired-listing-switches "-alhG --group-directories-first")
      (setq dired-isearch-filenames 'dwim)
      (use-package dired-open
        :ensure t
        :config
        (setq
         dired-open-extensions
         '(("pdf" . "zathura")
           ("docx" . "wps")
           ("doc" . "wps")
           ("mp4" . "mpv")
           ("png" . "feh")
           ("jpg" . "feh")
           ("xlsx" . "et")
           ("xls" . "et")
           ("pptx" . "wpp")
           ("ppt" . "wpp"))))
      (use-package dired-collapse
        :disabled t
        :ensure t
        :hook (dired-mode . dired-collapse-mode))
      (use-package all-the-icons-dired
        :ensure t
        :after all-the-icons
        :hook (dired-mode . all-the-icons-dired-mode))
      (use-package dired-narrow :ensure t))
  #+END_SRC

  Keybindings
  #+BEGIN_SRC elisp
    (general-def 'emacs dired-mode-map
      "j" 'dired-next-line
      "k" 'dired-previous-line
      "h" 'dired-up-directory
      "l" 'dired-open-file
      "r" 'dired-toggle-read-only
      "." 'dired-mark-extension
      "n" 'dired-narrow-regexp
      "/" 'dired-goto-file)
  #+END_SRC

* packages
** academic-phrases
   #+BEGIN_SRC elisp
     (use-package academic-phrases
       :ensure t
       :commands (academic-phrases academic-phrases-by-section))
   #+END_SRC

** alert
   #+BEGIN_SRC elisp
     (use-package alert
       :commands alert
       :ensure t
       :config
       (setq alert-default-style 'libnotify))
   #+END_SRC

** avy
#+BEGIN_SRC elisp
  (use-package avy
    :ensure t)
#+END_SRC

** battery
   #+BEGIN_SRC elisp
     (use-package battery
       :config
       (display-battery-mode))
   #+END_SRC

** company
   #+BEGIN_SRC elisp
     (use-package company
       :ensure t
       :hook (prog-mode . company-mode)
       :config
       (setq company-idle-delay 0)
       (use-package company-posframe
         :ensure t
         :config
         (company-posframe-mode 1)))
   #+END_SRC

** docker
   #+BEGIN_SRC elisp
     (use-package dockerfile-mode
       :ensure t
       :mode "Dockerfile\\'")

     (use-package docker-tramp
       :ensure t)
   #+END_SRC

** ediff
   #+BEGIN_SRC elisp
     (use-package ediff
       :defer
       :config
       (setq ediff-split-window-function 'split-window-horizontally)
       (setq ediff-window-setup-function 'ediff-setup-windows-plain))
   #+END_SRC

** emacs-libvterm
   #+BEGIN_SRC elisp
     (use-package vterm
       :load-path "~/.emacs.d/packages/emacs-libvterm")
   #+END_SRC

** emmet
   #+BEGIN_SRC elisp
     (use-package emmet-mode
       :ensure t
       :hook web-mode)
   #+END_SRC

** evil
#+BEGIN_SRC elisp
  (use-package evil
    :ensure t
    :init
    (setq evil-want-abbrev-expand-on-insert-exit nil)
    (setq evil-disable-insert-state-bindings t)
    :config
    (evil-mode 1)
    (evil-set-initial-state 'dired-mode 'emacs)
    (evil-set-initial-state 'ivy-occur-mode 'emacs)
    (evil-set-initial-state 'org-capture-mode 'insert)
    (evil-set-initial-state 'vterm-mode 'insert)
    (evil-set-initial-state 'wdired-mode 'normal))
#+END_SRC

#+BEGIN_SRC elisp
  (general-def 'motion ";" nil "," nil)
  (general-def 'normal "x" nil "X" nil "s" nil "S" nil)
  (general-def 'motion
    :prefix "x"
    "l" 'evil-avy-goto-line
    "f" 'evil-avy-goto-char-in-line
    "c" 'evil-avy-goto-char-2
    "w" 'evil-avy-goto-word-1)
#+END_SRC

*** evil-surround
#+BEGIN_SRC elisp
  (use-package evil-surround
    :ensure t
    :after evil
    :defer 2
    :config
    (global-evil-surround-mode 1))
#+END_SRC

*** evil-matchit
#+BEGIN_SRC elisp
  (use-package evil-matchit
    :ensure t
    :after evil
    :defer 2
    :config
    (global-evil-matchit-mode 1))
#+END_SRC

** exec-path-from-shell
   #+BEGIN_SRC elisp
     (use-package exec-path-from-shell
       :ensure t
       :defer 1
       :config
       (setq exec-path-from-shell-check-startup-files nil)
       (exec-path-from-shell-copy-env "SSH_AGENT_PID")
       (exec-path-from-shell-copy-env "SSH_AUTH_SOCK"))
   #+END_SRC

** eyebrowse
   #+BEGIN_SRC elisp
     (use-package eyebrowse
       :ensure t
       :config
       (eyebrowse-mode t))
   #+END_SRC

   Keybindings
   #+BEGIN_SRC elisp
     (general-def 'override
       "M-0" 'eyebrowse-switch-to-window-config-0
       "M-1" 'eyebrowse-switch-to-window-config-1
       "M-2" 'eyebrowse-switch-to-window-config-2
       "M-3" 'eyebrowse-switch-to-window-config-3
       "M-4" 'eyebrowse-switch-to-window-config-4
       "M-5" 'eyebrowse-switch-to-window-config-5
       "M-6" 'eyebrowse-switch-to-window-config-6
       "M-7" 'eyebrowse-switch-to-window-config-7
       "M-8" 'eyebrowse-switch-to-window-config-8
       "M-9" 'eyebrowse-switch-to-window-config-9)
   #+END_SRC

** fcitx
   #+BEGIN_SRC elisp
     (use-package fcitx
       :if (executable-find "fcitx-remote")
       :ensure t
       :defer 2
       :config
       (fcitx-aggressive-setup))
   #+END_SRC

** find-file-in-project
   #+BEGIN_SRC elisp
     (use-package find-file-in-project
       :ensure t
       :config
       (setq ffip-use-rust-fd t))
   #+END_SRC

** flycheck
#+BEGIN_SRC elisp
  (defun org-src-disable-elisp-checkdoc ()
    (setq-local flycheck-disabled-checkers '(emacs-lisp-checkdoc)))
  (use-package flycheck
    :ensure t
    :hook
    ((prog-mode . flycheck-mode)
     (org-src-mode . org-src-disable-elisp-checkdoc))
    :config
    (setq flycheck-display-errors-delay 0)
    ;; Use lsp instead
    (setq-default flycheck-disabled-checkers '(c/c++-clang c/c++-cppcheck c/c++-gcc)))
#+END_SRC

#+BEGIN_SRC elisp
  (major-def flycheck-mode-map
    "e" '(nil :wk "flycheck")
    "e j" '(flycheck-next-error :wk "next error")
    "e k" '(flycheck-previous-error :wk "previous error"))
#+END_SRC

*** flycheck-posframe
#+BEGIN_SRC elisp
  (use-package flycheck-posframe
    :ensure t
    :after flycheck
    :hook (flycheck-mode . flycheck-posframe-mode)
    :config
    (setq flycheck-posframe-error-prefix "😡 ")
    (setq flycheck-posframe-warning-prefix "😨 "))
#+END_SRC

** geiser
   #+BEGIN_SRC elisp
     (use-package geiser
       :ensure t
       :config
       (setq geiser-chez-binary "chez-scheme")
       (setq geiser-default-implementation 'chez))
   #+END_SRC

** hl-line-mode
   #+BEGIN_SRC elisp
     (use-package hl-line-mode
       :hook (prog-mode dired-mode LaTeX-mode))
   #+END_SRC

** htmlize
   #+BEGIN_SRC elisp
     (use-package htmlize
       :ensure t
       :commands (htmlize htmlize-file htmlize-region htmlize-buffer))
   #+END_SRC

** ibuffer
   #+BEGIN_SRC elisp
     (use-package ibuffer
       :hook (ibuffer-mode . ibuffer-vc-set-filter-groups-by-vc-root)
       :config
       (setq
        ibuffer-formats
        '(("    " (name 24 24) " " (mode 24 24) " " filename-and-process)))
       (use-package ibuffer-vc :ensure t))
   #+END_SRC

** imenu-list
   #+BEGIN_SRC elisp
     (use-package imenu-list
       :ensure t
       :commands imenu-list)
   #+END_SRC

** info
   #+BEGIN_SRC elisp
     (general-mmap Info-mode-map
       "q" 'quit-window
       "u" 'Info-up
       "b" 'Info-history-back
       "n" 'Info-next
       "p" 'Info-prev
       "<tab>" 'Info-next-reference
       "S-<tab>" 'Info-prev-reference)
   #+END_SRC

** ivy
   #+BEGIN_SRC elisp
     (use-package ivy
       :ensure t
       :config
       (ivy-mode 1)
       (use-package ivy-hydra :ensure t)
       (setq ivy-use-virtual-buffers t)
       (setq ivy-count-format "(%d/%d) ")
       (setq ivy-re-builders-alist '((t . ivy--regex-plus))))
     (use-package swiper
       :commands swiper
       :ensure t
       :after ivy)
     (use-package counsel
       :ensure t
       :after swiper)
     (use-package all-the-icons-ivy
       :ensure t
       :after (all-the-icons ivy)
       :config
       (all-the-icons-ivy-setup))
     (use-package ivy-posframe
       :ensure t
       :after ivy
       :config
       (setq ivy-height 20)
       (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-center)))
       (setq ivy-posframe-border-width 10)
       (ivy-posframe-mode))
   #+END_SRC

** ivy-bibtex
   #+BEGIN_SRC elisp
     (use-package ivy-bibtex
       :ensure t
       :after ivy
       :config
       (setq bibtex-completion-bibliography '("~/notes/refs.bib"))
       (setq bibtex-completion-notes-path "~/notes/drive.org")
       (setq bibtex-completion-library-path '("~/notes/pdfs"))
       (setq bibtex-completion-display-formats
             '((t . "${author:36} ${title:100} ${year:4} ${=has-pdf=:1}${=has-note=:1} ${=type=:18}")))
       (add-to-list 'ivy-re-builders-alist
                    '(ivy-bibtex . ivy--regex-ignore-order)))
   #+END_SRC

** keyfreq
   #+BEGIN_SRC elisp
     (use-package keyfreq
       :ensure t
       :config
       (keyfreq-mode 1)
       (keyfreq-autosave-mode 1))
   #+END_SRC

** lsp
   #+BEGIN_SRC elisp
     (use-package lsp-mode
       :ensure t
       :commands lsp
       :config
       (setq lsp-prefer-flymake nil))
     (use-package lsp-ui
       :ensure t
       :commands lsp-ui-mode
       :config
       (setq lsp-ui-sideline-show-diagnostics nil))
     (use-package company-lsp :ensure t :commands company-lsp)
   #+END_SRC

   #+BEGIN_SRC elisp
     (general-nmap lsp-ui-imenu-mode-map
       "h" 'lsp-ui-imenu--prev-kind
       "l" 'lsp-ui-imenu--next-kind
       "q" 'quit-window
       "o" 'lsp-ui-imenu--view
       "<return>" 'lsp-ui-imenu--visit)
   #+END_SRC

** magit
   #+BEGIN_SRC elisp
     (use-package magit
       :ensure t
       :hook (git-commit-mode . evil-insert-state)
       :defer 6)
   #+END_SRC

   #+BEGIN_SRC elisp
     (general-define-key
      :definer 'minor-mode
      :states '(motion normal insert emacs)
      :keymaps 'git-commit-mode
      :prefix ";"
      :global-prefix "M-;"
      ";" 'with-editor-finish
      "k" 'with-editor-cancel)
   #+END_SRC

** olivetti
   #+BEGIN_SRC elisp
     (use-package olivetti
       :ensure t
       :config
       (setq olivetti-body-width 90))
   #+END_SRC

** rainbow-delimiters
   #+BEGIN_SRC elisp
     (use-package rainbow-delimiters
       :disabled t
       :ensure t
       :hook ((prog-mode coq-mode) . rainbow-delimiters-mode))
   #+END_SRC

** symbol-overlay
   #+BEGIN_SRC elisp
     (use-package symbol-overlay
       :ensure t
       :commands symbol-overlay-put)
   #+END_SRC

** terminal-here
   #+BEGIN_SRC elisp
     (use-package terminal-here
       :ensure t
       :config
       (setq terminal-here-terminal-command
             '("alacritty")))
   #+END_SRC

** tramp
   #+BEGIN_SRC elisp
     (use-package tramp)
   #+END_SRC

** vc-mode
   #+BEGIN_SRC elisp
     (use-package vc
       :config
       (with-eval-after-load 'tramp
         (setq vc-ignore-dir-regexp
               (format "\\(%s\\)\\|\\(%s\\)"
                       vc-ignore-dir-regexp
                       tramp-file-name-regexp))))
   #+END_SRC

** web-mode
   #+BEGIN_SRC elisp
     (use-package web-mode
       :mode "\\.html?\\'"
       :ensure t)
   #+END_SRC

** wgrep
#+BEGIN_SRC elisp
  (use-package wgrep :ensure t)
#+END_SRC

** which-key
   #+BEGIN_SRC elisp
     (use-package which-key
       :ensure t
       :config
       (setq which-key-max-display-columns 3)
       (setq which-key-add-column-padding 2)
       (setq which-key-idle-delay 0)
       (which-key-mode 1))
   #+END_SRC

#+BEGIN_SRC elisp
  (use-package which-key-posframe
    :ensure t
    :config
    (setq which-key-posframe-border-width 10)
    (set-face-attribute 'which-key-posframe-border nil :background "#f0e9d7")
    (set-face-attribute 'which-key-posframe nil :background "#f0e9d7")
    (which-key-posframe-mode))
#+END_SRC

** winner-mode
   #+BEGIN_SRC elisp
     (use-package winner
       :hook
       (after-init . winner-mode)
       (ediff-quit . winner-undo))
   #+END_SRC

** xref
   #+BEGIN_SRC elisp
     (general-nmap xref--xref-buffer-mode-map
       "j" 'xref-next-line
       "k" 'xref-prev-line
       "q" 'quit-window
       "o" 'xref-show-location-at-point
       "<return>" 'xref-goto-xref)
   #+END_SRC

** xterm-color
   #+BEGIN_SRC elisp
    (use-package xterm-color :ensure t)
   #+END_SRC

** yasnippet
   #+BEGIN_SRC elisp
     (use-package yasnippet
       :ensure t
       :config
       (setq yas-snippet-dirs '("~/.emacs.d/snippets"))
       (yas-global-mode 1))
   #+END_SRC

   #+BEGIN_SRC elisp
     (use-package ivy-rich
       :ensure t
       :after ivy
       :config
       (setcdr (assq t ivy-format-functions-alist) #'ivy-format-function-line)
       (ivy-rich-mode 1))
     (use-package all-the-icons-ivy-rich
       :ensure t
       :after (ivy ivy-rich all-the-icons)
       :init (all-the-icons-ivy-rich-mode 1))
   #+END_SRC

   #+BEGIN_SRC elisp
     (general-def 'emacs ibuffer-mode-map
       "M-j" 'ibuffer-forward-filter-group
       "M-k" 'ibuffer-backward-filter-group
       "j" 'ibuffer-forward-line
       "k" 'ibuffer-backward-line)
   #+END_SRC

#+BEGIN_SRC elisp
  (general-def magit-status-mode-map
    "j" 'magit-section-forward
    "k" 'magit-section-backward
    "n" 'magit-status-jump
    "p" 'magit-discard)
#+END_SRC
* languages
** prog-mode
   #+BEGIN_SRC elisp
     (use-package prog-mode
       :hook (prog-mode . my:show-trailing-space))
   #+END_SRC

** Coq
   #+BEGIN_SRC elisp
     (use-package proof-general
       :mode ("\\.v\\'" . coq-mode)
       :ensure t
       :config
       (setq proof-splash-enable nil))
     (use-package company-coq
       :ensure t
       :after proof-site
       :hook (coq-mode . company-coq-mode)
       :config
       (setq company-coq-disabled-features '(smart-subscripts))
       (company-coq--init-refman-ltac-abbrevs-cache)
       (company-coq--init-refman-scope-abbrevs-cache)
       (company-coq--init-refman-tactic-abbrevs-cache)
       (company-coq--init-refman-vernac-abbrevs-cache)
       (defun my:company-coq-doc-search ()
         "Search identifier in coq refman"
         (interactive)
         (ivy-read
          "doc: "
          (append company-coq--refman-tactic-abbrevs-cache
                  company-coq--refman-vernac-abbrevs-cache
                  company-coq--refman-scope-abbrevs-cache
                  company-coq--refman-ltac-abbrevs-cache)
          :preselect (ivy-thing-at-point)
          :action 'company-coq-doc-buffer-refman)))
   #+END_SRC

   Keybindings
   #+BEGIN_SRC elisp
     (general-def 'normal coq-mode-map
       "K" 'my:company-coq-doc-search)
     (major-def coq-mode-map
       "g" '(company-coq-proof-goto-point :wk "goto")
       "d" '(company-coq-doc :wk "doc")
       "q" '(proof-shell-exit :wk "exit")
       "c" '(proof-interrupt-process :wk "abort")
       "p" '(proof-prf :wk "goal")
       "u" 'proof-undo-last-successful-command
       "s" 'proof-find-theorems
       "l" 'proof-layout-windows)
   #+END_SRC

** CSV
   #+BEGIN_SRC elisp
     (use-package csv-mode
       :ensure t
       :mode ("\\.[Cc][Ss][Vv]\\'" . csv-mode))
   #+END_SRC

** Haskell
   #+BEGIN_SRC elisp
     (use-package haskell-mode
       :load-path "~/.emacs.d/packages/haskell-mode"
       :mode "\\.hs\\'")

     (use-package ghcid
       :load-path "~/.emacs.d/packages/ghcid"
       :after haskell-mode
       :commands ghcid)
   #+END_SRC

** Agda
   #+BEGIN_SRC elisp
     (eval-and-compile
       (defun agda-mode-load-path ()
         (file-name-directory (shell-command-to-string "agda-mode locate"))))
     (use-package agda2
       :load-path (lambda () (agda-mode-load-path))
       :mode ("\\.agda\\'" . agda2-mode))
   #+END_SRC

#+BEGIN_SRC elisp
  (major-def agda2-mode-map
    "d" 'agda2-goto-definition-keyboard
    "l" 'agda2-load
    "a" 'agda2-autoOne
    "h" 'agda2-helper-function-type
    "," 'agda2-goal-and-context
    "." 'agda2-goal-and-context-and-inferred
    "r" 'agda2-refine
    "n" 'agda2-compute-normalised
    "c" 'agda2-make-case
    "q" 'agda2-quit)
#+END_SRC

** Ocaml
   #+BEGIN_SRC elisp
     (eval-and-compile
       (defun merlin-mode-load-path ()
         (expand-file-name
          "share/emacs/site-lisp"
          (file-name-directory
           (shell-command-to-string "opam config var share")))))
     (use-package merlin
       :load-path (lambda () (merlin-mode-load-path))
       :hook
       (tuareg-mode . merlin-mode))
   #+END_SRC

   #+BEGIN_SRC elisp
     (use-package tuareg
       :ensure t
       :defer t)
   #+END_SRC

** SML
   #+BEGIN_SRC elisp
     (use-package sml-mode
       :ensure t
       :defer t)
   #+END_SRC

** Cubicaltt
   #+BEGIN_SRC elisp
     (use-package cubicaltt
       :load-path "~/cubicaltt"
       :mode ("\\.ctt$" . cubicaltt-mode))
   #+END_SRC

** C
   #+BEGIN_SRC elisp
     (use-package cc-mode
       :commands c-mode
       :config
       (setq c-basic-offset 4)
       (setq c-default-style "linux"))
   #+END_SRC

   #+BEGIN_SRC elisp
     (use-package ccls
       :ensure t
       :defer t
       :hook ((c-mode c++-mode objc-mode) . (lambda () (require 'ccls) (lsp))))
   #+END_SRC

** Common Lisp
   #+BEGIN_SRC elisp
     (use-package slime
       :ensure t
       :commands slime
       :config
       (setq inferior-lisp-program "clisp"))
   #+END_SRC

** Lua
   #+BEGIN_SRC elisp
     (use-package lua-mode
       :ensure t
       :mode "\\.lua$"
       :interpreter "lua"
       :config
       (setq lua-indent-level 4))
   #+END_SRC

** Python
   #+BEGIN_SRC elisp
     (use-package python
       :defer t
       :config
       (setq python-indent-offset 4)
       (setq python-indent-guess-indent-offset-verbose nil)
       (setq python-shell-completion-native-enable nil)
       (when (executable-find "ipython")
         (setq python-shell-interpreter "ipython")))
   #+END_SRC

** Rust
   #+BEGIN_SRC elisp
     (use-package rust-mode
       :ensure t
       :hook (rust-mode . lsp))
     (use-package cargo
       :ensure t
       :hook (rust-mode . cargo-minor-mode))
     (use-package flycheck-rust
       :ensure t
       :hook (flycheck-mode . flycheck-rust-setup))
   #+END_SRC

** TeX
   #+BEGIN_SRC elisp
     (use-package tex
       :ensure auctex
       :defer t
       :hook (LaTeX-mode . my:show-trailing-space)
       :config
       (setq TeX-PDF-mode t))
   #+END_SRC

** YAML
   #+BEGIN_SRC elisp
     (use-package yaml-mode
       :ensure t)
   #+END_SRC

