# -*- org-babel-use-quick-and-dirty-noweb-expansion: t; -*-
#+PROPERTY: header-args:elisp :tangle config.el :results output silent
* Contents
  :PROPERTIES:
  :TOC:      this
  :END:
  -  [[#init][init]]
  -  [[#use-package][use-package]]
  -  [[#all-the-icons][all-the-icons]]
  -  [[#generalel][general.el]]
  -  [[#hydra][hydra]]
    -  [[#hydra-global][hydra-global]]
    -  [[#hydra-window][hydra-window]]
    -  [[#hydra-buffer][hydra-buffer]]
    -  [[#hydra-projectile][hydra-projectile]]
    -  [[#hydra-eyebrowse][hydra-eyebrowse]]
    -  [[#hydra-help][hydra-help]]
  -  [[#mode-line][mode line]]
  -  [[#org][org]]
    -  [[#org-agenda][org agenda]]
    -  [[#org-capture][org capture]]
    -  [[#org-clock][org clock]]
    -  [[#org-babel][org babel]]
    -  [[#help-functions][Help functions]]
  -  [[#eshell][eshell]]
  -  [[#dired][dired]]
  -  [[#emms][EMMS]]
  -  [[#packages][packages]]
    -  [[#academic-phrases][academic-phrases]]
    -  [[#alert][alert]]
    -  [[#battery][battery]]
    -  [[#company][company]]
    -  [[#ediff][ediff]]
    -  [[#emmet][emmet]]
    -  [[#evil][evil]]
    -  [[#exec-path-from-shell][exec-path-from-shell]]
    -  [[#eyebrowse][eyebrowse]]
    -  [[#fcitx][fcitx]]
    -  [[#flycheck][flycheck]]
    -  [[#geiser][geiser]]
    -  [[#hl-line-mode][hl-line-mode]]
    -  [[#htmlize][htmlize]]
    -  [[#ibuffer][ibuffer]]
    -  [[#imenu-list][imenu-list]]
    -  [[#info][info]]
    -  [[#ivy][ivy]]
    -  [[#keyfreq][keyfreq]]
    -  [[#lsp][lsp]]
    -  [[#magit][magit]]
    -  [[#projectile][projectile]]
    -  [[#rainbow-delimiters][rainbow-delimiters]]
    -  [[#sublimity][sublimity]]
    -  [[#symbol-overlay][symbol-overlay]]
    -  [[#web-mode][web-mode]]
    -  [[#which-key][which-key]]
    -  [[#xterm-color][xterm-color]]
  -  [[#languages][languages]]
    -  [[#coq][Coq]]
    -  [[#haskell][Haskell]]
    -  [[#agda][Agda]]
    -  [[#ocaml][Ocaml]]
    -  [[#cubicaltt][Cubicaltt]]
    -  [[#c][C]]
    -  [[#lua][Lua]]
    -  [[#python][Python]]
    -  [[#tex][TeX]]
  -  [[#help-functions][help functions]]

* init
  Allow large garbage collection threshold when init.
  #+BEGIN_SRC elisp
    (setq gc-cons-threshold 64000000)
    (add-hook 'after-init-hook #'(lambda () (setq gc-cons-threshold 800000)))
  #+END_SRC

  Disable useless UIs.
  #+BEGIN_SRC elisp
    (scroll-bar-mode -1)
    (horizontal-scroll-bar-mode -1)
    (tool-bar-mode -1)
    (tooltip-mode -1)
    (menu-bar-mode -1)
  #+END_SRC

  Quiet startup
  #+BEGIN_SRC elisp
    (setq inhibit-startup-screen t)
    (setq inhibit-startup-message t)
    (setq inhibit-startup-echo-area-message t)
    (setq initial-scratch-message nil)
  #+END_SRC

  Show paren pair.
  #+BEGIN_SRC elisp
    (show-paren-mode 1)
  #+END_SRC

  Automatically close parenthesis/brackets/...
  #+BEGIN_SRC elisp
    (electric-pair-mode 1)
  #+END_SRC

  Disable backup.
  #+BEGIN_SRC elisp
    (setq make-backup-files nil)
  #+END_SRC

  Auto save after 1 second idle.
  #+BEGIN_SRC elisp
    (setq auto-save-default nil)
    (setq auto-save-visited-interval 1)
    (auto-save-visited-mode)
  #+END_SRC

  Trash instead of delete.
  #+BEGIN_SRC elisp
    (setq trash-directory "~/Trash")
    (setq delete-by-moving-to-trash t)
  #+END_SRC

  Tab.
  #+BEGIN_SRC elisp
    (setq-default indent-tabs-mode nil)
    (setq-default tab-width 4)
  #+END_SRC

  No wrap line.
  #+BEGIN_SRC elisp
    (setq-default truncate-lines t)
  #+END_SRC

  90 characters one line.
  #+BEGIN_SRC elisp
    (setq-default fill-column 90)
  #+END_SRC

  Use straight single quote in help and messages.
  #+BEGIN_SRC elisp
    (setq text-quoting-style 'straight)
  #+END_SRC

  y or n.
  #+BEGIN_SRC elisp
    (defalias 'yes-or-no-p 'y-or-n-p)
  #+END_SRC

  Window divider on right.
  #+BEGIN_SRC elisp
    (setq window-divider-default-right-width 1)
    (setq window-divider-default-bottom-width 1)
    ; (setq window-divider-default-places t)
    (window-divider-mode t)
  #+END_SRC

  Load theme.
  #+BEGIN_SRC elisp
    (load-theme 'lowlight t)
  #+END_SRC

  Avoid crash when open image in Emacs.
  #+BEGIN_SRC elisp
    (setenv "MAGICK_OCL_DEVICE" "OFF")
  #+END_SRC

  User full name will appear in mail header (From).
  #+BEGIN_SRC elisp
    (setq user-full-name "Zhuyang Wang")
  #+END_SRC

  #+BEGIN_SRC elisp
    (setq password-cache-expiry 1200)
  #+END_SRC
* use-package
  #+BEGIN_SRC elisp
    (require 'package)
    ;; (setq package-enable-at-startup nil)
    ;; (setq package-archives '(("gnu"   . "https://mirrors.tuna.tsinghua.edu.cn/elpa/gnu/")
    ;;                          ("melpa" . "https://mirrors.tuna.tsinghua.edu.cn/elpa/melpa/")))
    ;; (package-initialize)
    (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
    (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)
    (unless (package-installed-p 'use-package)
      (package-refresh-contents)
      (package-install 'use-package))
    (eval-when-compile (require 'use-package))
  #+END_SRC
* benchmark-init
  #+BEGIN_SRC elisp
    (use-package benchmark-init
      :ensure t
      :config
      (add-hook 'after-init-hook 'benchmark-init/deactivate))
  #+END_SRC
* all-the-icons
  #+BEGIN_SRC elisp
    (use-package all-the-icons
      :ensure t
      :config
      (add-to-list 'all-the-icons-mode-icon-alist
                   '(latex-mode all-the-icons-fileicon "tex" :face all-the-icons-lred))
      (add-to-list 'all-the-icons-icon-alist
                   '("\\.v" all-the-icons-fileicon "coq" :face all-the-icons-red))
      (add-to-list 'all-the-icons-mode-icon-alist
                   '(coq-mode all-the-icons-fileicon "coq" :face all-the-icons-red)))
  #+END_SRC
* general.el
  #+BEGIN_SRC elisp :noweb no-export
    (use-package general
      :ensure t
      :config
      (general-evil-setup)
      (general-def 'emacs ibuffer-mode-map
        "M-j" 'ibuffer-forward-filter-group
        "M-k" 'ibuffer-backward-filter-group
        "j" 'ibuffer-forward-line
        "k" 'ibuffer-backward-line)
      (general-def 'override
        "C-=" 'text-scale-increase
        "M-o" 'my:other-window-or-buffer
        "C--" 'text-scale-decrease)
      (general-mmap Info-mode-map
        "q" 'Info-exit
        "u" 'Info-up
        "b" 'Info-history-back
        "n" 'Info-next
        "p" 'Info-prev
        "<tab>" 'Info-next-reference
        "S-<tab>" 'Info-prev-reference)
      (general-def 'normal help-mode-map
        "q" 'quit-window))
  #+END_SRC

  Use Esc to quit minibuffer, which is previously C-g.
  #+BEGIN_SRC elisp
    (general-def '(minibuffer-local-map
                   minibuffer-local-ns-map
                   minibuffer-local-completion-map
                   minibuffer-local-must-match-map
                   minibuffer-local-isearch-map
                   dired-narrow-map
                   ivy-minibuffer-map)
      [escape] 'minibuffer-keyboard-quit)
  #+END_SRC

  Use comma as the global leader key. It is supported in any mode and evil state.
  #+BEGIN_SRC elisp
    (general-def 'override
      "M-," 'hydra-global/body)
  #+END_SRC

  Use space as the leader key for those keybindings which are useful only in normal mode.
  #+BEGIN_SRC elisp
    (general-mmap
      :prefix "SPC"
      "" nil
      "a" 'align
      "t l" 'my:toggle-line-number
      "t t" 'my:toggle-transparency
      "t m" 'my:load-theme
      "f" 'avy-goto-char-2
      "w" 'avy-goto-word-1
      "l" 'avy-goto-line
      "o" 'symbol-overlay-put)
  #+END_SRC
* hydra
  #+BEGIN_SRC elisp :noweb no-export
    (use-package hydra
      :ensure t
      :config
      (setq hydra-hint-display-type 'posframe)
      (setq hydra-posframe-show-params
            '(:internal-border-width 1
              :internal-border-color "#9E9E9E"
              :background-color "#ECECEC"
              :left-fringe 15
              :right-fringe 15
              :poshandler posframe-poshandler-frame-center)))
  #+END_SRC
** hydra-global
   #+BEGIN_SRC elisp
     (defhydra hydra-global
       (:color teal :hint nil)
       (concat
        "                 "
        (all-the-icons-fileicon "emacs" :height 2 :v-adjust -0.2 :face 'all-the-icons-purple)
        " Emacs"
        "

     ^Ivy^          ^View^         ^Hydra^         ^Action^
     ─────────────────────────────────────────────────
     _b_: buffer    _g_: magit     _e_: eyebrowse  _t_: eshell
     _f_: file      _a_: agenda    _w_: window     _l_: link
     _s_: swiper    _A_: Agenda    _B_: buffer     _c_: capture
     _d_: dired     _m_: Email     _h_: help       _q_: quit
     _r_: ripgrep   ^ ^            _p_: project    _Q_: Quit
     _k_: kill
     _i_: ibuffer

     ")
       ("b" ivy-switch-buffer)
       ("f" counsel-find-file)
       ("s" swiper)
       ("d" dired)
       ("r" counsel-rg)
       ("k" kill-buffer)
       ("i" ibuffer)

       ("g" magit-status)
       ("a" my:agenda)
       ("A" org-agenda)
       ("m" my:notmuch-transient)

       ("t" my:new-eshell)
       ("l" org-store-link)
       ("c" org-capture)
       ("q" save-buffers-kill-terminal)
       ("Q" save-buffers-kill-emacs)

       ("e" hydra-eyebrowse/body)
       ("w" hydra-window/body)
       ("B" hydra-buffer/body)
       ("h" hydra-help/body)
       ("p" hydra-projectile/body)

       ("<escape>" nil))
   #+END_SRC
** hydra-window
   #+BEGIN_SRC elisp
     (defhydra hydra-window
       (:color pink :hint nil)
       (concat
        "            "
        (all-the-icons-material "apps" :height 2 :v-adjust -0.3)
        " Window Management"
        "

     ^Move^         ^Swap^         ^Size^         ^Action^
     ─────────────────────────────────────────────────
     _j_: down      _H_: left      _+_: + h       _s_: split
     _k_: up        _L_: right     _-_: - h       _v_: vsplit
     _h_: left      _J_: bottom    _>_: + w       _d_: delete
     _l_: right     _K_: top       _<_: - w       _o_: only
     _n_: next      ^ ^            _=_: equal

     ")
       ("j" evil-window-down)
       ("k" evil-window-up)
       ("h" evil-window-left)
       ("l" evil-window-right)
       ("n" evil-window-next :color blue)
       ("H" evil-window-move-far-left)
       ("L" evil-window-move-far-right)
       ("J" evil-window-move-very-bottom)
       ("K" evil-window-move-very-top)
       ("+" evil-window-increase-height)
       ("-" evil-window-decrease-height)
       (">" evil-window-increase-width)
       ("<" evil-window-decrease-width)
       ("=" evil-balance-window)
       ("s" evil-window-split)
       ("v" evil-window-vsplit)
       ("d" evil-window-delete :color blue)
       ("o" delete-other-windows :color blue)
       ("q" nil :color blue)
       ("<escape>" nil :color blue))
   #+END_SRC
** hydra-buffer
   #+BEGIN_SRC elisp
     (defhydra hydra-buffer
       (:color teal :hint nil)
       (concat
        (all-the-icons-faicon "clone" :height 2 :v-adjust -0.2)
        " Buffer"
        "

     ^Action^
     ─────────────
     _j_: next
     _k_: previous
     _d_: delete
     _b_: switch

     ")
       ("j" evil-next-buffer :color red)
       ("k" evil-prev-buffer :color red)
       ("d" evil-delete-buffer)
       ("b" ivy-switch-buffer)
       ("q" nil)
       ("<escape>" nil))
   #+END_SRC
** hydra-projectile
   #+BEGIN_SRC elisp
     (defhydra hydra-projectile
       (:color teal :hint nil)
       (concat
        "       "
        (all-the-icons-material "dashboard" :height 2 :v-adjust -0.3)
        " Projectile"
        "

     ^Switch^            ^Action^
     ────────────────────────────────
     _p_: project        _c_: compile
     _b_: buffer         _t_: test
     _f_: file           _r_: run
     _d_: dired          _l_: clean
     _e_: eshell         _x_: remove
     ^ ^                 _s_: save

     ")
       ("p" projectile-switch-project)
       ("b" projectile-switch-to-buffer)
       ("f" projectile-find-file)
       ("d" projectile-dired)
       ("e" projectile-run-eshell)
       ("c" projectile-compile-project)
       ("t" projectile-test-project)
       ("r" projectile-run-project)
       ("l" projectile-cleanup-known-projects)
       ("x" projectile-remove-known-project)
       ("s" projectile-save-project-buffers)
       ("q" nil)
       ("<escape>" nil)
       )
   #+END_SRC
** hydra-eyebrowse
   #+BEGIN_SRC elisp
     (defhydra hydra-eyebrowse
       (:color teal :hint nil)
       "eyebrowse"
       ("l" eyebrowse-last-window-config "last" :column "Switch")
       ("j" eyebrowse-next-window-config "next" :color red)
       ("k" eyebrowse-prev-window-config "prev" :color red)
       ("s" eyebrowse-switch-to-window-config "switch")
       ("d" eyebrowse-close-window-config "delete" :column "Modify")
       ("c" eyebrowse-create-window-config "last")
       ("r" eyebrowse-rename-window-config "rename"))
   #+END_SRC
** hydra-help
   #+BEGIN_SRC elisp
     (defhydra hydra-help
       (:color teal :hint nil)
       (concat
        "      "
        (all-the-icons-material "help_outline" :height 2 :v-adjust -0.3)
        " Help"
        "

     ^Describe^         ^Info^
     ──────────────────────────
     _f_: function      _i_: info
     _F_: face          _n_: news
     _m_: mode          _w_: woman
     _v_: variable
     _b_: binding
     _k_: key
     _c_: char

     ")
       ("f" describe-function)
       ("v" describe-variable)
       ("m" describe-mode)
       ("F" counsel-describe-face)
       ("b" counsel-descbinds)
       ("k" describe-key)
       ("c" describe-char)
       ("i" info)
       ("n" view-emacs-news)
       ("w" woman)
       ("q" nil)
       ("<escape>" nil))
   #+END_SRC
* transient
  #+BEGIN_SRC elisp
    (use-package transient
      :ensure magit)
  #+END_SRC
* mode line
  Honestly mode line is just an eye candy for me. The only useful part is column number,
  and maybe the current buffer name. But a pretty mode line does please me to some extent,
  and it makes my emacs seem more modern, so I keep it.

  #+BEGIN_SRC elisp
    (use-package moody
      :ensure t
      :config
      (setq x-underline-at-descent-line t)
      (setq moody-mode-line-height 30))
  #+END_SRC
  Here are two aux functions to add foreground color to text and remove icon shift.
  #+BEGIN_SRC elisp
    (defun my:add-face-string (s face)
      (add-face-text-property 0 (length s) face nil s) s)

    (defun my:remove-icon-display (s)
      (remove-text-properties 0 1 '(display nil) s) s)
  #+END_SRC

  The mode line contains:
  1. Line number, column number.
  2. Tabs of eyebrowse. Current workspace tab opens above.
  3. Date time. If org clock is running, show the clocking entry and duration.
  4. Buffer icon and name, upward openning.
  5. Battery icon and percent.
  6. Icon and branch of vc-mode. Just an eye candy to show off the downward openning tab.
  #+BEGIN_SRC elisp :noweb no-export
    (setq-default
     mode-line-format
     (list
      "%04l,%02C"
      "  "
      '(:eval (my:eyebrowse-mode-line))
      "  "
      <<mode-line-datetime>>
      "  "
      <<mode-line-buffer-name>>
      "  "
      '(:eval (my:battery-mode-line))
      "  "
      <<mode-line-vc-mode>>
      ))
  #+END_SRC

  #+NAME: mode-line-datetime
  #+BEGIN_SRC elisp :tangle no
    '(:eval
      (if (and (featurep 'org) (org-clocking-p))
          (concat (format-time-string "%H:%M ")
                  org-mode-line-string)
        (format-time-string "%m-%d %H:%M")))
  #+END_SRC

  #+NAME: mode-line-buffer-name
  #+BEGIN_SRC elisp :tangle no
    '(:eval
      (moody-tab
       (concat
        (my:remove-icon-display (all-the-icons-icon-for-buffer))
        " %b")
       5 'down))
  #+END_SRC

  #+NAME: mode-line-vc-mode
  #+BEGIN_SRC elisp :tangle no
    '(:eval
      (when vc-mode
        (moody-tab
         (concat
          (my:remove-icon-display
           (all-the-icons-alltheicon "git" :face '(:foreground "#F44336")))
          vc-mode)
         5 'up)))
  #+END_SRC
* org
  #+BEGIN_SRC elisp :noweb no-export
    (use-package org
      :ensure org-plus-contrib
      :defer 4
      :hook
      ((org-babel-after-execute . org-redisplay-inline-images))
      ;; (org-agenda-finalize . my:org-agenda-time-grid-spacing))
      :config
      (use-package org-notmuch)
      (use-package org-mouse)
      <<org-kill-temp-fontify-buffer>>
      <<org-capture-templates>>
      <<org-agenda-config>>
      <<org-clock-config>>
      (setq org-agenda-files '("~/org/todos.org" "~/org/diary.org"))
      (setcdr (assoc "\\.pdf\\'" org-file-apps) "zathura %s")
      (setq org-ellipsis "𝌆")
      (setq org-confirm-babel-evaluate nil)
      (setq org-format-latex-options (plist-put org-format-latex-options :scale 1.4))
      (setq org-latex-pdf-process '("latexmk -f -pdf -outdir=%o %f"))
      (setq org-todo-keywords
            '((sequence "TODO" "WAITING" "|" "DONE")))
      (setq org-todo-keyword-faces
            '(("TODO" . org-todo)
              ("WAITING" . (:foreground "#F57F17"
                            :background "#FFF9C4"
                            :weight bold))))
      (setq org-log-into-drawer t)
      (setq org-log-done 'time)
      (setq org-enforce-todo-dependencies t)
      (setq org-enforce-todo-checkbox-dependencies t)
      (setq org-footnote-section nil))
  #+END_SRC

  Kill temporary buffers created by ~org-src-font-lock-fontify-block~.
  #+NAME: org-kill-temp-fontify-buffer
  #+BEGIN_SRC elisp :tangle no
    (defun kill-org-src-buffers (&rest args)
      "Kill temporary buffers created by org-src-font-lock-fontify-block."
      (dolist (b (buffer-list))
        (let ((bufname (buffer-name b)))
          (if (string-match-p (regexp-quote "org-src-fontification") bufname)
              (kill-buffer b)))))
    (advice-add 'org-src-font-lock-fontify-block :after #'kill-org-src-buffers)
  #+END_SRC

  Other org packages
  #+BEGIN_SRC elisp
    (use-package org-protocol
      :after org)

    (use-package org-alert
      :disabled t
      :after (org alert)
      :load-path "~/.emacs.d/packages/org-alert"
      :config
      (org-alert-enable))

    (use-package org-make-toc
      :ensure t
      :after org
      :defer 5)

    (use-package org-bullets
      :ensure t
      :after org
      :init
      (setq org-bullets-bullet-list '("⚫" "○" "∙"))
      :config
      (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

    (use-package org-tree-slide
      :ensure t
      :after org)
  #+END_SRC

  Keybindings
  #+BEGIN_SRC elisp
    (general-nmap org-mode-map
      "gh" 'outline-up-heading
      "gj" 'org-forward-heading-same-level
      "gk" 'org-backward-heading-same-level
      "gl" 'outline-next-visible-heading
      "gt" 'counsel-org-goto
      "<" 'org-metaleft
      ">" 'org-metaright
      "t" 'org-todo)
    (general-def org-mode-map
      "M-h" 'org-metaleft
      "M-j" 'org-metadown
      "M-k" 'org-metaup
      "M-l" 'org-metaright
      "M-H" 'org-shiftmetaleft
      "M-J" 'org-shiftmetadown
      "M-K" 'org-shiftmetaup
      "M-L" 'org-shiftmetaright)
    (general-def org-mode-map
      "M-;" 'hydra-org/body)
  #+END_SRC

  Hydra
  #+BEGIN_SRC elisp
    (defhydra hydra-org
      (:color teal :hint nil)
      (concat
       "               "
       (all-the-icons-fileicon "org" :height 2 :v-adjust -0.2 :face 'all-the-icons-purple)
       " Org mode"
       "

    ^Insert^        ^View^       ^Hydra^    ^Action^
    ────────────────────────────────────────────────
    _s_: schedule   _c_: column  _k_: clock  _r_: refile
    _d_: deadline   _i_: image   _b_: babel  _o_: open
    _t_: timestamp  _x_: latex
    _l_: link
    _L_: link
    _p_: property

    ")
      ("s" org-schedule)
      ("d" org-deadline)
      ("t" org-time-stamp)
      ("l" org-insert-link)
      ("L" org-insert-last-stored-link)
      ("p" org-set-property)

      ("c" org-columns)
      ("i" org-toggle-inline-images)
      ("x" org-toggle-latex-fragment)

      ("k" hydra-org-clock/body)
      ("b" hydra-org-babel/body)

      ("r" my:org-refile-to-diary)
      ("o" org-open-at-point)
      ("M-;" org-ctrl-c-ctrl-c)

      ("q" nil)
      ("<escape>" nil))
  #+END_SRC
** org agenda
  Org agenda config.
  #+NAME: org-agenda-config
  #+BEGIN_SRC elisp :tangle no
    (setq org-agenda-span 'day)
    (setq org-agenda-log-mode-items '(clock))
    (setq org-agenda-use-time-grid nil)
    (setq org-agenda-skip-deadline-if-done t)
    (setq org-agenda-remove-tags t)
    (setq org-agenda-todo-ignore-with-date nil)
    (setq org-agenda-skip-deadline-prewarning-if-scheduled 'pre-scheduled)
    (setq org-agenda-overriding-columns-format
          "%25ITEM %10Effort{:} %10CLOCKSUM{:}")
    (setq org-agenda-block-separator ?―)
    (setq org-agenda-custom-commands
          '(("h" "Test"
             ((agenda "" ((org-agenda-overriding-header "Today")))
              (todo "WAITING" ((org-agenda-overriding-header "Waiting")))
              (todo
               "TODO"
               ((org-agenda-overriding-header "Read")
                (org-agenda-files '("~/org/notes.org"))))))))
  #+END_SRC

  Show time grid in org agenda.
  #+BEGIN_SRC elisp
    (defun my:org-agenda-time-grid-spacing ()
      "Set different line spacing w.r.t. time duration."
      (save-excursion
        (let ((colors (list "#FFF9C4" "#FFF176" "#FFF59D" "#FFEE58"))
              (pos (point-min))
              (block-minutes 30)
              duration)
          (nconc colors colors)
          (while (setq pos (next-single-property-change pos 'org-hd-marker))
            (goto-char pos)
            (when (and (not (equal pos (point-at-eol)))
                       (setq duration
                             (or (org-get-at-bol 'duration)
                                 (when (equal (org-get-at-bol 'org-hd-marker) org-clock-hd-marker)
                                   (/ (- (float-time) (float-time org-clock-start-time)) 60)))))
              (let ((line-height (if (< duration block-minutes) 1.0
                                   (+ 0.5 (/ duration (* 2.0 block-minutes)))))
                    (ov (make-overlay (point-at-bol) (1+ (point-at-eol)))))
                (overlay-put ov 'face `(:background ,(car colors)))
                (setq colors (cdr colors))
                (overlay-put ov 'line-height line-height)
                (overlay-put ov 'line-spacing (1- line-height))))))))
  #+END_SRC

  #+BEGIN_SRC elisp
    (defun make-org-agenda-frame ()
      "Create a new frame and run org-agenda."
      (interactive)
      (org-agenda-list)
      (setq-local mode-line-format nil)
      (delete-other-windows))
  #+END_SRC
  
  Super agenda
  #+BEGIN_SRC elisp
    (use-package org-super-agenda
      :disabled t
      :ensure t
      :after org
      :config
      (org-super-agenda-mode)
      (setq org-super-agenda-groups
            '((:name "Today"
                     :and (:todo "TODO" :scheduled today))
              (:name "Waiting"
                     :todo "WAITING")
              (:name "No Date"
                     :date nil))))
  #+END_SRC
  
  Keybindings
  #+BEGIN_SRC elisp
    (general-def org-agenda-mode-map
      "S" 'org-agenda-schedule
      "D" 'org-agenda-deadline
      "c" 'org-agenda-columns
      "z" 'org-agenda-log-mode
      "h" 'backward-char
      "l" 'forward-char
      "j" 'org-agenda-next-line
      "k" 'org-agenda-previous-line)
  #+END_SRC

  #+BEGIN_SRC elisp
    (general-def org-super-agenda-header-map
      "c" 'org-agenda-columns
      "z" 'org-agenda-log-mode
      "h" 'backward-char
      "l" 'forward-char
      "j" 'org-agenda-next-line
      "k" 'org-agenda-previous-line)
  #+END_SRC
** org capture
  Org capture templates.
  #+NAME: org-capture-templates
  #+BEGIN_SRC elisp :tangle no
    (setq org-capture-templates
          '(("t" "Todo" entry (file "~/org/todos.org")
             "* TODO %?"
             :prepend t)
            ("w" "Water" entry (file+olp+datetree "~/org/diary.org")
             "* water\n     :PROPERTIES:\n     :volume:   %^{PROMPT}\n     :END:"
             :immediate-finish t)
            ("c" "Clock" entry (file+olp+datetree "~/org/diary.org")
             "* %^{PROMPT}\n  %t\n"
             :immediate-finish t
             :clock-in t
             :clock-keep t)))
  #+END_SRC

  #+BEGIN_SRC elisp
    (defun make-org-capture-frame ()
      "Create a new frame and run org-capture."
      (interactive)
      (defun my:delete-other-windows (&rest args)
        (setq-local mode-line-format nil)
        (delete-other-windows))
      (advice-add 'org-switch-to-buffer-other-window :after
                  #'my:delete-other-windows)
      (defun my:capture-after ()
        (advice-remove 'org-switch-to-buffer-other-window
                       #'my:delete-other-windows)
        (delete-frame)
        (remove-hook 'org-capture-after-finalize-hook #'my:capture-after)
        (fmakunbound 'my:delete-other-windows)
        (fmakunbound 'my:capture-after))
      (add-hook 'org-capture-after-finalize-hook #'my:capture-after)
      (condition-case nil
          (org-capture)
        ((user-error error) (my:capture-after))))
  #+END_SRC

  Keybindings
  #+BEGIN_SRC elisp
    (general-define-key
     :definer 'minor-mode
     :states '(motion visual normal insert emacs)
     :keymaps 'org-capture-mode
     :prefix "M-;"
     "M-;" 'org-capture-finalize
     "M-w" 'org-capture-refile
     "M-k" 'org-capture-kill)
  #+END_SRC
** org clock
   Org clock config.
   #+NAME: org-clock-config
   #+BEGIN_SRC elisp :tangle no
     (org-clock-persistence-insinuate)
     (setq org-clock-persist t)
     (setq org-clock-in-resume t)
     (setq org-clock-persist-query-resume nil)
     (setq org-clock-clocktable-default-properties
           '(:maxlevel 4 :block today :scope file :link t))
   #+END_SRC

   Hydra
   #+BEGIN_SRC elisp
     (defhydra hydra-org-clock
       (:color blue :hint nil)
       "org clock"
       ("g" org-clock-goto "goto")
       ("i" org-clock-in "in")
       ("I" org-clock-in-last "in last")
       ("o" org-clock-out "out")
       ("c" org-clock-cancel "cancel")
       ("r" org-clock-report "report"))
   #+END_SRC
** org babel
  Org babel.
  #+BEGIN_SRC elisp
    (use-package ob-scheme :after org)
    (use-package ob-python :after org)
    (use-package ob-shell :after org)
    (use-package ob-latex :after org)
    (use-package ob-ipython
      :ensure t
      :after org
      :config
      (setq ob-ipython-resources-dir "~/obipy-resources/")
      (remove-hook 'org-mode-hook 'ob-ipython-auto-configure-kernels)
      (advice-add 'ob-babel-execute:ipython :around 'ob-ipython-auto-configure-kernels))
    (use-package ob-metapost
      :commands org-babel-execute:metapost
      :load-path "~/.emacs.d/packages/ob-metapost")
  #+END_SRC

  Keybindings
  #+BEGIN_SRC elisp
    (general-define-key
     :definer 'minor-mode
     :states '(motion visual normal insert emacs)
     :keymaps 'org-src-mode
     :prefix "M-;"
     "M-;" 'org-edit-src-exit
     "M-k" 'org-edit-src-abort)
  #+END_SRC

  Hydra
  #+BEGIN_SRC elisp
    (defhydra hydra-org-babel
      (:color teal :hint nil)
      (concat
       "  "
       (all-the-icons-fileicon "org" :height 2 :v-adjust -0.2 :face 'all-the-icons-purple)
       " Org babel"
       "

    ^Move^      ^Action^
    ────────────────────
    _j_: next   _e_: edit
    _k_: prev   _t_: tangle
    _h_: head   _r_: result
    _g_: goto

    ")
      ("j" org-babel-next-src-block :color red)
      ("k" org-babel-previous-src-block :color red)
      ("h" org-babel-goto-src-block-head)
      ("g" org-babel-goto-named-src-block)

      ("e" org-edit-src-code)
      ("t" org-babel-tangle)
      ("r" org-babel-open-src-block-result)

      ("q" nil)
      ("<escape>" nil))
  #+END_SRC
** Help functions
  I'd like to keep the main org file clean and tiny, but I also want to see an accurate
  agenda history. However archive or refile don't work for me, so I write this function.
  It simply moves the current subtree to the diary file according to its CLOSED time.
  #+BEGIN_SRC elisp
    (defun my:org-refile-to-diary ()
      "Refile a subtree to a datetree corresponding to its CLOSED time."
      (interactive)
      (let* ((diary-file "~/org/diary.org")
             (datetree-date (org-entry-get nil "CLOSED" t))
             (date (org-date-to-gregorian datetree-date)))
        (save-window-excursion
          (org-cut-subtree)
          (find-file diary-file)
          (org-datetree-find-date-create date)
          (org-end-of-subtree t)
          (newline)
          (org-paste-subtree 4))))
  #+END_SRC

  I cannot remember why I wrote this function (This is one of the reasons for putting my
  config in org mode). It might be related to previous refile function, and it seems
  useful. So I decide not to delete it and hope I will find its usage someday.
  #+BEGIN_SRC elisp
    (defun my:org-datetree-find-date-create-subtree ()
      (interactive)
      (let ((date (org-date-to-gregorian (org-read-date))))
       (org-datetree-find-date-create date 'subtree-at-point)))
  #+END_SRC

  Collect all source block names for ivy. This function is useful when using noweb syntax
  in source code block.
  #+BEGIN_SRC elisp
    (defun my:org-search-src-block-name ()
      "Search source block name in current file"
      (interactive)
      (ivy-read
       "Code block: "
       (let (names)
         (org-babel-map-src-blocks nil
           (let ((name (nth 4 (org-babel-get-src-block-info))))
             (push name names)))
         (seq-filter #'identity names))
       :require-match t
       :action #'insert))
  #+END_SRC
  
  #+BEGIN_SRC elisp
    (defun my:agenda ()
      (interactive)
      (org-agenda nil "h"))
  #+END_SRC
* eshell
  #+BEGIN_SRC elisp
    (defun my:eshell-complete ()
      (interactive)
      (pcomplete-std-complete))

    (defun my:eshell-hook ()
      (setenv "TERM" "xterm-256color")
      (add-to-list
       'eshell-preoutput-filter-functions
       'xterm-color-filter)
      (setq eshell-output-filter-functions
            (remove 'eshell-handle-ansi-color
                    eshell-output-filter-functions))
      (general-def eshell-mode-map
        "<tab>" 'completion-at-point)
      (general-def 'normal eshell-mode-map
        "0" 'eshell-bol
        "^" 'eshell-bol
        "gk" 'eshell-previous-prompt
        "gj" 'eshell-next-prompt))

    (defun my:shortened-path (path max-len)
      "Return a modified version of `path', replacing some components
          with single characters starting from the left to try and get
          the path down to `max-len'"
      (let* ((components (split-string (abbreviate-file-name path) "/"))
             (len (+ (1- (length components))
                     (reduce '+ components :key 'length)))
             (str ""))
        (while (and (> len max-len)
                    (cdr components))
          (setq str (concat str (if (= 0 (length (car components)))
                                    "/"
                                  (string (elt (car components) 0) ?/)))
                len (- len (1- (length (car components))))
                components (cdr components)))
        (concat str (reduce (lambda (a b) (concat a "/" b)) components))))

    (use-package eshell
      :after xterm-color
      :hook
      ((eshell-mode . my:eshell-hook)
       (eshell-before-prompt
        . (lambda () (setq xterm-color-preserve-properties t))))
      :config
      (setq eshell-destroy-buffer-when-process-dies t)
      (setq eshell-history-size 100000)
      (setq
       eshell-visual-commands
       '("htop" "top" "less" "more" "ncdu" "ssh"))
      (setq
       eshell-visual-subcommands
       '(("git" "log" "diff" "show")))
      (setq
       eshell-prompt-function
       (lambda ()
         (concat
          (propertize (my:shortened-path (eshell/pwd) 20)
                      'face '(:foreground "#0D47A1"))
          " "
          (propertize "❯" 'face `(:foreground "#B71C1C" :weight bold))
          (propertize "❯" 'face `(:foreground "#F57F17" :weight bold))
          (propertize "❯" 'face `(:foreground "#1B5E20" :weight bold))
          " ")))
      (setq eshell-prompt-regexp "^.* ❯❯❯ ")
      (setq eshell-highlight-prompt nil))

    (use-package esh-autosuggest
      :ensure t
      :after eshell
      :hook (eshell-mode . esh-autosuggest-mode))

    (use-package eshell-z
      :ensure t
      :after eshell)

    (use-package em-tramp
      :after (eshell esh-module)
      :config
      (add-to-list 'eshell-modules-list 'eshell-tramp))

  #+END_SRC
* dired
  #+BEGIN_SRC elisp
    (use-package dired
      :commands dired
      :hook (dired-mode . hl-line-mode)
      :config
      (setq dired-recursive-copies t)
      (setq dired-recursive-deletes t)
      (setq dired-dwim-target t)
      (setq dired-listing-switches "-alhG --group-directories-first")
      (setq dired-isearch-filenames 'dwim)
      (use-package dired-open
        :ensure t
        :config
        (setq
         dired-open-extensions
         '(("pdf" . "zathura")
           ("html" . "firefox")
           ("docx" . "wps")
           ("doc" . "wps")
           ("mp4" . "mpv")
           ("xlsx" . "et")
           ("xls" . "et")
           ("pptx" . "wpp")
           ("ppt" . "wpp"))))
      (use-package dired-collapse
        :disabled t
        :ensure t
        :hook (dired-mode . dired-collapse-mode))
      (use-package all-the-icons-dired
        :ensure t
        :after all-the-icons
        :hook (dired-mode . all-the-icons-dired-mode))
      (use-package dired-narrow :ensure t))
  #+END_SRC

  Keybindings
  #+BEGIN_SRC elisp
    (general-def 'emacs dired-mode-map
      "j" 'dired-next-line
      "k" 'dired-previous-line
      "r" 'dired-toggle-read-only
      "." 'dired-mark-extension
      "n" 'dired-narrow-regexp
      "/" 'dired-goto-file
      "p" 'dired-up-directory)
  #+END_SRC
* EMMS
  #+BEGIN_SRC elisp
    (use-package emms
      :ensure t
      :defer t
      :config
      (emms-all)
      (emms-default-players)
      (setq emms-player-list '(emms-player-mplayer))
      (setq emms-source-file-default-directory "~/Music"))
  #+END_SRC
* packages
** academic-phrases
   #+BEGIN_SRC elisp
     (use-package academic-phrases
       :ensure t
       :commands (academic-phrases academic-phrases-by-section))
   #+END_SRC
** alert
   #+BEGIN_SRC elisp
     (use-package alert
       :commands alert
       :ensure t
       :config
       (setq alert-default-style 'libnotify))
   #+END_SRC
** battery
   #+BEGIN_SRC elisp
     (use-package battery
       :config
       (defun my:battery-mode-line ()
         (let ((p (string-to-number (battery-format "%p" (battery-linux-sysfs)))))
           (concat
            (my:remove-icon-display
             (all-the-icons-faicon
              (cond
               ((> p 99) "battery-full")
               ((> p 75) "battery-three-quarters")
               ((> p 50) "battery-half")
               ((> p 25) "battery-quarter")
               ((> p 0)  "battery-empty"))))
            " "
            (format "%d%%%%" p)))))
   #+END_SRC
** company
   #+BEGIN_SRC elisp
     (use-package company
       :ensure t
       :defer t
       :config
       (setq company-idle-delay 0))
   #+END_SRC

   #+BEGIN_SRC elisp
     (use-package company-tabnine
       :ensure t
       :commands company-tabnine
       :config
       (add-to-list 'company-backends #'company-tabnine))
   #+END_SRC
** ediff
   #+BEGIN_SRC elisp
     (use-package ediff
       :defer
       :config
       (setq ediff-split-window-function 'split-window-horizontally)
       (setq ediff-window-setup-function 'ediff-setup-windows-plain))
   #+END_SRC
** emmet
   #+BEGIN_SRC elisp
     (use-package emmet-mode
       :ensure t
       :hook web-mode)
   #+END_SRC
** evil
   #+BEGIN_SRC elisp
     (use-package evil
       :defer 1
       :ensure t
       :init
       (setq evil-want-abbrev-expand-on-insert-exit nil)
       (setq evil-disable-insert-state-bindings t)
       :config
       (evil-mode 1)
       (setq evil-emacs-state-cursor (list 'box (face-attribute 'default :foreground)))
       (evil-set-initial-state 'dired-mode 'emacs)
       (evil-set-initial-state 'ivy-occur-mode 'emacs)
       (evil-set-initial-state 'wdired-mode 'normal))
     (use-package evil-surround
       :ensure t
       :after evil
       :config
       (global-evil-surround-mode 1))
     (use-package evil-matchit
       :ensure t
       :after evil
       :config
       (global-evil-matchit-mode 1))

   #+END_SRC
** exec-path-from-shell
   #+BEGIN_SRC elisp
     (use-package exec-path-from-shell
       :ensure t
       :defer 1
       :config
       (setq exec-path-from-shell-check-startup-files nil)
       (exec-path-from-shell-copy-env "SSH_AGENT_PID")
       (exec-path-from-shell-copy-env "SSH_AUTH_SOCK"))
   #+END_SRC
** eyebrowse
   #+BEGIN_SRC elisp
     (use-package eyebrowse
       :ensure t
       :config
       (eyebrowse-mode t))
   #+END_SRC

   Keybindings
   #+BEGIN_SRC elisp
     (general-def 'override
       "M-0" 'eyebrowse-switch-to-window-config-0
       "M-1" 'eyebrowse-switch-to-window-config-1
       "M-2" 'eyebrowse-switch-to-window-config-2
       "M-3" 'eyebrowse-switch-to-window-config-3
       "M-4" 'eyebrowse-switch-to-window-config-4
       "M-5" 'eyebrowse-switch-to-window-config-5
       "M-6" 'eyebrowse-switch-to-window-config-6
       "M-7" 'eyebrowse-switch-to-window-config-7
       "M-8" 'eyebrowse-switch-to-window-config-8
       "M-9" 'eyebrowse-switch-to-window-config-9)
   #+END_SRC
** fcitx
   #+BEGIN_SRC elisp
     (use-package fcitx
       :ensure t
       :defer 2
       :config
       (fcitx-aggressive-setup))
   #+END_SRC
** flycheck
   #+BEGIN_SRC elisp
     (use-package flycheck
       :ensure t
       :hook (c-mode . flycheck-mode))
   #+END_SRC
** geiser
   #+BEGIN_SRC elisp
     (use-package geiser
       :ensure t
       :config
       (setq geiser-chez-binary "chez-scheme")
       (setq geiser-default-implementation 'chez))
   #+END_SRC
** hl-line-mode
   #+BEGIN_SRC elisp
     (use-package hl-line-mode
       :hook ((prog-mode . hl-line-mode)
              (prog-mode . (lambda () (setq-local display-line-numbers 'relative)))))
   #+END_SRC
** htmlize
   #+BEGIN_SRC elisp
     (use-package htmlize
       :ensure t
       :commands (htmlize htmlize-file htmlize-region htmlize-buffer))
   #+END_SRC
** ibuffer
   #+BEGIN_SRC elisp
     (use-package ibuffer
       :hook (ibuffer-mode . ibuffer-vc-set-filter-groups-by-vc-root)
       :config
       (setq
        ibuffer-formats
        '(("    " (name 24 24) " " (mode 24 24) " " filename-and-process)))
       (use-package ibuffer-vc :ensure t))
   #+END_SRC
** imenu-list
   #+BEGIN_SRC elisp
     (use-package imenu-list
       :ensure t
       :commands imenu-list)
   #+END_SRC
** info
   #+BEGIN_SRC elisp
     (use-package info)
   #+END_SRC
** ivy
   #+BEGIN_SRC elisp
     (use-package ivy
       :ensure t
       :config
       (ivy-mode 1)
       (use-package ivy-hydra :ensure t)
       (setq ivy-use-virtual-buffers t)
       (setq ivy-count-format "(%d/%d) ")
       (setq ivy-re-builders-alist '((t . ivy--regex-plus))))
     (use-package swiper
       :commands swiper
       :ensure t
       :after ivy)
     (use-package counsel
       :ensure t
       :after swiper)
     (use-package all-the-icons-ivy
       :ensure t
       :after (all-the-icons ivy)
       :config
       (all-the-icons-ivy-setup))
     (use-package avy
       :ensure t
       :after ivy)

     (use-package ivy-posframe
       :ensure t
       :after ivy
       :config
       (setq ivy-height 20)
       (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-center)))
       (setq ivy-posframe-border-width 1)
       (setq ivy-posframe-parameters
             '((left-fringe . 8)
               (right-fringe . 8)))
       (ivy-posframe-mode))
   #+END_SRC
** keyfreq
   #+BEGIN_SRC elisp
     (use-package keyfreq
       :ensure t
       :config
       (keyfreq-mode 1)
       (keyfreq-autosave-mode 1))
   #+END_SRC
** lsp
   #+BEGIN_SRC elisp
     (use-package lsp-mode :ensure t :commands lsp)
     (use-package lsp-ui :ensure t :commands lsp-ui-mode)
     (use-package company-lsp :ensure t :commands company-lsp)
     (use-package ccls
       :ensure t
       :defer t
       :hook ((c-mode c++-mode objc-mode) . (lambda () (require 'ccls) (lsp))))
   #+END_SRC
** magit
   #+BEGIN_SRC elisp
     (use-package magit
       :ensure t
       :hook (git-commit-mode . evil-insert-state)
       :defer 6)
   #+END_SRC

   #+BEGIN_SRC elisp
     (general-define-key
      :definer 'minor-mode
      :states '(motion visual normal insert emacs)
      :keymaps 'git-commit-mode
      :prefix "M-;"
      "M-;" 'with-editor-finish
      "M-k" 'with-editor-cancel)
   #+END_SRC
** notmuch
   #+BEGIN_SRC elisp
     (use-package notmuch
       :commands (notmuch notmuch-search)
       :config
       (setq mail-host-address "hawnzug.me")
       (use-package message
         :config
         (setq message-sendmail-envelope-from 'header)
         (setq message-send-mail-function 'message-send-mail-with-sendmail))
       (use-package sendmail
         :config
         (setq sendmail-program "/usr/bin/msmtp")
         (setq mail-specify-envelope-from t)
         (setq mail-envelope-from 'header))
       (setq notmuch-fcc-dirs
             '(("hawnzug@gmail.com" . "personal/sent +sent -unread -inbox")
               ("wang9163@umn.edu" . "umn/sent +sent -unread -inbox")))

       (setq notmuch-search-oldest-first nil)
       (setq notmuch-hello-sections
         (list #'notmuch-hello-insert-header
               #'notmuch-hello-insert-saved-searches
               #'notmuch-hello-insert-search
               #'notmuch-hello-insert-recent-searches
               #'notmuch-hello-insert-footer))
       (setq notmuch-hello-thousands-separator "")
       (setq notmuch-column-control 0.2)
       (setq mm-text-html-renderer 'gnus-w3m)
       (setq
        notmuch-saved-searches
        '((:name "Inbox" :query "tag:inbox" :key "i")
          (:name "unread" :query "tag:unread" :key "u")
          (:name "emacs-devel" :query "to:emacs-devel@gnu.org")
          (:name "orgmode" :query "to:emacs-orgmode@gnu.org")
          (:name "CSSA" :query "to:umncssa@googlegroups.com")
          (:name "Sandy" :query "to:sandymn@umich.edu")
          (:name "flagged" :query "tag:flagged" :key "f")
          (:name "sent" :query "tag:sent" :key "t")
          (:name "drafts" :query "tag:draft" :key "d")
          (:name "all mail" :query "*" :key "a")))
       (setq notmuch-search-result-format
             '(("date" . "%12s  ")
               ("count" . "%-7s ")
               ("authors" . "%-40s  ")
               ("subject" . "%s ")
               ("tags" . "(%s)")))

       (evil-set-initial-state 'notmuch-show-mode 'normal)
       (evil-set-initial-state 'notmuch-search-mode 'normal)
       (evil-set-initial-state 'notmuch-hello-mode 'normal)
       (evil-set-initial-state 'notmuch-tree-mode 'normal)

       (general-nmap notmuch-common-keymap
         "g?" 'notmuch-help
         "q" 'notmuch-bury-or-kill-this-buffer
         "s" 'notmuch-search
         "S" 'notmuch-tree
         "C" 'notmuch-mua-new-mail
         "cc" 'notmuch-mua-new-mail
         "r" 'notmuch-refresh-this-buffer
         "J" 'notmuch-jump-search)

       (general-nmap notmuch-hello-mode-map
         "g?" 'notmuch-hello-versions
         "RET" 'widget-button-press
         "TAB" 'widget-forward
         "S-TAB" 'widget-backward)

       (general-nmap 'notmuch-search-mode-map
       "cC" 'compose-mail-other-frame
         "a" (lambda (&optional beg end)
               "Read and archive thread"
               (interactive (notmuch-interactive-region))
               (notmuch-search-tag (list "-unread" "-inbox") beg end)
               (when (eq beg end)
                 (notmuch-search-next-thread)))
         "i" (lambda (&optional beg end)
               "Move to inbox"
               (interactive (notmuch-interactive-region))
               (notmuch-search-tag (list "+inbox") beg end))
         "J" 'notmuch-jump-search
         "S" 'notmuch-search-filter
         "o" 'notmuch-search-toggle-order
         "*" 'notmuch-search-tag-all
         "cc" 'compose-mail
         "cr" 'notmuch-search-reply-to-thread-sender
         "cR" 'notmuch-search-reply-to-thread
         "t" 'notmuch-search-filter-by-tag
         "-" 'notmuch-search-remove-tag
         "+" 'notmuch-search-add-tag
         "RET" 'notmuch-search-show-thread)

       (general-nmap 'notmuch-show-mode-map
         "C" 'notmuch-mua-new-mail
         "cc" 'notmuch-mua-new-mail
         "cr" 'notmuch-show-reply-sender
         "cR" 'notmuch-show-reply
         "cf" 'notmuch-show-forward-message
         "p" 'notmuch-show-save-attachments
         "a" 'notmuch-show-archive-thread-then-next
         "A" 'notmuch-show-archive-message-then-next-or-next-thread
         "x" 'notmuch-show-archive-thread-then-exit
         "X" 'notmuch-show-archive-message-then-next-or-exit
         "S" 'notmuch-show-filter-thread
         "<" 'notmuch-show-toggle-thread-indentation
         "H" 'notmuch-show-toggle-visibility-headers
         "gj" 'notmuch-show-next-open-message
         "gk" 'notmuch-show-previous-open-message
         "]]" 'notmuch-show-next-message
         "[[" 'notmuch-show-previous-message
         "C-j" 'notmuch-show-next-message
         "C-k" 'notmuch-show-previous-message
         "M-j" 'notmuch-show-next-thread-show
         "M-k" 'notmuch-show-previous-thread-show
         "*" 'notmuch-show-tag-all
         "-" 'notmuch-show-remove-tag
         "+" 'notmuch-show-add-tag
         "TAB" 'notmuch-show-next-button
         "S-TAB" 'notmuch-show-previous-button
         "RET" 'notmuch-show-toggle-message
         "." 'notmuch-show-part-map)

       (defun notmuch-hello-insert-header ()
         "Insert the default notmuch-hello header."
         (let* ((banner "~/Pictures/gmail.png")
                (spec (create-image banner))
                (size (image-size spec))
                (width (car size))
                (left-margin (max 0 (floor (- (window-width) width) 2))))
           (widget-insert (make-string left-margin ?\ ))
           (insert-image spec)
           (widget-insert "\n")))

       (defun notmuch-hello-insert-saved-searches ()
         "Insert the saved-searches section."
         (let ((searches (notmuch-hello-query-counts
                          (if notmuch-saved-search-sort-function
                              (funcall notmuch-saved-search-sort-function
                                       notmuch-saved-searches)
                            notmuch-saved-searches)
                          :show-empty-searches notmuch-show-empty-saved-searches)))
           (when searches
             (let ((start (point)))
               (notmuch-hello-insert-buttons searches)
               (indent-rigidly start (point) notmuch-hello-indent)))))

       )
   #+END_SRC

   #+BEGIN_SRC elisp
     (defun my:notmuch-dispatch (&optional args)
       (interactive (list (transient-args 'my:notmuch-transient)))
       (let ((query-account nil)
             (query-tag nil)
             (query-ml nil)
             (query))
         (dolist (arg args)
           (pcase arg
             ("to:hawnzug" (push "to:hawnzug@gmail.com" query-account))
             ("to:umn" (push "to:wang9163@umn.edu" query-account))
             ("to:sandy" (push "to:sandymn@umich.edu" query-account))
             ("Inbox" (push "tag:inbox" query-tag))
             ("Unread" (push "tag:unread" query-tag))
             ((or "@all" "@emacs") (push "to:emacs-devel@gnu.org" query-ml))
             ((or "@all" "@orgmode") (push "to:emacs-orgmode@gnu.org" query-ml))
             ((or "@all" "@cssa") (push "to:umncssa@googlegroups.com" query-ml))))
         (setq
          query
          (format "(%s) (%s) %s"
                  (string-join query-account " or ")
                  (string-join query-ml " or ")
                  (string-join query-tag " ")))
         (message "%s" query)
         (notmuch-search query)))

     (define-transient-command my:notmuch-transient ()
       "Transient for notmuch"
       [["Account"
         ("ap" "Personal" "to:hawnzug")
         ("au" "UMN" "to:umn")
         ("as" "Sandy" "to:sandy")]
        ["Mailing List"
         ("la" "All" "@all")
         ("le" "Emacs" "@emacs")
         ("lo" "Orgmode" "@orgmode")]
        ["Tag"
         ("i" "Inbox" "Inbox")
         ("u" "Unread" "Unread")]]
       ["Search"
        ("<RET>" "Go" my:notmuch-dispatch)])
   #+END_SRC
** projectile
   #+BEGIN_SRC elisp
    (use-package projectile
      :ensure t
      :defer t
      :config
      (projectile-mode 1)
      (setq projectile-sort-order 'recently-active)
      (setq projectile-switch-project-action #'projectile-dired)
      (setq projectile-completion-system 'ivy))
   #+END_SRC
** rainbow-delimiters
   #+BEGIN_SRC elisp
     (use-package rainbow-delimiters
       :disabled t
       :ensure t
       :hook ((prog-mode coq-mode) . rainbow-delimiters-mode))
   #+END_SRC
** sublimity
   #+BEGIN_SRC elisp
     (use-package sublimity
       :disabled t
       :ensure t
       :config
       (use-package sublimity-scroll)
       (use-package sublimity-map
         :config
         (sublimity-map-set-delay nil)))
   #+END_SRC
** symbol-overlay
   #+BEGIN_SRC elisp
     (use-package symbol-overlay
       :ensure t
       :commands symbol-overlay-put)
   #+END_SRC
** web-mode
   #+BEGIN_SRC elisp
     (use-package web-mode
       :mode "\\.html?\\'"
       :ensure t)
   #+END_SRC
** which-key
   #+BEGIN_SRC elisp
     (use-package which-key
       :ensure t
       :config
       (which-key-mode 1))
   #+END_SRC
** xterm-color
   #+BEGIN_SRC elisp
    (use-package xterm-color :ensure t)
   #+END_SRC
* languages
** Coq
   #+BEGIN_SRC elisp
     (use-package proof-general
       :mode ("\\.v\\'" . coq-mode)
       :ensure t
       :config
       (setq proof-splash-enable nil))
     (use-package company-coq
       :ensure t
       :after proof-site
       :hook (coq-mode . company-coq-mode)
       :config
       (setq company-coq-disabled-features '(smart-subscripts))
       (company-coq--init-refman-ltac-abbrevs-cache)
       (company-coq--init-refman-scope-abbrevs-cache)
       (company-coq--init-refman-tactic-abbrevs-cache)
       (company-coq--init-refman-vernac-abbrevs-cache)
       (defun my:company-coq-doc-search ()
         "Search identifier in coq refman"
         (interactive)
         (ivy-read
          "doc: "
          (append company-coq--refman-tactic-abbrevs-cache
                  company-coq--refman-vernac-abbrevs-cache
                  company-coq--refman-scope-abbrevs-cache
                  company-coq--refman-ltac-abbrevs-cache)
          :preselect (ivy-thing-at-point)
          :action 'company-coq-doc-buffer-refman)))
   #+END_SRC
   
   Keybindings
   #+BEGIN_SRC elisp
     (general-def 'normal coq-mode-map
       "K" 'my:company-coq-doc-search)
     (general-mmap coq-mode-map
       :prefix "M-;"
       "g" 'company-coq-proof-goto-point
       "d" 'company-coq-doc
       "e" 'proof-shell-exit
       "c" 'proof-interrupt-process
       "p" 'proof-prf
       "u" 'proof-undo-last-successful-command
       "s" 'proof-find-theorems
       "l" 'proof-layout-windows)
   #+END_SRC
** Haskell
   #+BEGIN_SRC elisp
     (use-package haskell-mode
       :load-path "~/.emacs.d/packages/haskell-mode"
       :mode "\\.hs\\'")

     (use-package ghcid
       :load-path "~/.emacs.d/packages/ghcid"
       :after haskell-mode
       :commands ghcid)
   #+END_SRC
** Agda
   #+BEGIN_SRC elisp
     (eval-and-compile
       (defun agda-mode-load-path ()
         (file-name-directory (shell-command-to-string "agda-mode locate"))))
     (use-package agda2
       :load-path (lambda () (agda-mode-load-path))
       :mode ("\\.agda\\'" agda2-mode))
   #+END_SRC
** Ocaml
   #+BEGIN_SRC elisp
     (eval-and-compile
       (defun merlin-mode-load-path ()
         (expand-file-name
          "share/emacs/site-lisp"
          (file-name-directory
           (shell-command-to-string "opam config var share")))))
     (use-package merlin
       :load-path (lambda () (merlin-mode-load-path))
       :hook
       (tuareg-mode . merlin-mode))
   #+END_SRC

   #+BEGIN_SRC elisp
     (use-package tuareg
       :ensure t
       :defer t)
   #+END_SRC
** Cubicaltt
   #+BEGIN_SRC elisp
     (use-package cubicaltt
       :load-path "~/cubicaltt"
       :mode ("\\.ctt$" . cubicaltt-mode))
   #+END_SRC
** C
   #+BEGIN_SRC elisp
     (use-package cc-mode
       :commands c-mode
       :config
       (setq c-basic-offset 4)
       (setq c-default-style "linux"))
   #+END_SRC
** Lua
   #+BEGIN_SRC elisp
     (use-package lua-mode
       :ensure t
       :mode "\\.lua$"
       :interpreter "lua"
       :config
       (setq lua-indent-level 4))
   #+END_SRC
** Python
   #+BEGIN_SRC elisp
     (use-package python
       :defer t
       :config
       (setq python-indent-offset 4)
       (setq python-indent-guess-indent-offset-verbose nil)
       (setq python-shell-completion-native-enable nil)
       (when (executable-find "ipython")
         (setq python-shell-interpreter "ipython")))
   #+END_SRC
** TeX
   #+BEGIN_SRC elisp
     (use-package tex
       :ensure auctex
       :defer t
       :config
       (setq TeX-auto-save t
             TeX-PDF-mode t
             TeX-electric-sub-and-superscript t))
   #+END_SRC
* help functions
  #+BEGIN_SRC elisp
    (defun my:load-theme ()
      (interactive)
      (load-theme 'lowlight t))
  #+END_SRC

  #+BEGIN_SRC elisp
    (defun font-switch-serif ()
      (interactive)
      (face-remap-add-relative 'default :family "Source Serif Pro"))
  #+END_SRC

  #+BEGIN_SRC elisp
    (defun my:other-window-or-buffer ()
      "Switch to other window or buffer"
      (interactive)
      (if (one-window-p) (switch-to-buffer (other-buffer)) (select-window (next-window))))

    (defun my:new-eshell ()
      "Open a new eshell"
      (interactive)
      (eshell t))

    (defun my:eyebrowse-mode-line ()
      (mapcar
       (lambda (window-config)
         (let* ((slot (car window-config))
                (slot-string (eyebrowse-format-slot window-config)))
           (if (= slot (eyebrowse--get 'current-slot))
               (apply #'concat (moody-tab slot-string 1 'down))
             (concat " " slot-string " "))))
       (eyebrowse--get 'window-configs)))

    (defun my:syntax-color-hex ()
      (interactive)
      (font-lock-add-keywords
       nil
       '(("#[[:xdigit:]]\\{6\\}"
          (0 (put-text-property
              (match-beginning 0)
              (match-end 0)
              'face (list :background (match-string-no-properties 0)))))))
      (font-lock-flush))

    (defun my:toggle-line-number ()
      "Toggle line number between relative and nil."
      (interactive)
      (setq display-line-numbers
        (pcase display-line-numbers
          ('relative nil)
          (_ 'relative))))
  #+END_SRC

  #+BEGIN_SRC elisp
    (defun my:toggle-transparency ()
      (interactive)
      (let ((transparency 95)
            (opacity 100)
            (old-alpha (frame-parameter nil 'alpha)))
        (if (and (numberp old-alpha) (< old-alpha opacity))
            (set-frame-parameter nil 'alpha opacity)
          (set-frame-parameter nil 'alpha transparency))))
  #+END_SRC
