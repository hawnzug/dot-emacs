#+PROPERTY: header-args:elisp :tangle config.el :results output silent
# -*- org-babel-use-quick-and-dirty-noweb-expansion: t; -*-
* Contents
:PROPERTIES:
:TOC:      :include all
:END:

:CONTENTS:
- [[#contents][Contents]]
- [[#early-init][early init]]
- [[#init][init]]
- [[#use-package][use-package]]
- [[#native-compilation][native compilation]]
- [[#help-functions][help functions]]
- [[#theme][theme]]
- [[#mode-line][mode line]]
  - [[#moody][moody]]
- [[#generalel][general.el]]
- [[#evil][evil]]
  - [[#evil-surround][evil-surround]]
  - [[#evil-matchit][evil-matchit]]
- [[#completion][completion]]
  - [[#vertico][vertico]]
  - [[#orderless][orderless]]
  - [[#marginalia][marginalia]]
  - [[#consult][consult]]
  - [[#embark][embark]]
- [[#org][org]]
- [[#dired][dired]]
- [[#packages][packages]]
  - [[#alert][alert]]
  - [[#async][async]]
  - [[#avy][avy]]
  - [[#bibtex][bibtex]]
  - [[#bookmark][bookmark]]
  - [[#burly][burly]]
  - [[#comint][comint]]
  - [[#company][company]]
  - [[#docker][docker]]
  - [[#ediff][ediff]]
  - [[#eldoc][eldoc]]
  - [[#eglot][eglot]]
  - [[#vterm][vterm]]
  - [[#exec-path-from-shell][exec-path-from-shell]]
  - [[#fcitx][fcitx]]
  - [[#find-file-in-project][find-file-in-project]]
  - [[#flymake][flymake]]
  - [[#projectel][project.el]]
  - [[#help-mode][help-mode]]
  - [[#hl-todo][hl-todo]]
  - [[#htmlize][htmlize]]
  - [[#ibuffer][ibuffer]]
  - [[#imenu-list][imenu-list]]
  - [[#info][info]]
  - [[#magit][magit]]
  - [[#markdown][markdown]]
  - [[#newcomment][newcomment]]
  - [[#recentf][recentf]]
  - [[#snippets][snippets]]
  - [[#strokes][strokes]]
  - [[#symbol-overlay][symbol-overlay]]
  - [[#terminal-here][terminal-here]]
  - [[#tramp][tramp]]
  - [[#vc-mode][vc-mode]]
  - [[#wgrep][wgrep]]
  - [[#which-key][which-key]]
  - [[#winner-mode][winner-mode]]
  - [[#xref][xref]]
- [[#languages][languages]]
  - [[#cc-mode][cc-mode]]
  - [[#tree-sitter][tree-sitter]]
  - [[#coq][Coq]]
  - [[#csv][CSV]]
  - [[#haskell][Haskell]]
  - [[#html][HTML]]
  - [[#lua][Lua]]
  - [[#agda][Agda]]
  - [[#ocaml][Ocaml]]
  - [[#sml][SML]]
  - [[#prolog][Prolog]]
  - [[#python][Python]]
  - [[#cubicaltt][Cubicaltt]]
  - [[#shell][Shell]]
  - [[#tex][TeX]]
  - [[#yaml][YAML]]
:END:
* early init
Credit: [[https://www.reddit.com/r/emacs/comments/xjyuni/comment/ipbbvkn][/r/xjyuni]]
#+BEGIN_SRC elisp :tangle early-init.el
  (setq frame-inhibit-implied-resize t)
#+END_SRC

Allow large garbage collection threshold when init.
#+BEGIN_SRC elisp :tangle early-init.el
  (setq gc-cons-threshold 64000000)
  (add-hook 'after-init-hook #'(lambda () (setq gc-cons-threshold 800000)))
  (setq package-enable-at-startup nil)
#+END_SRC

Disable useless UIs.
#+BEGIN_SRC elisp :tangle early-init.el
  (scroll-bar-mode -1)
  (horizontal-scroll-bar-mode -1)
  (tool-bar-mode -1)
  (tooltip-mode -1)
  (menu-bar-mode -1)
#+END_SRC

* use-package
#+BEGIN_SRC elisp
  (setq package-user-dir "~/.config/emacs/elpa")
  (let ((default-directory package-user-dir))
    (normal-top-level-add-subdirs-to-load-path)
    ;; Prefer elpa packages
    ;; (setq load-path (reverse load-path))
    )
  (require 'use-package)
#+END_SRC

#+BEGIN_SRC elisp
  (with-eval-after-load 'info
    (info-initialize)
    (dolist (dir (directory-files package-user-dir))
      (let ((fdir (concat (file-name-as-directory package-user-dir) dir)))
        (unless (or (member dir '("." ".." "archives" "gnupg"))
                    (not (file-directory-p fdir))
                    (not (file-exists-p (concat (file-name-as-directory fdir) "dir"))))
          (add-to-list 'Info-directory-list fdir)))))
#+END_SRC

#+BEGIN_SRC elisp
  (with-eval-after-load 'package
    (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t))
#+END_SRC

* init
** quiet startup
#+BEGIN_SRC elisp
  (setq inhibit-startup-screen t)
  (setq inhibit-startup-message t)
  (setq inhibit-startup-echo-area-message t)
  (setq initial-scratch-message nil)
  (setq initial-major-mode 'fundamental-mode)
#+END_SRC

** frame
#+BEGIN_SRC elisp
  (use-package frame
    :custom
    (window-divider-default-right-width 1)
    (window-divider-default-bottom-width 1)
    (window-divider-default-places t)
    :config
    (blink-cursor-mode)
    (window-divider-mode))
#+END_SRC

** parentheses
#+BEGIN_SRC elisp
  (setq delete-pair-blink-delay 0)
  (use-package elec-pair
    :config
    (electric-pair-mode))
  (use-package paren
    :config
    (show-paren-mode 1))
#+END_SRC

** files
#+BEGIN_SRC elisp
  (use-package files
    :custom
    (make-backup-files nil)
    (auto-save-default nil)
    (auto-save-visited-interval 1)
    :config
    (auto-save-visited-mode))
#+END_SRC

** tab
#+BEGIN_SRC elisp
  (setq-default indent-tabs-mode nil)
#+END_SRC

** C code variables
#+BEGIN_SRC elisp
  (use-package emacs
    :custom
    (default-process-coding-system '(utf-8-unix . utf-8-unix))
    (word-wrap-by-category t)
    (delete-by-moving-to-trash t)
    (text-quoting-style 'straight)
    (kill-buffer-query-functions nil)
    (read-process-output-max (* 1024 1024))
    (frame-resize-pixelwise t)
    :config
    (defun system-move-file-to-trash (filename)
      (shell-command (concat "trash " (shell-quote-argument filename))))
    (defalias 'yes-or-no-p 'y-or-n-p)
    (setq-default tab-width 4)
    (setq-default truncate-lines t))
#+END_SRC

** window
#+BEGIN_SRC elisp
  (use-package window
    :custom
    (split-width-threshold 100))
#+END_SRC

** help
#+BEGIN_SRC elisp
  (use-package help
    :custom
    (help-window-select t))
#+END_SRC

** native compilation
#+BEGIN_SRC elisp
  (use-package comp
    :custom
    (native-comp-async-report-warnings-errors 'silent))
#+END_SRC

* theme
#+BEGIN_SRC elisp
  (load-theme 'fourma t)
#+END_SRC

** font
*** font setup.
#+BEGIN_SRC elisp
  (defun my:font-setup ()
    (let ( ;; (primary-font "Iosevka Curly Slab 16")
          (primary-font "Rec Mono Casual 12")
          (chinese-font (font-spec :family "Source Han Serif CN"
                                   :weight 'bold)))
      (setq face-font-rescale-alist '(("Source Han Serif CN" . 0.825)))
      (set-fontset-font t 'unicode "Iosevka Curly Slab")
      (set-fontset-font t 'unicode "Noto Color Emoji" nil 'append)
      (set-fontset-font t 'unicode "DejaVu Sans" nil 'append)

      (set-fontset-font t 'han "Rec Mono Casual 12")
      (set-fontset-font t 'han chinese-font nil 'append)
      (set-fontset-font t 'han "LXGW WenKai" nil 'append)
      (set-fontset-font t 'han "HYZiKuTangSongKeBenLiKai" nil 'append)
      (set-fontset-font t 'han "HYKaiTiS" nil 'append)
      (set-fontset-font t 'han "FZNewShuSong-Z10S" nil 'append)
      (set-fontset-font t 'cjk-misc "Rec Mono Casual 12")
      (set-fontset-font t 'cjk-misc chinese-font nil 'append)
      (set-fontset-font t 'cjk-misc "LXGW WenKai" nil 'append)
      (set-fontset-font t 'cjk-misc "HYZiKuTangSongKeBenLiKai" nil 'append)
      (set-fontset-font t 'cjk-misc "HYKaiTiS" nil 'append)
      (set-fontset-font t 'cjk-misc "FZNewShuSong-Z10S" nil 'append)
      (set-fontset-font t 'chinese-gbk "Rec Mono Casual 12")
      (set-fontset-font t 'chinese-gbk chinese-font nil 'append)
      (set-fontset-font t 'chinese-gbk "LXGW WenKai" nil 'append)
      (set-fontset-font t 'chinese-gbk "HYZiKuTangSongKeBenLiKai" nil 'append)
      (set-fontset-font t 'chinese-gbk "HYKaiTiS" nil 'append)
      (set-fontset-font t 'chinese-gbk "FZNewShuSong-Z10S" nil 'append)
      (set-face-font 'default primary-font)
      (set-face-font 'fixed-pitch primary-font)
      (set-face-font 'fixed-pitch-serif primary-font)
      ;; (set-face-font 'variable-pitch "Recursive Sans Casual Static 14")
      (set-face-font 'variable-pitch "Alegreya 12")))
  (defun my:font-setup-hook (frame)
    "Setup the font, then remove the hook."
    (select-frame frame)
    (my:font-setup)
    (remove-hook 'after-make-frame-functions 'my:font-setup-hook))
  (setq use-default-font-for-symbols nil)
  (setq inhibit-compacting-font-caches t)
  (setq-default line-spacing nil)
  (add-hook 'after-make-frame-functions 'my:font-setup-hook nil)
  (my:font-setup)
#+END_SRC

*** ligature
#+BEGIN_SRC elisp :tangle no
  (let ((ligatures `((?-  . ,(regexp-opt '("->" "->>" "-->")))
                     (?*  . ,(regexp-opt '("*>")))
                     (?<  . ,(regexp-opt '("<-" "<<-" "<=>" "<|" "<||" "<|||::=" "<|>" "<:" "<>" "<-<"
                                           "<<<" "<==" "<<=" "<=<" "<==>" "<-|" "<<" "<~>" "<=|" "<~~" "<~"
                                           "<$>" "<$" "<+>" "<+" "</>" "</" "<*" "<*>" "<->" "<!--")))
                     (?:  . ,(regexp-opt '(":>" ":<" ":::" "::" ":?" ":?>" ":=")))
                     (?=  . ,(regexp-opt '("==>" "=>" "===" "=:=" "==")))
                     (?!  . ,(regexp-opt '("!==" "!!" "!=")))
                     (?|  . ,(regexp-opt '("|||>" "||>" "|>" "|=>")))
                     (?+  . ,(regexp-opt '("+++" "++")))
                     (?~  . ,(regexp-opt '("~~>" "~>"))))))
    (dolist (char-regexp ligatures)
      (set-char-table-range composition-function-table (car char-regexp)
                            `([,(cdr char-regexp) 0 font-shape-gstring]))))
#+END_SRC

** mode line
#+BEGIN_SRC elisp
  (use-package hide-mode-line
    :ensure t
    :config
    (setq hide-mode-line-excluded-modes nil)
    (global-hide-mode-line-mode))
#+END_SRC

#+BEGIN_SRC elisp :tangle no
  (use-package nerd-icons
    :ensure t)
#+END_SRC

#+BEGIN_SRC elisp :tangle no
  (use-package doom-modeline
    :ensure t
    :config
    (doom-modeline-mode 1))
#+END_SRC

*** moody
#+BEGIN_SRC elisp :tangle no
  (use-package moody
    :ensure t
    :config
    (setq x-underline-at-descent-line t)
    (moody-replace-mode-line-buffer-identification)
    (moody-replace-vc-mode))
#+END_SRC

** alternative themes
#+BEGIN_SRC elisp :tangle no
  (use-package modus-themes
    :ensure t
    :init
    (setq modus-themes-italic-constructs t)
    (setq modus-themes-syntax '(yellow-comments green-strings))
    (setq modus-themes-region '(bg-only no-extend))
    (setq modus-themes-org-blocks 'gray-background)
    (setq modus-themes-headings
          '((t . (monochrome overline background))))
    (setq modus-themes-mode-line '(accented))
    :config
    (modus-themes-load-operandi))
#+END_SRC

#+BEGIN_SRC elisp :tangle no
  (use-package lab-themes
    :ensure t
    :config
    (lab-themes-load-style 'light))
#+END_SRC

#+BEGIN_SRC elisp :tangle no
  (use-package flucui-themes
    :ensure t
    :config
    (flucui-themes-load-style 'light))
#+END_SRC

* help functions
#+BEGIN_SRC elisp
  (defun my:show-trailing-space ()
    (setq show-trailing-whitespace t))
  (add-hook 'prog-mode-hook #'my:show-trailing-space)
#+END_SRC

#+BEGIN_SRC elisp
  (defun my:other-window-or-buffer ()
    "Switch to other window or buffer"
    (interactive)
    (if (one-window-p) (switch-to-buffer (other-buffer)) (select-window (next-window))))

  (defun my:syntax-color-hex ()
    (interactive)
    (font-lock-add-keywords
     nil
     '(("#[[:xdigit:]]\\{6\\}"
        (0 (put-text-property
            (match-beginning 0)
            (match-end 0)
            'face (list :background (match-string-no-properties 0)))))))
    (font-lock-flush))

  (defun my:toggle-line-number ()
    "Toggle line number between relative and nil."
    (interactive)
    (setq display-line-numbers
          (pcase display-line-numbers
            ('relative nil)
            (_ 'relative))))
#+END_SRC

#+BEGIN_SRC elisp
  (defun my:toggle-transparency ()
    (interactive)
    (let ((transparency 90)
          (opacity 100)
          (old-alpha (frame-parameter nil 'alpha)))
      (if (and (numberp old-alpha) (< old-alpha opacity))
          (set-frame-parameter nil 'alpha opacity)
        (set-frame-parameter nil 'alpha transparency))))
#+END_SRC

* general.el
#+BEGIN_SRC elisp
  (use-package general :ensure t)
#+END_SRC

#+BEGIN_SRC elisp
  (general-def
    "C-x f" 'find-file
    "C-x b" 'consult-buffer
    "C-x g" 'magit-status)
  (general-def 'override
    "C-=" 'text-scale-adjust
    "C--" 'text-scale-adjust)
#+END_SRC

#+BEGIN_SRC elisp
  (general-define-key
   :keymaps '(minibuffer-mode-map
              minibuffer-local-map
              minibuffer-local-ns-map
              minibuffer-local-completion-map
              minibuffer-local-must-match-map
              minibuffer-local-isearch-map)
    "<escape>" 'abort-minibuffers)
#+END_SRC

* tooe
#+BEGIN_SRC elisp
  (use-package tooe-colemak
    :load-path "~/Dev/tooe"
    :config
    (tooe-mode))
#+END_SRC

#+BEGIN_SRC elisp
  (defvar-keymap my:global-leader-map
    "RET" #'execute-extended-command
    "a" #'org-agenda
    "n" #'org-capture
    "h" help-map
    "d" #'denote-open-or-create
    "c" #'citar-open)

  (define-keymap
    :keymap tooe-normal-map
    "SPC" my:global-leader-map)
#+END_SRC

* evil
:PROPERTIES:
:header-args:elisp: :tangle no
:END:

#+BEGIN_SRC elisp
  (use-package evil
    :ensure t
    :custom
    (evil-want-C-i-jump nil)
    (evil-undo-system 'undo-redo)
    (evil-want-change-word-to-end nil)
    :config
    (evil-mode 1))
#+END_SRC

** motion state
#+BEGIN_SRC elisp
  (general-def 'motion
    ;; Upper-left
    "q" nil
    "Q" nil
    "w" nil
    "W" nil
    "f" nil
    "F" nil
    "p" nil
    "P" nil
    ;; "g"
    ;; "G"
    ;; Middle-left
    "a" nil
    "A" nil
    "r" nil
    "R" nil
    "s" nil
    "S" nil
    "t" nil
    "T" nil
    "d" nil
    "D" nil
    ;; Lower-left
    "z" nil
    "Z" nil
    "x" nil
    "X" nil
    "c" nil
    "C" nil
    ;; "v"
    ;; "V"
    "b" nil
    "B" nil
    " " nil

    ;; Upper-right
    "j" #'evil-backward-word-begin
    "J" #'evil-backward-WORD-begin
    "l" #'evil-first-non-blank
    "L" #'evil-beginning-of-line
    "u" #'evil-end-of-line
    "U" nil
    "y" #'evil-forward-word-begin
    "Y" #'evil-forward-WORD-begin
    ";" #'evil-forward-word-end
    ":" #'evil-forward-WORD-end
    ;; Middle-right
    "h" #'evil-backward-char
    "H" nil
    "n" #'evil-next-line
    "N" nil
    "e" #'evil-previous-line
    "E" nil
    "i" #'evil-forward-char
    "I" nil
    "o" #'evil-jump-item
    "O" nil
    ;; Lower-right
    "k" #'evil-find-char
    "K" #'evil-find-char-backward
    "m" #'evil-find-char-to
    "M" #'evil-find-char-to-backward
    "," #'evil-repeat-find-char-reverse
    "<" nil
    "." #'evil-repeat-find-char
    ">" nil
    "/" #'avy-goto-char-timer
    "?" nil
    )
#+END_SRC

** normal state
#+BEGIN_SRC elisp
  (general-def 'normal
    ;; Upper-left
    "q" #'evil-replace
    "Q" #'evil-join
    "w" #'evil-open-below
    "W" #'evil-open-above
    "f" #'evil-insert
    "F" #'evil-insert-line
    "p" #'evil-append
    "P" #'evil-append-line
    "g" #'evil-repeat
    "G" nil
    ;; Middle-left
    "a" #'evil-yank
    "A" #'evil-yank-line
    "r" #'evil-delete
    "R" #'evil-delete-line
    "s" #'evil-change
    "S" #'evil-change-line
    "t" #'evil-paste-after
    "T" #'evil-paste-before
    "d" #'evil-undo
    "D" #'evil-redo
    ;; Lower-left
    "z" nil
    "Z" nil
    "x" nil
    "X" nil
    "c" nil
    "C" nil
    ;; "v"
    ;; "V"
    "b" nil
    "B" nil

    ;; Upper-right
    "j" nil
    "J" nil
    "l" nil
    "L" nil
    "u" nil
    "U" nil
    "y" nil
    "Y" nil
    ";" nil
    ":" nil
    ;; Middle-right
    "h" nil
    "H" nil
    "n" nil
    "N" nil
    "e" nil
    "E" nil
    "i" nil
    "I" nil
    "o" nil
    "O" nil
    ;; Lower-right
    "k" nil
    "K" nil
    "m" nil
    "M" nil
    "," nil
    "<" nil
    "." nil
    ">" nil
    "/" nil
    "?" nil

    "<backspace>" #'evil-delete-char
    )
#+END_SRC

** visual state
#+BEGIN_SRC elisp
  (general-def 'visual
    "a" nil
    "A" nil
    "i" nil
    "I" nil
    "o" nil
    "O" nil
    "u" nil
    "U" nil
    "f" evil-inner-text-objects-map
    "F" #'evil-insert
    "p" evil-outer-text-objects-map
    "P" #'evil-append
    "q" #'exchange-point-and-mark
    "Q" #'evil-visual-exchange-corners)
#+END_SRC

** operator state
#+BEGIN_SRC elisp
  (general-def 'operator
    "a" nil
    "i" nil
    "f" evil-inner-text-objects-map
    "p" evil-outer-text-objects-map)
#+END_SRC

** space leader
#+BEGIN_SRC elisp
  (general-define-key
   :keymaps '(motion insert)
   :prefix "SPC"
   :non-normal-prefix "C-SPC"
   :prefix-command 'my:space-prefix-command
   :prefix-map 'my:space-prefix-map
   "SPC" #'execute-extended-command
   "r" #'consult-ripgrep
   "t" #'consult-line
   "n" #'consult-buffer
   "e" #'find-file
   "i" #'magit-status
   "o" #'other-window

   "c" #'citar-open
   "d" #'denote)
#+END_SRC

** evil-surround
#+BEGIN_SRC elisp
  (use-package evil-surround
    :ensure t
    :config
    (global-evil-surround-mode 1)
    (general-def 'operator evil-surround-mode-map
      "s" nil
      "S" nil
      "w" #'evil-surround-edit
      "W" #'evil-Surround-edit)
    (general-def 'visual evil-surround-mode-map
      "S" nil
      "gS" nil
      "w" #'evil-surround-edit
      "W" #'evil-Surround-edit))
#+END_SRC

* boon
#+BEGIN_SRC elisp :tangle no
  (use-package boon
    :ensure t
    :config
    (remove-hook 'window-selection-change-functions
                 'boon-reset-state-for-switchw)
    (defun my:boon-set-command-state ()
      "Quit corfu and then return to boon command state."
      (interactive)
      (call-interactively 'corfu-quit)
      (boon-set-command-state))
    (defun my:boon-beginning-of-line ()
      (interactive)
      (if (equal major-mode 'org-mode)
          (org-beginning-of-line)
        (boon-beginning-of-line)))
    (general-def boon-insert-map
      "<escape>" 'my:boon-set-command-state)
    (general-def boon-select-map
      "q"  'boon-select-outside-quotes
      "w"  'boon-select-word
      "r"  'boon-select-inside-quotes
      "g"  'boon-select-paragraph
      "a"  'boon-select-borders
      "s"  'boon-select-wim
      "v"  'boon-select-with-spaces
      "d"  'boon-select-document
      "C"  'boon-select-comment
      "z"  'boon-select-content
      "x"  'boon-select-outside-pairs
      "c"  'boon-select-inside-pairs
      "b"  'boon-select-blanks)
    (general-def boon-moves-map
      "k" 'boon-switch-mark
      "K" 'xref-pop-marker-stack
      "j"  'xref-find-definitions
      "J"  'xref-find-references
      "l"  'my:boon-beginning-of-line
      ";"  'boon-end-of-line
      "n"  'boon-smarter-backward
      "o"  'boon-smarter-forward
      "E"  'boon-smarter-upward
      "I"  'boon-smarter-downward
      "e"  'backward-char
      "y"  'next-line
      "u"  'previous-line
      "i"  'forward-char
      "N"  'scroll-down-command
      "U"  'backward-paragraph
      "Y"  'forward-paragraph
      "O"  'scroll-up-command
      "h"  'avy-goto-char-timer
      ","  'forward-word
      "."  'backward-word
      "m"  'forward-to-word
      "/"  'boon-find-char-forward
      "<"  'beginning-of-buffer
      "w" 'boon-backward-search-map
      "f" 'boon-forward-search-map
      "W"  'boon-qsearch-previous
      "F"  'boon-qsearch-next
      ">"  'end-of-buffer)
    (general-def boon-command-map
      "q" 'boon-quote-character
      "p" 'consult-line
      "R" 'kmacro-start-macro
      "P" 'kmacro-end-or-call-macro
      "X" 'boon-highlight-regexp
      "a" 'boon-enclose
      "r" 'boon-substitute-region
      "s" 'boon-take-region
      "S" 'boon-treasure-region
      "t" 'boon-splice
      "T" 'yank-pop
      "g" 'boon-goto-map
      "d" 'boon-replace-by-character
      "z" 'boon-repeat-command
      "x" 'boon-x-map
      "c" 'boon-c-god
      "C" 'boon-exchange
      "M" 'join-line
      "V" 'boon-open-next-line-and-insert
      "v" 'boon-set-insert-like-state
      "B" 'boon-copy-to-register
      "b" 'insert-register
      "C-k" 'scroll-down-line
      "C-j" 'scroll-up-line
      "C-v" 'boon-open-line-and-insert)
    (general-def indent-rigidly-map
      "k" 'indent-rigidly-right
      "l" 'indent-rigidly-left)
    (boon-mode))
#+END_SRC

* rime
#+BEGIN_SRC elisp
  (use-package rime
    :ensure t
    :defer t
    :init
    (setq default-input-method 'rime)
    (require 'rime-autoloads)
    :config
    (setq rime-show-candidate 'posframe)
    (setq rime-show-preedit 'inline)
    (setq rime-disable-predicates
          '(rime-predicate-evil-mode-p
            rime-predicate-after-alphabet-char-p
            rime-predicate-prog-in-code-p
            rime-predicate-space-after-cc-p)))
#+END_SRC

* completion
** vertico
#+BEGIN_SRC elisp
  (use-package vertico
    :ensure t
    :config
    (vertico-mode))
#+END_SRC

vertico-directory
#+BEGIN_SRC elisp
  (use-package vertico-directory
    :after vertico
    :general
    (vertico-map
     "RET" 'vertico-directory-enter
     "DEL" 'vertico-directory-delete-char
     "M-DEL" 'vertico-directory-delete-word)
    :hook (rfn-eshadow-update-overlay . vertico-directory-tidy))
#+END_SRC

** orderless
#+BEGIN_SRC elisp
  (use-package orderless
    :ensure t
    :init
    ;; (defun my:orderless-in-minibuffer ()
    ;;   (setq-local completion-styles '(orderless)))
    ;; (add-hook 'minibuffer-setup-hook
    ;;           'my:orderless-in-minibuffer)
    (setq completion-styles '(orderless basic))
    (setq completion-category-defaults nil)
    (setq completion-category-overrides
          '((file (styles . (partial-completion))))))
#+END_SRC

** corfu
#+BEGIN_SRC elisp
  (use-package corfu
    :ensure t
    :config
    (with-eval-after-load 'tooe-colemak
      (defun my:corfu-quit-and-escape ()
        (interactive)
        (call-interactively 'corfu-quit)
        (tooe-set-normal-state))
      (general-def tooe-insert-map
        "<escape>" 'my:corfu-quit-and-escape))
    (setq corfu-auto t))
#+END_SRC

#+BEGIN_SRC elisp
  (use-package emacs
    :init
    (setq completion-cycle-threshold 3)
    (setq read-extended-command-predicate
          #'command-completion-default-include-p)
    (setq tab-always-indent 'complete))
#+END_SRC

** cape
#+BEGIN_SRC elisp
  (use-package cape
    :ensure t
    :init
    (add-to-list 'completion-at-point-functions #'cape-dabbrev))
#+END_SRC

** marginalia
#+BEGIN_SRC elisp
  (use-package marginalia
    :ensure t
    :config
    (marginalia-mode))
#+END_SRC

** consult
#+BEGIN_SRC elisp
  (use-package consult
    :ensure t
    :commands
    (consult-line
     consult-buffer
     consult-recent-file
     consult-ripgrep))
  (use-package consult-xref
    :after (xref consult)
    :config
    (setq xref-show-xrefs-function #'consult-xref))
  (use-package consult-org
    :after org
    :commands consult-org-heading)
  (use-package consult-imenu
    :commands consult-imenu)
  (use-package consult-flymake
    :after flymake
    :commands consult-flymake)
  (use-package consult-register
    :commands
    (consult-register
     consult-register-load
     consult-register-store))
  (use-package consult-info
    :commands
    (consult-info))
#+END_SRC

#+BEGIN_SRC elisp
  (defvar-keymap my:consult-mode-map
    "s" #'consult-line
    "i" #'consult-imenu
    "o" #'consult-org-heading
    "r" #'consult-ripgrep
    "l" #'consult-goto-line
    "m" #'consult-mark
    "d" #'consult-fd
    "h" #'consult-recent-file
    "n" #'consult-info)

  (define-keymap
    :keymap my:global-leader-map
    "s" my:consult-mode-map)
#+END_SRC

** embark
#+BEGIN_SRC elisp
  (use-package embark
    :ensure t
    :general
    (:keymaps 'override
     "M-o" 'embark-act))
#+END_SRC

#+BEGIN_SRC elisp
  (use-package embark-consult
    :ensure t
    :after embark)
#+END_SRC

* org mode
** org
#+BEGIN_SRC elisp
  (use-package org
    ;; :load-path "~/Projects/org-mode/lisp"
    :defer 4
    :mode ("\\.org\\'" . org-mode)
    :init
    (setq org-modules '())
    :hook
    ;; (org-mode . variable-pitch-mode)
    (org-mode . my:show-trailing-space)
    (org-babel-after-execute . org-redisplay-inline-images)
    :config
    (setq org-special-ctrl-a/e t)
    (setq org-todo-keywords
          '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)" "SOMEDAY(s)")))
    (setq org-agenda-files '("~/org/inbox.org"))
    (setq org-archive-location "~/org/archive.org::datetree/")
    (setq org-fontify-done-headline nil)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)
    (setq org-extend-today-until 2)
    (use-package org-mouse)
    (add-to-list 'org-file-apps '(t . "xdg-open %s") t)
    (setq org-reverse-note-order nil)
    (setq org-adapt-indentation nil)
    (setq org-startup-indented t)
    (setq org-startup-truncated t)
    (setq org-hide-emphasis-markers t)
    (setq org-footnote-section nil))
#+END_SRC

** org-refile
#+BEGIN_SRC elisp
  (use-package org-refile
    :commands org-refile
    :config
    (setq org-refile-targets
          '((nil . (:level . 1))))
    (setq org-refile-use-outline-path nil))
#+END_SRC

** org-agenda
#+BEGIN_SRC elisp
  (use-package org-agenda
    :commands org-agenda
    :config
    (use-package org-habit))
#+END_SRC

** org-capture
#+BEGIN_SRC elisp
  (use-package org-capture
    :commands org-capture
    :config
    (setq
     org-capture-templates
     '(("i" "Inbox" entry (file+headline "~/org/inbox.org" "Inbox")
        "* %?\n:PROPERTIES:\n:CREATED:  %U\n:END:"
        :prepend t)
       ("b" "Bookmark" entry (file+headline "~/org/inbox.org" "Inbox")
        "* %a\n:PROPERTIES:\n:CREATED:  %U\n:END:\n%i"
        :prepend t))))
#+END_SRC

** org-protocol
#+BEGIN_SRC elisp
  (use-package org-protocol
    :after org)
#+END_SRC

** org-export
#+BEGIN_SRC elisp :tangle no
  (defun my:org-export-all ()
    "https://emacs.stackexchange.com/a/2260/21752
  Export all subtrees that are *not* tagged with :noexport: to
  separate files.

  Note that subtrees must have the :EXPORT_FILE_NAME: property set
  to a unique value for this to work properly."
    (interactive)
    (let ((org-html-doctype "html5")
          (org-html-html5-fancy t)
          (org-html-postamble nil)
          (org-html-head-include-default-style nil)
          ;; (org-html-mathjax-template "")
          (org-preview-latex-image-directory "~/org/build/images/"))
      (save-excursion
        (org-map-entries
         (lambda ()
           (org-set-property
            "EXPORT_FILE_NAME"
            (concat "build/" (org-id-get-create)))
           (org-html-export-to-html nil t))
         "-noexport"
         'file))))

  (defun my:org-export-html-hook (backend)
    "Resolve all id links to html files"
    (goto-char (point-min))
    (while (eq t (org-next-link))
      (let ((link (org-element-context (org-element-at-point))))
        (when (string= (org-element-property :type link) "id")
          (let ((id (org-element-property :path link))
                (beg (org-element-property :begin link))
                (end (org-element-property :contents-begin link)))
            (delete-region (1+ beg) (1- end))
            (goto-char (1+ beg))
            (insert "[file:" id ".html]"))))))

  (add-hook 'org-export-before-parsing-hook #'my:org-export-html-hook)
#+END_SRC

** org-id
org-id
#+BEGIN_SRC elisp
  (use-package org-id
    :after org
    :config
    (setq org-id-link-to-org-use-id 'create-if-interactive))
#+END_SRC

** org-checklist
#+BEGIN_SRC elisp :tangle no
  (use-package org-checklist
    :after org)
#+END_SRC

** org-maketoc
#+BEGIN_SRC elisp
  (use-package org-make-toc
    :ensure t
    :commands (org-make-toc))
#+END_SRC

** org-superstar
#+BEGIN_SRC elisp
  (use-package org-superstar
    :ensure t
    :hook (org-mode . org-superstar-mode)
    :config
    (setq org-superstar-headline-bullets-list '("•")))
#+END_SRC

* eshell
#+BEGIN_SRC elisp
  (use-package eshell)
#+END_SRC

#+BEGIN_SRC elisp
  (use-package eat
    :ensure t
    :commands eat)
#+END_SRC

* lsp
#+BEGIN_SRC elisp
  (use-package lsp-bridge
    :load-path "~/Projects/emacs-py/lsp-bridge"
    :custom
    (lsp-bridge-python-multi-lsp-server "pyright_ruff")
    (lsp-bridge-python-command "emacs-python.sh")
    :config
    (global-lsp-bridge-mode))
#+END_SRC

keybindings
#+BEGIN_SRC elisp
  (defvar-keymap my:lsp-bridge-mode-leader-map
    "d" #'lsp-bridge-popup-documentation
    "n" #'lsp-bridge-diagnostic-jump-next
    "e" #'lsp-bridge-diagnostic-jump-prev)

  (defun my:lsp-bridge-mode-set-keymap ()
    (keymap-local-set "RET" #'newline-and-indent)
    (setq tooe-normal-local-map
          (define-keymap
            "g" my:lsp-bridge-mode-leader-map)))

  (add-hook 'lsp-bridge-mode-hook #'my:lsp-bridge-mode-set-keymap)
#+END_SRC

* holo-layer
#+BEGIN_SRC elisp :tangle no
  (use-package holo-layer
    :load-path "~/Projects/emacs-py/holo-layer"
    :custom
    (holo-layer-python-command "emacs-python.sh")
    (holo-layer-enable-cursor-animation t)
    (holo-layer-cursor-animation-interval 1)
    (holo-layer-cursor-animation-duration 50)
    (holo-layer-cursor-animation-type "jelly easing")
    :config
    (holo-layer-enable))
#+END_SRC

* dired
#+BEGIN_SRC elisp
  (use-package dired
    :commands dired
    :hook ((dired-mode . dired-omit-mode)
           (dired-mode . dired-hide-details-mode))
    :config
    (setq dired-dwim-target t)
    (setq dired-recursive-copies 'always)
    (setq dired-recursive-deletes 'always)
    (setq dired-listing-switches "-alhvG --group-directories-first")
    (setq dired-isearch-filenames 'dwim))
#+END_SRC

** dirvish
#+BEGIN_SRC elisp :tangle no
  (use-package dirvish
    :ensure t)
#+END_SRC

* packages
** alert
#+BEGIN_SRC elisp
  (use-package alert
    :commands alert
    :ensure t
    :config
    (setq alert-default-style 'libnotify))
#+END_SRC

** async
#+BEGIN_SRC elisp
  (use-package async
    :ensure t
    :defer t)
#+END_SRC

** avy
#+BEGIN_SRC elisp
  (use-package avy
    :ensure t
    :commands avy-goto-char-timer
    :config
    (setq avy-timeout-seconds 0.3))
#+END_SRC

** bibtex
#+BEGIN_SRC elisp :tangle no
  (use-package bibtex-completion
    :ensure t
    :defer t
    :config
    (defun my:bibtex-open-pdf (file)
      (require 'async)
      (async-start-process "bibtex-pdf" "zathura" nil file))
    (setq bibtex-completion-bibliography
          '("~/org/refs.bib"
            "~/org/incomplete.bib"))
    (setq bibtex-completion-notes-path "~/org/readings.org")
    (setq bibtex-completion-pdf-field "file")
    (setq bibtex-completion-notes-template-one-file "\n* ${title}\n:PROPERTIES:\n:Custom_ID: ${=key=}\n:END:\n")
    (setq bibtex-completion-pdf-open-function #'my:bibtex-open-pdf)
    (setq bibtex-completion-library-path '("~/Documents/")))
#+END_SRC

#+BEGIN_SRC elisp :tangle no
  (use-package consult-bibtex
    :load-path "~/.config/emacs/packages/consult-bibtex"
    :general
    ("C-x j" 'consult-bibtex)
    :config
    (with-eval-after-load 'embark
      (add-to-list 'embark-keymap-alist
                   '(bibtex-completion . consult-bibtex-embark-map))))
#+END_SRC

#+BEGIN_SRC elisp
  (use-package emacs
    :after bibtex
    :config
    (defun my:bibtex-insert-download-by-doi (doi)
      (require 'biblio)
      (interactive "sDOI: " bibtex-mode)
      (let ((biblio-synchronous t)
            (biblio-bibtex-use-autokey t)
            title)
        (insert "\n")
        (biblio-doi-insert-bibtex doi)
        (bibtex-beginning-of-entry)
        (setq title (string-replace "\n" "" (bibtex-text-in-field "title")))
        (bibtex-beginning-first-field)
        (bibtex-make-field
         (list "file" nil (concat title ".pdf") nil))
        (let ((filename (file-name-concat
                         "~/Documents/"
                         (concat title ".pdf"))))
          (pcase (completing-read "PDF: " '("ACM" "SciHub" "SKIP") nil t)
            ("ACM"
             (url-copy-file (concat "https://dl.acm.org/doi/pdf/" doi) filename))
            ("SciHub"
             (require 'scihub)
             (scihub doi filename))
            (_
             (kill-new title)
             (message "Copied to clipboard: %s" title)))))))
#+END_SRC

#+BEGIN_SRC elisp
  (use-package citar
    :ensure t
    :init
    (require 'citar-autoloads)
    :custom
    (citar-bibliography '("~/org/refs.bib" "~/org/incomplete.bib"))
    (citar-library-paths '("~/Documents/"))
    (citar-file-open-functions (list (cons "html" #'citar-file-open-external)
                                     (cons "pdf" #'citar-file-open-external)
                                     (cons t #'find-file)))
    (org-cite-global-bibliography citar-bibliography)
    (org-cite-insert-processor 'citar)
    (org-cite-follow-processor 'citar)
    (org-cite-activate-processor 'citar))
  (use-package citar-capf
    :after citar
    :hook
    (LaTeX-mode . citar-capf-setup)
    (org-mode . citar-capf-setup))
  (use-package citar-embark
    :ensure t
    :after citar embark
    :config (citar-embark-mode))
#+END_SRC

#+BEGIN_SRC elisp
  (use-package citar-denote
    :after (citar denote)
    :ensure t
    :config
    (citar-denote-mode))
#+END_SRC

** bookmark
#+BEGIN_SRC elisp
  (use-package bookmark
    :config
    (setq bookmark-fontify nil))
#+END_SRC

** burly
#+BEGIN_SRC elisp :tangle no
  (use-package burly
    :ensure t
    :commands
    (burly-bookmark-windows
     burly-bookmark-handler
     burly-open-bookmark))
#+END_SRC

** comint
#+BEGIN_SRC elisp
  (use-package comint
    :defer t
    :config
    (general-def comint-mode-map
      "M-n" nil
      "M-p" nil
      "M-k" 'comint-previous-input
      "M-j" 'comint-next-input))
#+END_SRC

** company
#+BEGIN_SRC elisp :tangle no
  (use-package company
    :ensure t
    :hook
    ((LaTeX-mode prog-mode) . company-mode)
    :config
    (setq company-minimum-prefix-length 2)
    (setq company-idle-delay 0)
    (use-package company-posframe
      :ensure t
      :config
      (setq company-posframe-font "Iosevka Curly Slab 16")
      (company-posframe-mode 1)))
#+END_SRC

** demo-it
#+BEGIN_SRC elisp
  (use-package demo-it
    :ensure t
    :defer t)
#+END_SRC

** denote
#+BEGIN_SRC elisp
  (use-package denote
    :load-path "~/.config/emacs/packages/denote"
    :config
    (setq denote-directory (expand-file-name "~/org/notes/"))
    (setq denote-infer-keywords t)
    (setq denote-sort-keywords t)
    (setq denote-date-prompt-use-org-read-date t)
    (setq denote-backlinks-show-context t)
    (setq denote-dired-directories (list denote-directory))
    (add-hook 'dired-mode-hook #'denote-dired-mode-in-directories))
#+END_SRC

** docker
#+BEGIN_SRC elisp
  (use-package dockerfile-mode
    :ensure t
    :mode "Dockerfile\\'")

  (use-package tramp-container
    :after tramp)
#+END_SRC

** ediff
#+BEGIN_SRC elisp
  (use-package ediff
    :commands ediff
    :config
    (setq ediff-split-window-function 'split-window-horizontally)
    (setq ediff-window-setup-function 'ediff-setup-windows-plain))
#+END_SRC

** elcord
#+BEGIN_SRC elisp
  (use-package elcord
    :ensure t
    :if (executable-find "discord")
    :commands elcord-mode)
#+END_SRC

** eldoc
#+BEGIN_SRC elisp
  (use-package eldoc
    :defer t
    :config
    (setq eldoc-idle-delay 0)
    (setq eldoc-echo-area-use-multiline-p t)
    (setq eldoc-echo-area-display-truncation-message nil)
    (setq eldoc-echo-area-prefer-doc-buffer t))
#+END_SRC

#+BEGIN_SRC elisp
  (use-package eldoc-box
    :ensure t
    :hook
    (eldoc-mode . eldoc-box-hover-at-point-mode)
    :config
    (setq eldoc-box-max-pixel-width 3000)
    (setq eldoc-box-max-pixel-height 2000))
#+END_SRC

** eglot
#+BEGIN_SRC elisp
  (use-package eglot
    :ensure t
    :commands eglot
    :init
    (add-hook
     'eglot-managed-mode-hook
     (lambda ()
       ;; Show flymake diagnostics first.
       (setq eldoc-documentation-functions
             (cons #'flymake-eldoc-function
                   (remove #'flymake-eldoc-function eldoc-documentation-functions)))
       ;; Show all eldoc feedback.
       (setq eldoc-documentation-strategy #'eldoc-documentation-compose))))
#+END_SRC

#+BEGIN_SRC elisp
  (use-package consult-eglot
    :ensure t
    :after (consult eglot))
#+END_SRC

** vterm
#+BEGIN_SRC elisp
  (use-package vterm
    :ensure t)
#+END_SRC

#+BEGIN_SRC elisp
  (use-package vterm-toggle
    :ensure t
    :commands vterm-toggle
    :config
    (setq vterm-toggle-scope 'project))
#+END_SRC

** exec-path-from-shell
#+BEGIN_SRC elisp
  (use-package exec-path-from-shell
    :ensure t
    :defer 1
    :config
    (setq exec-path-from-shell-check-startup-files nil)
    (exec-path-from-shell-copy-env "SSH_AGENT_PID")
    (exec-path-from-shell-copy-env "SSH_AUTH_SOCK"))
#+END_SRC

** fcitx
#+BEGIN_SRC elisp
  (use-package fcitx
    :if (executable-find "fcitx5-remote")
    :ensure t
    :defer 2
    :config
    (setq fcitx-remote-command "fcitx5-remote")
    (fcitx-aggressive-setup))
#+END_SRC

** find-file-in-project
#+BEGIN_SRC elisp
  (use-package find-file-in-project
    :ensure t
    :commands (find-file-in-project)
    :config
    (setq ffip-use-rust-fd t))
#+END_SRC

** flymake
#+BEGIN_SRC elisp
  (use-package flymake
    :defer t)
#+END_SRC

** project.el
#+BEGIN_SRC elisp
  (use-package project
    :defer t
    :config
    (defun my:find-project-root (dir)
      "Try to locate a project root."
      (when (locate-dominating-file
             dir
             (lambda (d)
               (seq-some (lambda (name) (file-exists-p (expand-file-name name d)))
                         '(".python-version"))))
        (cons 'transient dir)))
    ;; (add-hook 'project-find-functions 'my:find-project-root nil nil)
    )
#+END_SRC

** help-mode
#+BEGIN_SRC elisp
  (use-package help-mode
    :defer t)
#+END_SRC

** hl-todo
#+BEGIN_SRC elisp
  (use-package hl-todo
    :ensure t
    :hook (prog-mode . hl-todo-mode))
#+END_SRC

** htmlize
#+BEGIN_SRC elisp
  (use-package htmlize
    :ensure t
    :commands (htmlize htmlize-file htmlize-region htmlize-buffer))
#+END_SRC

** ibuffer
#+BEGIN_SRC elisp
  (use-package ibuffer
    :hook (ibuffer-mode . ibuffer-vc-set-filter-groups-by-vc-root)
    :general
    ('emacs ibuffer-mode-map
      "M-j" 'ibuffer-forward-filter-group
      "M-k" 'ibuffer-backward-filter-group
      "j" 'ibuffer-forward-line
      "k" 'ibuffer-backward-line)
    :config
    (setq
     ibuffer-formats
     '(("    " (name 24 24) " " (mode 24 24) " " filename-and-process)))
    (use-package ibuffer-vc :ensure t))
#+END_SRC

** imenu-list
#+BEGIN_SRC elisp
  (use-package imenu-list
    :ensure t
    :commands imenu-list)
#+END_SRC

** isearch
#+BEGIN_SRC elisp
  (use-package isearch
    :config
    (setq isearch-wrap-pause 'no
          isearch-lazy-count t
          isearch-repeat-on-direction-change t))
#+END_SRC
** jieba
#+BEGIN_SRC elisp
  (use-package jieba
    :load-path "~/.config/emacs/packages/jieba.el"
    :commands jieba-mode)
#+END_SRC

** keyfreq
#+BEGIN_SRC elisp
  (use-package keyfreq
    :ensure t
    :config
    (keyfreq-mode 1)
    (keyfreq-autosave-mode 1))
#+END_SRC

** ledger-mode
#+BEGIN_SRC elisp
  (use-package ledger-mode
    :ensure t
    :mode "\\.journal\\'"
    :commands ledger-mode
    :config
    (setq ledger-binary-path "ledger.sh")
    (setq ledger-mode-should-check-version nil)
    (setq ledger-report-links-in-register nil)
    (setq ledger-report-auto-width nil)
    (setq ledger-report-use-native-highlighting nil))
#+END_SRC

** lsp-bridge
#+BEGIN_SRC elisp :tangle no
  (use-package lsp-bridge
    :load-path "~/.config/emacs/packages/lsp-bridge"
    :config
    (defun lsp-bridge-start-process ()
      "Start LSP-Bridge process if it isn't started."
      (setq lsp-bridge-is-starting t)
      (unless (lsp-bridge-epc-live-p lsp-bridge-epc-process)
        ;; start epc server and set `lsp-bridge-server-port'
        (lsp-bridge--start-epc-server)
        (let* ((lsp-bridge-args (append
                                 (list lsp-bridge-python-file)
                                 (list (number-to-string lsp-bridge-server-port))
                                 (when lsp-bridge-enable-profile
                                   (list "profile"))
                                 )))

          ;; ;; Set process arguments.
          ;; (if lsp-bridge-enable-debug
          ;;     (progn
          ;;       (setq lsp-bridge-internal-process-prog "gdb")
          ;;       (setq lsp-bridge-internal-process-args (append (list "-batch" "-ex" "run" "-ex" "bt" "--args" lsp-bridge-python-command) lsp-bridge-args)))
          ;;   (setq lsp-bridge-internal-process-prog lsp-bridge-python-command)
          ;;   (setq lsp-bridge-internal-process-args lsp-bridge-args))
          (setq lsp-bridge-internal-process-prog "pdm")
          (setq lsp-bridge-internal-process-args (append (list "run" "-p" "/home/zhu/.config/emacs" "python")
                                                         lsp-bridge-args))

          ;; Start python process.
          (let ((process-connection-type (not (lsp-bridge--called-from-wsl-on-windows-p))))
            (setq lsp-bridge-internal-process
                  (apply 'start-process
                         lsp-bridge-name lsp-bridge-name
                         lsp-bridge-internal-process-prog lsp-bridge-internal-process-args)))
          (set-process-query-on-exit-flag lsp-bridge-internal-process nil)))))
#+END_SRC

** magit
#+BEGIN_SRC elisp
  (use-package magit
    :ensure t
    :commands magit-status
    :defer 5
    :config
    (setq magit-repository-directories
          '(("~/.config/emacs" . 0)
            ("~/org" . 0)
            ("~/Dev" . 1)))
    (setq
     magit-repolist-columns
     '(("Name" 15 magit-repolist-column-ident nil)
       ("Flag" 4 magit-repolist-column-flag nil)
       ("B<U" 3 magit-repolist-column-unpulled-from-upstream
        ((:right-align t)
         (:sort <)))
       ("B>U" 3 magit-repolist-column-unpushed-to-upstream
        ((:right-align t)
         (:sort <)))
       ("Branch" 15 magit-repolist-column-branch nil)
       ("Path" 99 magit-repolist-column-path nil))))
#+END_SRC

#+BEGIN_SRC elisp
  (use-package magit-delta
    :ensure t
    :after magit
    :hook (magit-mode . magit-delta-mode)
    :config
    (add-to-list 'magit-delta-delta-args "--max-line-length=2048"))
#+END_SRC

** markdown
#+BEGIN_SRC elisp
  (use-package markdown-mode
    :ensure t
    :commands (gfm-view-mode markdown-view-mode)
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.mkd\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode)))
#+END_SRC


** newcomment
#+BEGIN_SRC elisp
  (use-package newcomment
    :general
    ('override
     "M-;" nil
     "C-/" 'comment-dwim))
#+END_SRC

** olivetti
#+BEGIN_SRC elisp
  (use-package olivetti
    :ensure t
    :commands olivetti-mode
    :config
    (setq-default olivetti-body-width 0.4)
    (setq olivetti-minimum-body-width 40))
#+END_SRC

** outline
#+BEGIN_SRC elisp
  (use-package outline
    :hook ((LaTeX-mode agda2-mode) . outline-minor-mode))
  ; (add-hook 'outline-minor-mode-hook #'evil-normalize-keymaps)
#+END_SRC

** pixel-scroll
#+BEGIN_SRC elisp
  (use-package pixel-scroll
    :custom
    (pixel-scroll-precision-use-momentum t)
    (pixel-scroll-precision-interpolate-page t)
    :config
    (pixel-scroll-precision-mode 1))
#+END_SRC

** flypy-re
Steal from [[https://github.com/cute-jumper/pinyinlib.el][pinyinlib.el]].

#+BEGIN_SRC elisp
  (use-package flypy-re
    :load-path "~/.config/emacs/packages/flypy-re"
    :config
    ;; orderless
    (with-eval-after-load 'orderless
      (defun completion--regex-pinyin (str)
        (orderless-regexp (flypy-re-build-regexp str)))
      (add-to-list 'orderless-matching-styles 'completion--regex-pinyin))
    ;; avy: overload avy-goto-char-timer
    (with-eval-after-load 'avy
      (defun avy-goto-char-timer (&optional arg)
        "Read one or many consecutive chars and jump to the first one.
  The window scope is determined by `avy-all-windows' (ARG negates it)."
        (interactive "P")
        (let ((avy-all-windows (if arg
                                   (not avy-all-windows)
                                 avy-all-windows)))
          (avy-with avy-goto-char-timer
                    (setq avy--old-cands (avy--read-candidates #'flypy-re-build-regexp))
                    (avy-process avy--old-cands))))))
#+END_SRC

** recentf
#+BEGIN_SRC elisp
  (use-package recentf
    :config
    (setq recentf-max-saved-items 10000)
    (recentf-mode))
#+END_SRC

** scihub
#+BEGIN_SRC elisp
  (use-package scihub
    :load-path "~/.config/emacs/packages/scihub.el"
    :defer t
    :config
    (setq scihub-download-directory "~/Documents/")
    (setq scihub-open-after-download nil))
#+END_SRC

** snippets
#+BEGIN_SRC elisp :tangle no
  (use-package yasnippet
    :ensure t
    :hook (LaTeX-mode . yas-minor-mode))
#+END_SRC

#+BEGIN_SRC elisp
  (use-package tempel
    :ensure t
    :after aas)
#+END_SRC

#+BEGIN_SRC elisp
  (use-package aas
    :ensure t
    :hook (org-mode . aas-activate-for-major-mode)
    :hook (agda2-mode . aas-activate-for-major-mode)
    :config
    (aas-set-snippets 'org-mode
      "bsrc" (lambda () (interactive)
                 (insert "#+BEGIN_SRC elisp\n#+END_SRC")
                 (org-edit-special))
      "\\(" '(tempel "\\(" q "\\)")
      "\\[" '(tempel "\\[" n q n "\\]"))

    (defun my:agda-auto-script-condition ()
      "Condition used for auto-sub/superscript snippets."
      (not (or (bobp) (= (1- (point)) (point-min)) (eq ?\s (char-before)))))
    (aas-set-snippets 'agda2-mode
      :cond #'my:agda-auto-script-condition
      "'" "′"
      "0" "₀"
      "1" "₁"
      "2" "₂"
      "3" "₃"
      "4" "₄"
      "5" "₅"
      "6" "₆"
      "7" "₇"
      "8" "₈"
      "9" "₉"))
#+END_SRC

#+BEGIN_SRC elisp
  (use-package laas
    :ensure t
    :hook ((LaTeX-mode org-mode). laas-mode)
    :config
    (setq laas-enable-auto-space nil))
#+END_SRC

** strokes
#+BEGIN_SRC elisp
  (use-package strokes
    :commands (strokes-do-stroke))
  (general-def strokes-mode-map
    "<down-mouse-3>" 'strokes-do-stroke)
#+END_SRC

** symbol-overlay
#+BEGIN_SRC elisp
  (use-package symbol-overlay
    :ensure t
    :commands symbol-overlay-put)
#+END_SRC

** tabbar
#+BEGIN_SRC elisp
  (defun tab-bar-format-buffer-name ()
    "Produce display of the current buffer name in the tab bar."
    `((global menu-item ,(format-mode-line mode-line-buffer-identification) ignore)))

  (use-package tab-bar
    :hook (window-setup . tab-bar-mode)
    :custom
    (tab-bar-separator "")
    (tab-bar-select-tab-modifiers '(meta))
    (tab-bar-tab-name-truncated-max 20)
    (tab-bar-auto-width nil)
    (tab-bar-new-tab-to 'rightmost)
    (tab-bar-show 1)
    (tab-bar-close-button-show nil)
    (tab-bar-new-tab-choice "*scratch*")
    (tab-bar-tab-hints t)
    (tab-bar-format '(tab-bar-format-tabs
                      tab-bar-format-align-right
                      tab-bar-format-buffer-name))
    :config
    (setq tab-bar-tab-name-format-function
          (lambda (tab i)
            (let ((face (funcall tab-bar-tab-face-function tab)))
              (propertize (concat " " (number-to-string i) " " (alist-get 'name tab) " ") 'face face)))))
#+END_SRC

** tabspaces
#+BEGIN_SRC elisp :tangle no
  (use-package tabspaces
    :ensure t
    :custom
    (tabspaces-use-filtered-buffers-as-default t)
    (tabspaces-default-tab "Default")
    (tabspaces-remove-to-default t)
    (tabspaces-include-buffers '("*scratch*"))
    (tabspaces-initialize-project-with-todo nil)
    (tabspaces-session t)
    (tabspaces-session-auto-restore t)
    :config
    (tabspaces-mode))
#+END_SRC

#+BEGIN_SRC elisp :tangle no
  (with-eval-after-load 'consult
    ;; hide full buffer list (still available with "b" prefix)
    (consult-customize consult--source-buffer :hidden t :default nil)
    ;; set consult-workspace buffer list
    (defvar consult--source-workspace
      (list :name     "Workspace Buffers"
            :narrow   ?w
            :history  'buffer-name-history
            :category 'buffer
            :state    #'consult--buffer-state
            :default  t
            :items    (lambda () (consult--buffer-query
                                  :predicate #'tabspaces--local-buffer-p
                                  :sort 'visibility
                                  :as #'buffer-name)))

      "Set workspace buffer list for consult-buffer.")
    (add-to-list 'consult-buffer-sources 'consult--source-workspace))
#+END_SRC

** terminal-here
#+BEGIN_SRC elisp
  (use-package terminal-here
    :ensure t
    :commands terminal-here-launch
    :config
    (setq terminal-here-terminal-command
          '("alacritty")))
#+END_SRC

** tramp
#+BEGIN_SRC elisp
  (use-package tramp
    :defer t)
#+END_SRC

** vc-mode
#+BEGIN_SRC elisp
  (use-package vc
    :defer t
    :config
    (with-eval-after-load 'tramp
      (setq vc-ignore-dir-regexp
            (format "\\(%s\\)\\|\\(%s\\)"
                    vc-ignore-dir-regexp
                    tramp-file-name-regexp))))
#+END_SRC

** wgrep
#+BEGIN_SRC elisp
  (use-package wgrep
    :ensure t
    :defer t)
#+END_SRC

** which-key
#+BEGIN_SRC elisp
  (use-package which-key
    :ensure t
    :init
    (setq which-key-add-column-padding 2)
    (setq which-key-idle-delay 0)
    (setq which-key-dont-use-unicode t)
    :config
    (which-key-mode 1))
#+END_SRC

** winner-mode
#+BEGIN_SRC elisp
  (use-package winner
    :hook
    (after-init . winner-mode)
    (ediff-quit . winner-undo))
#+END_SRC

* languages
** Common Lisp
#+BEGIN_SRC elisp
  (use-package sly
    :ensure t
    :init
    (load "sly-autoloads")
    :config
    (setq inferior-lisp-program "sbcl"))
#+END_SRC

keybindings
#+BEGIN_SRC elisp
  (defvar-keymap my:sly-mode-leader-map
    "e" #'sly-eval-last-expression
    "l" #'sly-load-file
    "c" #'sly-compile-defun
    "k" #'sly-compile-and-load-file
    "." #'sly-edit-definition
    "," #'sly-pop-find-definition-stack
    "?" #'sly-edit-uses
    "~" #'sly-mrepl-sync
    "z" #'sly-mrepl
    ":" #'sly-interactive-eval
    "f" #'sly-eval-defun
    "w a" #'sly-who-specializes
    "w b" #'sly-who-binds
    "w c" #'sly-who-calls
    "w RET" #'sly-who-macroexpands
    "w r" #'sly-who-references
    "w s" #'sly-who-sets
    "w w" #'sly-calls-who
    "d a" #'sly-apropos
    "d d" #'sly-describe-symbol
    "d f" #'sly-describe-function
    "d g" #'common-lisp-hyperspec-glossary-term
    "d h" #'sly-documentation-lookup
    "d p" #'sly-apropos-package
    "d z" #'sly-apropos-all
    "d r" #'common-lisp-hyperspec-lookup-reader-macro
    "d t" #'common-lisp-hyperspec-format)

  (defun my:sly-mode-set-keymap ()
    (setq tooe-normal-local-map
          (define-keymap
            "c" my:sly-mode-leader-map)))

  (add-hook 'sly-mode-hook #'my:sly-mode-set-keymap)
#+END_SRC

** cooltt
#+BEGIN_SRC elisp
  (use-package cooltt
    :mode ("\\.cooltt\\'" . cooltt-mode)
    :load-path "~/Projects/cooltt/emacs")
#+END_SRC

** cc-mode
#+BEGIN_SRC elisp
  (use-package cc-mode
    :mode
    (("\\.c\\'" . c-mode)
     ("\\.h\\'" . c-or-c++-mode))
    :config
    (setq c-basic-offset 4))
#+END_SRC

#+BEGIN_SRC elisp
  (use-package modern-cpp-font-lock
    :ensure t
    :hook (c++-mode . modern-c++-font-lock-mode))
#+END_SRC

** tree-sitter
#+BEGIN_SRC elisp :tangle no
  (use-package tree-sitter
    :ensure t
    :hook ((html-mode) . tree-sitter-hl-mode)
    :commands (tree-sitter-hl-mode))
#+END_SRC

#+BEGIN_SRC elisp :tangle no
  (use-package tree-sitter-langs
    :ensure t
    :after tree-sitter)
#+END_SRC

** Coq
#+BEGIN_SRC elisp
  (use-package proof-general
    :ensure t
    :mode ("\\.v\\'" . coq-mode)
    :config
    (setq proof-splash-enable nil))
  (use-package company-coq
    :ensure t
    :after proof-site
    :hook (coq-mode . company-coq-mode)
    :config
    (setq company-coq-disabled-features '(smart-subscripts))
    (company-coq--init-refman-ltac-abbrevs-cache)
    (company-coq--init-refman-scope-abbrevs-cache)
    (company-coq--init-refman-tactic-abbrevs-cache)
    (company-coq--init-refman-vernac-abbrevs-cache)
    (defun my:company-coq-doc-search ()
      "Search identifier in coq refman"
      (interactive)
      (ivy-read
       "doc: "
       (append company-coq--refman-tactic-abbrevs-cache
               company-coq--refman-vernac-abbrevs-cache
               company-coq--refman-scope-abbrevs-cache
               company-coq--refman-ltac-abbrevs-cache)
       :preselect (ivy-thing-at-point)
       :action 'company-coq-doc-buffer-refman)))
#+END_SRC

** CSV
#+BEGIN_SRC elisp
  (use-package csv-mode
    :ensure t
    :mode ("\\.[Cc][Ss][Vv]\\'" . csv-mode))
#+END_SRC

** Haskell
#+BEGIN_SRC elisp
  (use-package haskell-mode
    :ensure t
    :mode "\\.hs\\'"
    :config
    (require 'haskell)
    (require 'haskell-doc))
#+END_SRC

** Markdown
#+BEGIN_SRC elisp
  (use-package markdown-mode
    :ensure t
    :mode "\\.md\\'")
#+END_SRC

** HTML
#+BEGIN_SRC elisp
  (use-package sgml-mode
    :mode ("\\.html\\'" . html-mode)
    :config
    (defun my:html-mode-face-remap ()
      (face-remap-set-base
       'tree-sitter-hl-face:attribute
       :foreground "#AAAAAA")
      (face-remap-set-base
       'tree-sitter-hl-face:punctuation.bracket
       :foreground "#DDDDDD")
      (face-remap-add-relative
       'tree-sitter-hl-face:tag
       :foreground "#AAAAAA"))
    (add-hook 'html-mode-hook 'my:html-mode-face-remap))
#+END_SRC

#+BEGIN_SRC elisp
  (use-package emmet-mode
    :ensure t
    :hook (sgml-mode css-mode))
#+END_SRC

** Typescript

#+BEGIN_SRC elisp
  (use-package typescript-mode
    :ensure t
    :mode ("\\.ts\\'" . typescript-mode))
#+END_SRC

** JSON
#+BEGIN_SRC elisp
  (use-package json-mode
    :ensure t
    :mode "\\.json\\'")
#+END_SRC

** Lua
#+BEGIN_SRC elisp
  (use-package lua-mode
    :ensure t
    :mode "\\.lua\\'")
#+END_SRC

** Agda
#+BEGIN_SRC elisp
  (eval-and-compile
    (defun agda-mode-load-path ()
      (file-name-directory (shell-command-to-string "agda-mode locate"))))
  (use-package agda2
    :load-path (lambda () (agda-mode-load-path))
    :mode ("\\.agda\\'" . agda2-mode)
    :config
    (setq outline-regexp "-- #+"))
#+END_SRC

** Ocaml
#+BEGIN_SRC elisp
  (use-package tuareg
    :ensure t
    :mode ("\\.ml[ip]?\\'" . tuareg-mode)
    :defer t)
#+END_SRC

#+BEGIN_SRC elisp
  (eval-and-compile
    (defun opam-emacs-load-path ()
      (expand-file-name
       "emacs/site-lisp"
       (car (process-lines "opam" "var" "share")))))
#+END_SRC

#+BEGIN_SRC elisp :tangle no
  (use-package merlin
    :load-path (lambda () (opam-emacs-load-path))
    :hook
    (tuareg-mode . merlin-mode)
    (caml-mode . merlin-mode)
    :config
    (setq merlin-command 'opam))
#+END_SRC

#+BEGIN_SRC elisp
  (use-package utop
    :load-path (lambda () (opam-emacs-load-path))
    :hook
    (tuareg-mode . utop-minor-mode))
#+END_SRC

** SML
#+BEGIN_SRC elisp
  (use-package sml-mode
    :ensure t
    :mode "\\.sml\\'"
    :config
    (setq sml-indent-level 4)
    (setq sml-indent-args 2))
#+END_SRC

** Prolog
#+BEGIN_SRC elisp
  (use-package prolog
    :mode ("\\.pl\\'" . prolog-mode)
    :init
    (setq prolog-system 'swi))
#+END_SRC

** Python
#+BEGIN_SRC elisp
  (use-package python
    :mode ("\\.py\\'" . python-mode)
    :config
    (with-eval-after-load 'eglot
      (add-to-list
       'eglot-server-programs
       '(python-mode . ("pdm" "run"
                        "pyright-langserver" "--stdio")))))
#+END_SRC

** Cubicaltt
#+BEGIN_SRC elisp
  (use-package cubicaltt
    :load-path "~/cubicaltt"
    :mode ("\\.ctt$" . cubicaltt-mode))
#+END_SRC

** Shell
#+BEGIN_SRC elisp
  (use-package flymake-shellcheck
    :ensure t
    :hook (sh-mode . flymake-shellcheck-load))
#+END_SRC

** LaTeX
#+BEGIN_SRC elisp
  (use-package tex-site
    :ensure auctex
    :mode ("\\.tex\\'" . TeX-latex-mode)
    :config
    (add-hook 'LaTeX-mode-hook 'my:show-trailing-space)
    (add-hook 'LaTeX-mode-hook 'TeX-source-correlate-mode)
    (add-hook 'LaTeX-mode-hook 'TeX-PDF-mode)
    (setq font-latex-fontify-sectioning 'color)
    (setq font-latex-fontify-script nil)
    (setq TeX-view-program-selection '((output-pdf "Okular"))))
#+END_SRC

#+BEGIN_SRC elisp :tangle no
  (use-package auctex-latexmk
    :ensure t
    :after tex-site
    :config
    (auctex-latexmk-setup))
#+END_SRC

#+BEGIN_SRC elisp
  (use-package cdlatex
    :ensure t
    :hook (LaTeX-mode . cdlatex-mode)
    :init
    (setq cdlatex-takeover-parenthesis nil)
    :config
    (add-hook 'cdlatex-tab-hook
              (defun cdlatex-indent-maybe ()
                (when (or (bolp) (looking-back "^[ \t]+"))
                  (LaTeX-indent-line)))))
#+END_SRC

#+BEGIN_SRC elisp
  (use-package xenops
    :hook (LaTeX-mode . xenops-mode)
    :ensure t)
#+END_SRC

** YAML
#+BEGIN_SRC elisp
  (use-package yaml-mode
    :ensure t
    :mode "\\.yaml\\'")
#+END_SRC

